
stm32f2_tim_adc_dma_single.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cdc  08003cdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce4  08003ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  08003cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003cf8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bebd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001daf  00000000  00000000  0002bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f364  00000000  00000000  0002f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf5c  00000000  00000000  0004e664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c10ad  00000000  00000000  0005b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c66d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  0011c6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003cac 	.word	0x08003cac

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08003cac 	.word	0x08003cac

080001c4 <__aeabi_frsub>:
 80001c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001c8:	e002      	b.n	80001d0 <__addsf3>
 80001ca:	bf00      	nop

080001cc <__aeabi_fsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001d0 <__addsf3>:
 80001d0:	0042      	lsls	r2, r0, #1
 80001d2:	bf1f      	itttt	ne
 80001d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001d8:	ea92 0f03 	teqne	r2, r3
 80001dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e4:	d06a      	beq.n	80002bc <__addsf3+0xec>
 80001e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001ee:	bfc1      	itttt	gt
 80001f0:	18d2      	addgt	r2, r2, r3
 80001f2:	4041      	eorgt	r1, r0
 80001f4:	4048      	eorgt	r0, r1
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	bfb8      	it	lt
 80001fa:	425b      	neglt	r3, r3
 80001fc:	2b19      	cmp	r3, #25
 80001fe:	bf88      	it	hi
 8000200:	4770      	bxhi	lr
 8000202:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000206:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800020a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800020e:	bf18      	it	ne
 8000210:	4240      	negne	r0, r0
 8000212:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000216:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800021a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4249      	negne	r1, r1
 8000222:	ea92 0f03 	teq	r2, r3
 8000226:	d03f      	beq.n	80002a8 <__addsf3+0xd8>
 8000228:	f1a2 0201 	sub.w	r2, r2, #1
 800022c:	fa41 fc03 	asr.w	ip, r1, r3
 8000230:	eb10 000c 	adds.w	r0, r0, ip
 8000234:	f1c3 0320 	rsb	r3, r3, #32
 8000238:	fa01 f103 	lsl.w	r1, r1, r3
 800023c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000240:	d502      	bpl.n	8000248 <__addsf3+0x78>
 8000242:	4249      	negs	r1, r1
 8000244:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800024c:	d313      	bcc.n	8000276 <__addsf3+0xa6>
 800024e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000252:	d306      	bcc.n	8000262 <__addsf3+0x92>
 8000254:	0840      	lsrs	r0, r0, #1
 8000256:	ea4f 0131 	mov.w	r1, r1, rrx
 800025a:	f102 0201 	add.w	r2, r2, #1
 800025e:	2afe      	cmp	r2, #254	; 0xfe
 8000260:	d251      	bcs.n	8000306 <__addsf3+0x136>
 8000262:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	ea40 0003 	orr.w	r0, r0, r3
 8000274:	4770      	bx	lr
 8000276:	0049      	lsls	r1, r1, #1
 8000278:	eb40 0000 	adc.w	r0, r0, r0
 800027c:	3a01      	subs	r2, #1
 800027e:	bf28      	it	cs
 8000280:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000284:	d2ed      	bcs.n	8000262 <__addsf3+0x92>
 8000286:	fab0 fc80 	clz	ip, r0
 800028a:	f1ac 0c08 	sub.w	ip, ip, #8
 800028e:	ebb2 020c 	subs.w	r2, r2, ip
 8000292:	fa00 f00c 	lsl.w	r0, r0, ip
 8000296:	bfaa      	itet	ge
 8000298:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800029c:	4252      	neglt	r2, r2
 800029e:	4318      	orrge	r0, r3
 80002a0:	bfbc      	itt	lt
 80002a2:	40d0      	lsrlt	r0, r2
 80002a4:	4318      	orrlt	r0, r3
 80002a6:	4770      	bx	lr
 80002a8:	f092 0f00 	teq	r2, #0
 80002ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002b0:	bf06      	itte	eq
 80002b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002b6:	3201      	addeq	r2, #1
 80002b8:	3b01      	subne	r3, #1
 80002ba:	e7b5      	b.n	8000228 <__addsf3+0x58>
 80002bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c4:	bf18      	it	ne
 80002c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ca:	d021      	beq.n	8000310 <__addsf3+0x140>
 80002cc:	ea92 0f03 	teq	r2, r3
 80002d0:	d004      	beq.n	80002dc <__addsf3+0x10c>
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	bf08      	it	eq
 80002d8:	4608      	moveq	r0, r1
 80002da:	4770      	bx	lr
 80002dc:	ea90 0f01 	teq	r0, r1
 80002e0:	bf1c      	itt	ne
 80002e2:	2000      	movne	r0, #0
 80002e4:	4770      	bxne	lr
 80002e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ea:	d104      	bne.n	80002f6 <__addsf3+0x126>
 80002ec:	0040      	lsls	r0, r0, #1
 80002ee:	bf28      	it	cs
 80002f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	4770      	bx	lr
 80002f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002fa:	bf3c      	itt	cc
 80002fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000300:	4770      	bxcc	lr
 8000302:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000306:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800030e:	4770      	bx	lr
 8000310:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000314:	bf16      	itet	ne
 8000316:	4608      	movne	r0, r1
 8000318:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800031c:	4601      	movne	r1, r0
 800031e:	0242      	lsls	r2, r0, #9
 8000320:	bf06      	itte	eq
 8000322:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000326:	ea90 0f01 	teqeq	r0, r1
 800032a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800032e:	4770      	bx	lr

08000330 <__aeabi_ui2f>:
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e004      	b.n	8000340 <__aeabi_i2f+0x8>
 8000336:	bf00      	nop

08000338 <__aeabi_i2f>:
 8000338:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800033c:	bf48      	it	mi
 800033e:	4240      	negmi	r0, r0
 8000340:	ea5f 0c00 	movs.w	ip, r0
 8000344:	bf08      	it	eq
 8000346:	4770      	bxeq	lr
 8000348:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800034c:	4601      	mov	r1, r0
 800034e:	f04f 0000 	mov.w	r0, #0
 8000352:	e01c      	b.n	800038e <__aeabi_l2f+0x2a>

08000354 <__aeabi_ul2f>:
 8000354:	ea50 0201 	orrs.w	r2, r0, r1
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f04f 0300 	mov.w	r3, #0
 8000360:	e00a      	b.n	8000378 <__aeabi_l2f+0x14>
 8000362:	bf00      	nop

08000364 <__aeabi_l2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000370:	d502      	bpl.n	8000378 <__aeabi_l2f+0x14>
 8000372:	4240      	negs	r0, r0
 8000374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000378:	ea5f 0c01 	movs.w	ip, r1
 800037c:	bf02      	ittt	eq
 800037e:	4684      	moveq	ip, r0
 8000380:	4601      	moveq	r1, r0
 8000382:	2000      	moveq	r0, #0
 8000384:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000388:	bf08      	it	eq
 800038a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800038e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000392:	fabc f28c 	clz	r2, ip
 8000396:	3a08      	subs	r2, #8
 8000398:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800039c:	db10      	blt.n	80003c0 <__aeabi_l2f+0x5c>
 800039e:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a2:	4463      	add	r3, ip
 80003a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003a8:	f1c2 0220 	rsb	r2, r2, #32
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	fa20 f202 	lsr.w	r2, r0, r2
 80003b4:	eb43 0002 	adc.w	r0, r3, r2
 80003b8:	bf08      	it	eq
 80003ba:	f020 0001 	biceq.w	r0, r0, #1
 80003be:	4770      	bx	lr
 80003c0:	f102 0220 	add.w	r2, r2, #32
 80003c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003c8:	f1c2 0220 	rsb	r2, r2, #32
 80003cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d0:	fa21 f202 	lsr.w	r2, r1, r2
 80003d4:	eb43 0002 	adc.w	r0, r3, r2
 80003d8:	bf08      	it	eq
 80003da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b976 	b.w	80006e4 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14d      	bne.n	80004bc <__udivmoddi4+0xac>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d968      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000426:	fab2 f282 	clz	r2, r2
 800042a:	b152      	cbz	r2, 8000442 <__udivmoddi4+0x32>
 800042c:	fa01 f302 	lsl.w	r3, r1, r2
 8000430:	f1c2 0120 	rsb	r1, r2, #32
 8000434:	fa20 f101 	lsr.w	r1, r0, r1
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	ea41 0803 	orr.w	r8, r1, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000446:	fbb8 f7f1 	udiv	r7, r8, r1
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb01 8817 	mls	r8, r1, r7, r8
 8000452:	fb07 f00e 	mul.w	r0, r7, lr
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045c:	4298      	cmp	r0, r3
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x66>
 8000460:	eb1c 0303 	adds.w	r3, ip, r3
 8000464:	f107 35ff 	add.w	r5, r7, #4294967295
 8000468:	f080 811e 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046c:	4298      	cmp	r0, r3
 800046e:	f240 811b 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000472:	3f02      	subs	r7, #2
 8000474:	4463      	add	r3, ip
 8000476:	1a1b      	subs	r3, r3, r0
 8000478:	fbb3 f0f1 	udiv	r0, r3, r1
 800047c:	fb01 3310 	mls	r3, r1, r0, r3
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	b2a4      	uxth	r4, r4
 8000486:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048a:	45a6      	cmp	lr, r4
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0404 	adds.w	r4, ip, r4
 8000492:	f100 33ff 	add.w	r3, r0, #4294967295
 8000496:	f080 8109 	bcs.w	80006ac <__udivmoddi4+0x29c>
 800049a:	45a6      	cmp	lr, r4
 800049c:	f240 8106 	bls.w	80006ac <__udivmoddi4+0x29c>
 80004a0:	4464      	add	r4, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	2100      	movs	r1, #0
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004ae:	b11e      	cbz	r6, 80004b8 <__udivmoddi4+0xa8>
 80004b0:	2300      	movs	r3, #0
 80004b2:	40d4      	lsrs	r4, r2
 80004b4:	e9c6 4300 	strd	r4, r3, [r6]
 80004b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	f000 80ee 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c6:	2100      	movs	r1, #0
 80004c8:	e9c6 0500 	strd	r0, r5, [r6]
 80004cc:	4608      	mov	r0, r1
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f183 	clz	r1, r3
 80004d6:	2900      	cmp	r1, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80fc 	bhi.w	80006dc <__udivmoddi4+0x2cc>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb65 0303 	sbc.w	r3, r5, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	4698      	mov	r8, r3
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d0e2      	beq.n	80004b8 <__udivmoddi4+0xa8>
 80004f2:	e9c6 4800 	strd	r4, r8, [r6]
 80004f6:	e7df      	b.n	80004b8 <__udivmoddi4+0xa8>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8091 	bne.w	8000628 <__udivmoddi4+0x218>
 8000506:	eba1 000c 	sub.w	r0, r1, ip
 800050a:	2101      	movs	r1, #1
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb0 f3f7 	udiv	r3, r0, r7
 8000518:	fb07 0013 	mls	r0, r7, r3, r0
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	42a8      	cmp	r0, r5
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0505 	adds.w	r5, ip, r5
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	42a8      	cmp	r0, r5
 8000536:	f200 80ce 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 800053a:	4643      	mov	r3, r8
 800053c:	1a2d      	subs	r5, r5, r0
 800053e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000542:	fb07 5510 	mls	r5, r7, r0, r5
 8000546:	fb0e fe00 	mul.w	lr, lr, r0
 800054a:	b2a4      	uxth	r4, r4
 800054c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 35ff 	add.w	r5, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80b6 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 8000564:	4628      	mov	r0, r5
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79e      	b.n	80004ae <__udivmoddi4+0x9e>
 8000570:	f1c1 0720 	rsb	r7, r1, #32
 8000574:	408b      	lsls	r3, r1
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000582:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000586:	fbba f8f9 	udiv	r8, sl, r9
 800058a:	fa20 f307 	lsr.w	r3, r0, r7
 800058e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000592:	408d      	lsls	r5, r1
 8000594:	fa1f fe8c 	uxth.w	lr, ip
 8000598:	431d      	orrs	r5, r3
 800059a:	fa00 f301 	lsl.w	r3, r0, r1
 800059e:	fb08 f00e 	mul.w	r0, r8, lr
 80005a2:	0c2c      	lsrs	r4, r5, #16
 80005a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80005a8:	42a0      	cmp	r0, r4
 80005aa:	fa02 f201 	lsl.w	r2, r2, r1
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0404 	adds.w	r4, ip, r4
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	42a0      	cmp	r0, r4
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4464      	add	r4, ip
 80005c8:	1a24      	subs	r4, r4, r0
 80005ca:	fbb4 f0f9 	udiv	r0, r4, r9
 80005ce:	fb09 4410 	mls	r4, r9, r0, r4
 80005d2:	fb00 fe0e 	mul.w	lr, r0, lr
 80005d6:	b2ad      	uxth	r5, r5
 80005d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005dc:	45a6      	cmp	lr, r4
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0404 	adds.w	r4, ip, r4
 80005e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	45a6      	cmp	lr, r4
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4464      	add	r4, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9502 	umull	r9, r5, r0, r2
 80005fa:	eba4 040e 	sub.w	r4, r4, lr
 80005fe:	42ac      	cmp	r4, r5
 8000600:	46c8      	mov	r8, r9
 8000602:	46ae      	mov	lr, r5
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d069      	beq.n	80006e0 <__udivmoddi4+0x2d0>
 800060c:	ebb3 0208 	subs.w	r2, r3, r8
 8000610:	eb64 040e 	sbc.w	r4, r4, lr
 8000614:	fa22 f301 	lsr.w	r3, r2, r1
 8000618:	fa04 f707 	lsl.w	r7, r4, r7
 800061c:	431f      	orrs	r7, r3
 800061e:	40cc      	lsrs	r4, r1
 8000620:	e9c6 7400 	strd	r7, r4, [r6]
 8000624:	2100      	movs	r1, #0
 8000626:	e747      	b.n	80004b8 <__udivmoddi4+0xa8>
 8000628:	fa0c fc02 	lsl.w	ip, ip, r2
 800062c:	f1c2 0120 	rsb	r1, r2, #32
 8000630:	fa25 f301 	lsr.w	r3, r5, r1
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa20 f101 	lsr.w	r1, r0, r1
 800063c:	4095      	lsls	r5, r2
 800063e:	430d      	orrs	r5, r1
 8000640:	fbb3 f1f7 	udiv	r1, r3, r7
 8000644:	fb07 3311 	mls	r3, r7, r1, r3
 8000648:	fa1f fe8c 	uxth.w	lr, ip
 800064c:	0c28      	lsrs	r0, r5, #16
 800064e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000652:	fb01 f30e 	mul.w	r3, r1, lr
 8000656:	4283      	cmp	r3, r0
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0000 	adds.w	r0, ip, r0
 8000662:	f101 38ff 	add.w	r8, r1, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	4283      	cmp	r3, r0
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3902      	subs	r1, #2
 800066e:	4460      	add	r0, ip
 8000670:	1ac0      	subs	r0, r0, r3
 8000672:	fbb0 f3f7 	udiv	r3, r0, r7
 8000676:	fb07 0013 	mls	r0, r7, r3, r0
 800067a:	b2ad      	uxth	r5, r5
 800067c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000680:	fb03 f00e 	mul.w	r0, r3, lr
 8000684:	42a8      	cmp	r0, r5
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0505 	adds.w	r5, ip, r5
 800068c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	42a8      	cmp	r0, r5
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3b02      	subs	r3, #2
 8000698:	4465      	add	r5, ip
 800069a:	1a28      	subs	r0, r5, r0
 800069c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	4631      	mov	r1, r6
 80006a4:	4630      	mov	r0, r6
 80006a6:	e707      	b.n	80004b8 <__udivmoddi4+0xa8>
 80006a8:	462f      	mov	r7, r5
 80006aa:	e6e4      	b.n	8000476 <__udivmoddi4+0x66>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f9      	b.n	80004a4 <__udivmoddi4+0x94>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4643      	mov	r3, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4628      	mov	r0, r5
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4641      	mov	r1, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	4464      	add	r4, ip
 80006d2:	3802      	subs	r0, #2
 80006d4:	e747      	b.n	8000566 <__udivmoddi4+0x156>
 80006d6:	3b02      	subs	r3, #2
 80006d8:	4465      	add	r5, ip
 80006da:	e72f      	b.n	800053c <__udivmoddi4+0x12c>
 80006dc:	4608      	mov	r0, r1
 80006de:	e706      	b.n	80004ee <__udivmoddi4+0xde>
 80006e0:	4631      	mov	r1, r6
 80006e2:	e6e9      	b.n	80004b8 <__udivmoddi4+0xa8>

080006e4 <__aeabi_idiv0>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fb98 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f81a 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 f9ba 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 80006f8:	f000 f998 	bl	8000a2c <MX_DMA_Init>
  MX_ADC1_Init();
 80006fc:	f000 f85c 	bl	80007b8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000700:	f000 f8d6 	bl	80008b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000704:	f000 f946 	bl	8000994 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adc_values, 4);
 8000708:	2204      	movs	r2, #4
 800070a:	4904      	ldr	r1, [pc, #16]	; (800071c <main+0x34>)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <main+0x38>)
 800070e:	f000 fd79 	bl	8001204 <HAL_ADC_Start_DMA>
//  HAL_TIM_Base_Start(&htim2);
//  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start(&htim2);
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <main+0x3c>)
 8000714:	f002 fbbc 	bl	8002e90 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000718:	e7fe      	b.n	8000718 <main+0x30>
 800071a:	bf00      	nop
 800071c:	20000160 	.word	0x20000160
 8000720:	20000028 	.word	0x20000028
 8000724:	200000d0 	.word	0x200000d0

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b092      	sub	sp, #72	; 0x48
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	2230      	movs	r2, #48	; 0x30
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fab0 	bl	8003c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074e:	2301      	movs	r3, #1
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2300      	movs	r3, #0
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800075e:	230d      	movs	r3, #13
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000762:	23c3      	movs	r3, #195	; 0xc3
 8000764:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4618      	mov	r0, r3
 8000774:	f001 ff3c 	bl	80025f0 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800077e:	f000 f9df 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2103      	movs	r1, #3
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f974 	bl	8002a8c <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007aa:	f000 f9c9 	bl	8000b40 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3748      	adds	r7, #72	; 0x48
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007cc:	4a37      	ldr	r2, [pc, #220]	; (80008ac <MX_ADC1_Init+0xf4>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007de:	2201      	movs	r2, #1
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_ADC1_Init+0xf0>)
 80007fa:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000808:	2204      	movs	r2, #4
 800080a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC1_Init+0xf0>)
 800080e:	2201      	movs	r2, #1
 8000810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000816:	2201      	movs	r2, #1
 8000818:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_ADC1_Init+0xf0>)
 800081c:	f000 fb6e 	bl	8000efc <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000826:	f000 f98b 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800082a:	2304      	movs	r3, #4
 800082c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	4619      	mov	r1, r3
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <MX_ADC1_Init+0xf0>)
 800083c:	f000 fddc 	bl	80013f8 <HAL_ADC_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000846:	f000 f97b 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800084a:	2305      	movs	r3, #5
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000852:	463b      	mov	r3, r7
 8000854:	4619      	mov	r1, r3
 8000856:	4814      	ldr	r0, [pc, #80]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000858:	f000 fdce 	bl	80013f8 <HAL_ADC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000862:	f000 f96d 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000866:	2306      	movs	r3, #6
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800086a:	2303      	movs	r3, #3
 800086c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000874:	f000 fdc0 	bl	80013f8 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800087e:	f000 f95f 	bl	8000b40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000882:	2307      	movs	r3, #7
 8000884:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC1_Init+0xf0>)
 8000890:	f000 fdb2 	bl	80013f8 <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800089a:	f000 f951 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000028 	.word	0x20000028
 80008ac:	40012000 	.word	0x40012000

080008b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_TIM2_Init+0xe0>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <MX_TIM2_Init+0xe0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_TIM2_Init+0xe0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_TIM2_Init+0xe0>)
 80008f6:	22c7      	movs	r2, #199	; 0xc7
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_TIM2_Init+0xe0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4822      	ldr	r0, [pc, #136]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000908:	f002 fa72 	bl	8002df0 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000912:	f000 f915 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000920:	4619      	mov	r1, r3
 8000922:	481b      	ldr	r0, [pc, #108]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000924:	f002 fd38 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800092e:	f000 f907 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000932:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000934:	f002 fb12 	bl	8002f5c <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800093e:	f000 f8ff 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000942:	2320      	movs	r3, #32
 8000944:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000946:	2380      	movs	r3, #128	; 0x80
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	4619      	mov	r1, r3
 8000950:	480f      	ldr	r0, [pc, #60]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000952:	f003 f8f3 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800095c:	f000 f8f0 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_TIM2_Init+0xe0>)
 8000978:	f002 fc50 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000982:	f000 f8dd 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3738      	adds	r7, #56	; 0x38
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000d0 	.word	0x200000d0

08000994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009b2:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <MX_TIM3_Init+0x94>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009c4:	22c7      	movs	r2, #199	; 0xc7
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009d6:	f002 fa0b 	bl	8002df0 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80009e0:	f000 f8ae 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_TIM3_Init+0x90>)
 80009f2:	f002 fcd1 	bl	8003398 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80009fc:	f000 f8a0 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_TIM3_Init+0x90>)
 8000a0e:	f003 f895 	bl	8003b3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a18:	f000 f892 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000118 	.word	0x20000118
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2038      	movs	r0, #56	; 0x38
 8000a54:	f001 f859 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a58:	2038      	movs	r0, #56	; 0x38
 8000a5a:	f001 f872 	bl	8001b42 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_GPIO_Init+0x7c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2104      	movs	r1, #4
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <MX_GPIO_Init+0x80>)
 8000ac0:	f001 fd64 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0x80>)
 8000adc:	f001 fbb8 	bl	8002250 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000af8:	2104      	movs	r1, #4
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <HAL_ADC_ConvCpltCallback+0x44>)
 8000afc:	f001 fd5e 	bl	80025bc <HAL_GPIO_TogglePin>
	for(int i=0;i<4;i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e00e      	b.n	8000b24 <HAL_ADC_ConvCpltCallback+0x34>
	{
		Vout[i]= adc_values[i] ;
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_ADC_ConvCpltCallback+0x48>)
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fc0e 	bl	8000330 <__aeabi_ui2f>
 8000b14:	4602      	mov	r2, r0
 8000b16:	4909      	ldr	r1, [pc, #36]	; (8000b3c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<4;i++)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	dded      	ble.n	8000b06 <HAL_ADC_ConvCpltCallback+0x16>
	}

}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020000 	.word	0x40020000
 8000b38:	20000160 	.word	0x20000160
 8000b3c:	20000168 	.word	0x20000168

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x48>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x48>)
 8000b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x48>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_MspInit+0x48>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_MspInit+0x48>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_MspInit+0x48>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a33      	ldr	r2, [pc, #204]	; (8000c84 <HAL_ADC_MspInit+0xec>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d15f      	bne.n	8000c7a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a2a      	ldr	r2, [pc, #168]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_ADC_MspInit+0xf0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bf2:	23f0      	movs	r3, #240	; 0xf0
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4821      	ldr	r0, [pc, #132]	; (8000c8c <HAL_ADC_MspInit+0xf4>)
 8000c06:	f001 fb23 	bl	8002250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_ADC_MspInit+0xfc>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c4e:	4810      	ldr	r0, [pc, #64]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c50:	f000 ff92 	bl	8001b78 <HAL_DMA_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c5a:	f7ff ff71 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c62:	639a      	str	r2, [r3, #56]	; 0x38
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_ADC_MspInit+0xf8>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2012      	movs	r0, #18
 8000c70:	f000 ff4b 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c74:	2012      	movs	r0, #18
 8000c76:	f000 ff64 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40012000 	.word	0x40012000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	20000070 	.word	0x20000070
 8000c94:	40026410 	.word	0x40026410

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d116      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 ff1d 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f000 ff36 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cd6:	e01a      	b.n	8000d0e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_TIM_Base_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d115      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_TIM_Base_MspInit+0x80>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201d      	movs	r0, #29
 8000d04:	f000 ff01 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d08:	201d      	movs	r0, #29
 8000d0a:	f000 ff1a 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40000400 	.word	0x40000400

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f8ad 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <ADC_IRQHandler+0x10>)
 8000d76:	f000 f904 	bl	8000f82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000028 	.word	0x20000028

08000d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <TIM2_IRQHandler+0x10>)
 8000d8a:	f002 f93f 	bl	800300c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000d0 	.word	0x200000d0

08000d98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM3_IRQHandler+0x10>)
 8000d9e:	f002 f935 	bl	800300c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000118 	.word	0x20000118

08000dac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA2_Stream0_IRQHandler+0x10>)
 8000db2:	f000 ffe7 	bl	8001d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000070 	.word	0x20000070

08000dc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df6:	f7ff ffe3 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f002 ff2b 	bl	8003c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fc73 	bl	80006e8 <main>
  bx  lr
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e10:	08003cec 	.word	0x08003cec
  ldr r2, =_sbss
 8000e14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e18:	2000017c 	.word	0x2000017c

08000e1c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <CAN1_RX0_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 fe53 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe7a 	bl	8000b4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fe6b 	bl	8001b5e <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 fe33 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000178 	.word	0x20000178

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000178 	.word	0x20000178

08000efc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e033      	b.n	8000f7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d109      	bne.n	8000f2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fe3c 	bl	8000b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d118      	bne.n	8000f6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	f043 0202 	orr.w	r2, r3, #2
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fb72 	bl	8001638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6a:	e001      	b.n	8000f70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d049      	beq.n	8001058 <HAL_ADC_IRQHandler+0xd6>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d046      	beq.n	8001058 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d12b      	bne.n	8001048 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d127      	bne.n	8001048 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001002:	2b00      	cmp	r3, #0
 8001004:	d006      	beq.n	8001014 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001010:	2b00      	cmp	r3, #0
 8001012:	d119      	bne.n	8001048 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0220 	bic.w	r2, r2, #32
 8001022:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f043 0201 	orr.w	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fd51 	bl	8000af0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f06f 0212 	mvn.w	r2, #18
 8001056:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001078:	2b80      	cmp	r3, #128	; 0x80
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d057      	beq.n	800113a <HAL_ADC_IRQHandler+0x1b8>
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d054      	beq.n	800113a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d139      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d12b      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d124      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d11d      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d119      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001104:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fc0c 	bl	8001948 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 020c 	mvn.w	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800115a:	2b40      	cmp	r3, #64	; 0x40
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d017      	beq.n	800119c <HAL_ADC_IRQHandler+0x21a>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d014      	beq.n	800119c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10d      	bne.n	800119c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f920 	bl	80013d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f06f 0201 	mvn.w	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	2b20      	cmp	r3, #32
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d015      	beq.n	80011fc <HAL_ADC_IRQHandler+0x27a>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d012      	beq.n	80011fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0220 	mvn.w	r2, #32
 80011ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f8f9 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f06f 0220 	mvn.w	r2, #32
 80011fa:	601a      	str	r2, [r3, #0]
  }
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Start_DMA+0x1e>
 800121e:	2302      	movs	r3, #2
 8001220:	e0bc      	b.n	800139c <HAL_ADC_Start_DMA+0x198>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d018      	beq.n	800126a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <HAL_ADC_Start_DMA+0x1a0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a56      	ldr	r2, [pc, #344]	; (80013a8 <HAL_ADC_Start_DMA+0x1a4>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9a      	lsrs	r2, r3, #18
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3b01      	subs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 8084 	bne.w	8001382 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b8:	d106      	bne.n	80012c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f023 0206 	bic.w	r2, r3, #6
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
 80012c6:	e002      	b.n	80012ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <HAL_ADC_Start_DMA+0x1a8>)
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <HAL_ADC_Start_DMA+0x1ac>)
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_ADC_Start_DMA+0x1b0>)
 80012ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001306:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	334c      	adds	r3, #76	; 0x4c
 8001322:	4619      	mov	r1, r3
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f000 fcd4 	bl	8001cd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_ADC_Start_DMA+0x1b4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d129      	bne.n	800139a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	e020      	b.n	800139a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_ADC_Start_DMA+0x1b8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11b      	bne.n	800139a <HAL_ADC_Start_DMA+0x196>
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d114      	bne.n	800139a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	e00b      	b.n	800139a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f043 0210 	orr.w	r2, r3, #16
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	08001845 	.word	0x08001845
 80013b0:	080018ff 	.word	0x080018ff
 80013b4:	0800191b 	.word	0x0800191b
 80013b8:	40012300 	.word	0x40012300
 80013bc:	40012000 	.word	0x40012000

080013c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1c>
 8001410:	2302      	movs	r3, #2
 8001412:	e103      	b.n	800161c <HAL_ADC_ConfigChannel+0x224>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b09      	cmp	r3, #9
 8001422:	d925      	bls.n	8001470 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3b1e      	subs	r3, #30
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68d9      	ldr	r1, [r3, #12]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4403      	add	r3, r0
 8001462:	3b1e      	subs	r3, #30
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	e022      	b.n	80014b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6919      	ldr	r1, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	2207      	movs	r2, #7
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6919      	ldr	r1, [r3, #16]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	4603      	mov	r3, r0
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4403      	add	r3, r0
 80014ac:	409a      	lsls	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d824      	bhi.n	8001508 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	221f      	movs	r2, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3b05      	subs	r3, #5
 80014fa:	fa00 f203 	lsl.w	r2, r0, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
 8001506:	e04c      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	d824      	bhi.n	800155a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b23      	subs	r3, #35	; 0x23
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43da      	mvns	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	400a      	ands	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b23      	subs	r3, #35	; 0x23
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
 8001558:	e023      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b41      	subs	r3, #65	; 0x41
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b41      	subs	r3, #65	; 0x41
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_ADC_ConfigChannel+0x230>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d109      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c8>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4a1c      	ldr	r2, [pc, #112]	; (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015be:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_ADC_ConfigChannel+0x230>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d123      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21a>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d003      	beq.n	80015da <HAL_ADC_ConfigChannel+0x1e2>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b11      	cmp	r3, #17
 80015d8:	d11b      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <HAL_ADC_ConfigChannel+0x234>)
 80015e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d111      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_ADC_ConfigChannel+0x238>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_ADC_ConfigChannel+0x23c>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9a      	lsrs	r2, r3, #18
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001604:	e002      	b.n	800160c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b01      	subs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40012000 	.word	0x40012000
 800162c:	40012300 	.word	0x40012300
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83

08001638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <ADC_Init+0x204>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a7d      	ldr	r2, [pc, #500]	; (800183c <ADC_Init+0x204>)
 8001646:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800164a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <ADC_Init+0x204>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4979      	ldr	r1, [pc, #484]	; (800183c <ADC_Init+0x204>)
 8001656:	4313      	orrs	r3, r2
 8001658:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	021a      	lsls	r2, r3, #8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800168c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6899      	ldr	r1, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <ADC_Init+0x208>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6899      	ldr	r1, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	e00f      	b.n	8001732 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0202 	bic.w	r2, r2, #2
 8001740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6899      	ldr	r1, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7e1b      	ldrb	r3, [r3, #24]
 800174c:	005a      	lsls	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d027      	beq.n	80017b0 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800177e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	3b01      	subs	r3, #1
 8001786:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800178a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	fa92 f2a2 	rbit	r2, r2
 8001792:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	fa03 f102 	lsl.w	r1, r3, r2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	e007      	b.n	80017c0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	3b01      	subs	r3, #1
 80017dc:	051a      	lsls	r2, r3, #20
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6899      	ldr	r1, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001802:	025a      	lsls	r2, r3, #9
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6899      	ldr	r1, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	029a      	lsls	r2, r3, #10
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40012300 	.word	0x40012300
 8001840:	0f000001 	.word	0x0f000001

08001844 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13c      	bne.n	80018d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12b      	bne.n	80018d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187c:	2b00      	cmp	r3, #0
 800187e:	d127      	bne.n	80018d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d119      	bne.n	80018d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0220 	bic.w	r2, r2, #32
 80018aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff f90d 	bl	8000af0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018d6:	e00e      	b.n	80018f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fd7d 	bl	80013e4 <HAL_ADC_ErrorCallback>
}
 80018ea:	e004      	b.n	80018f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff fd57 	bl	80013c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2240      	movs	r2, #64	; 0x40
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f043 0204 	orr.w	r2, r3, #4
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fd52 	bl	80013e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4906      	ldr	r1, [pc, #24]	; (80019f4 <__NVIC_EnableIRQ+0x34>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff90 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff2d 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff42 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff90 	bl	8001a4c <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5f 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff35 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff f9b0 	bl	8000ee8 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e099      	b.n	8001cc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	e00f      	b.n	8001bd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb6:	f7ff f997 	bl	8000ee8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d908      	bls.n	8001bd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e078      	b.n	8001cc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e8      	bne.n	8001bb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_DMA_Init+0x158>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f023 0307 	bic.w	r3, r3, #7
 8001c56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d117      	bne.n	8001c9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fa6d 	bl	800215c <DMA_CheckFifoParam>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c96:	2301      	movs	r3, #1
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fa26 	bl	80020f4 <DMA_CalcBaseAndBitshift>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	f010803f 	.word	0xf010803f

08001cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_DMA_Start_IT+0x26>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e040      	b.n	8001d7c <HAL_DMA_Start_IT+0xa8>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d12f      	bne.n	8001d6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9b8 	bl	8002098 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	223f      	movs	r2, #63	; 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0216 	orr.w	r2, r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e005      	b.n	8001d7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d76:	2302      	movs	r3, #2
 8001d78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d90:	4b8e      	ldr	r3, [pc, #568]	; (8001fcc <HAL_DMA_IRQHandler+0x248>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a8e      	ldr	r2, [pc, #568]	; (8001fd0 <HAL_DMA_IRQHandler+0x24c>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a9b      	lsrs	r3, r3, #10
 8001d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2208      	movs	r2, #8
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01a      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0204 	bic.w	r2, r2, #4
 8001dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2208      	movs	r2, #8
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f043 0202 	orr.w	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2204      	movs	r2, #4
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2210      	movs	r2, #16
 8001e62:	409a      	lsls	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d043      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03c      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	2210      	movs	r2, #16
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
 8001eb2:	e01f      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e016      	b.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0208 	bic.w	r2, r2, #8
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2220      	movs	r2, #32
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 808f 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8087 	beq.w	8002024 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d136      	bne.n	8001f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0216 	bic.w	r2, r2, #22
 8001f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_DMA_IRQHandler+0x1da>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0208 	bic.w	r2, r2, #8
 8001f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	223f      	movs	r2, #63	; 0x3f
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07e      	beq.n	8002090 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
        }
        return;
 8001f9a:	e079      	b.n	8002090 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10d      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d031      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
 8001fc8:	e02c      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e01e      	b.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10f      	bne.n	8002014 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0210 	bic.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	2b00      	cmp	r3, #0
 800202a:	d032      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d022      	beq.n	800207e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d307      	bcc.n	800206c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <HAL_DMA_IRQHandler+0x2cc>
 800206a:	e000      	b.n	800206e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800206c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4798      	blx	r3
 800208e:	e000      	b.n	8002092 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002090:	bf00      	nop
    }
  }
}
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d108      	bne.n	80020d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d6:	e007      	b.n	80020e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3b10      	subs	r3, #16
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <DMA_CalcBaseAndBitshift+0x60>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <DMA_CalcBaseAndBitshift+0x64>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d909      	bls.n	8002136 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	1d1a      	adds	r2, r3, #4
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	659a      	str	r2, [r3, #88]	; 0x58
 8002134:	e007      	b.n	8002146 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08003cd4 	.word	0x08003cd4

0800215c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d856      	bhi.n	800222a <DMA_CheckFifoParam+0xce>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <DMA_CheckFifoParam+0x28>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	080021a7 	.word	0x080021a7
 800218c:	08002195 	.word	0x08002195
 8002190:	0800222b 	.word	0x0800222b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d046      	beq.n	800222e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e043      	b.n	800222e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ae:	d140      	bne.n	8002232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e03d      	b.n	8002232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d121      	bne.n	8002204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d837      	bhi.n	8002236 <DMA_CheckFifoParam+0xda>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x70>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e3 	.word	0x080021e3
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	080021f5 	.word	0x080021f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e030      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d025      	beq.n	800223a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f2:	e022      	b.n	800223a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002202:	e01c      	b.n	800223e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d903      	bls.n	8002212 <DMA_CheckFifoParam+0xb6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002210:	e018      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      break;
 8002216:	e015      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e00b      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 800222a:	bf00      	nop
 800222c:	e00a      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e008      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e006      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e004      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e002      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;   
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
    }
  } 
  
  return status; 
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e16f      	b.n	8002540 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8161 	beq.w	800253a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d005      	beq.n	8002290 <HAL_GPIO_Init+0x40>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d130      	bne.n	80022f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c6:	2201      	movs	r2, #1
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 0201 	and.w	r2, r3, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d017      	beq.n	800232e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	6939      	ldr	r1, [r7, #16]
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80bb 	beq.w	800253a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_GPIO_Init+0x30c>)
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	4a63      	ldr	r2, [pc, #396]	; (800255c <HAL_GPIO_Init+0x30c>)
 80023ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d2:	6453      	str	r3, [r2, #68]	; 0x44
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <HAL_GPIO_Init+0x30c>)
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023e0:	4a5f      	ldr	r2, [pc, #380]	; (8002560 <HAL_GPIO_Init+0x310>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3302      	adds	r3, #2
 80023e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_GPIO_Init+0x314>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_GPIO_Init+0x220>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a56      	ldr	r2, [pc, #344]	; (8002568 <HAL_GPIO_Init+0x318>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d02b      	beq.n	800246c <HAL_GPIO_Init+0x21c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_GPIO_Init+0x31c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d025      	beq.n	8002468 <HAL_GPIO_Init+0x218>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_GPIO_Init+0x320>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d01f      	beq.n	8002464 <HAL_GPIO_Init+0x214>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a53      	ldr	r2, [pc, #332]	; (8002574 <HAL_GPIO_Init+0x324>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d019      	beq.n	8002460 <HAL_GPIO_Init+0x210>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_GPIO_Init+0x328>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_GPIO_Init+0x20c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a51      	ldr	r2, [pc, #324]	; (800257c <HAL_GPIO_Init+0x32c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00d      	beq.n	8002458 <HAL_GPIO_Init+0x208>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a50      	ldr	r2, [pc, #320]	; (8002580 <HAL_GPIO_Init+0x330>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_Init+0x204>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4f      	ldr	r2, [pc, #316]	; (8002584 <HAL_GPIO_Init+0x334>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_GPIO_Init+0x200>
 800244c:	2308      	movs	r3, #8
 800244e:	e010      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002450:	2309      	movs	r3, #9
 8002452:	e00e      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002454:	2307      	movs	r3, #7
 8002456:	e00c      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002458:	2306      	movs	r3, #6
 800245a:	e00a      	b.n	8002472 <HAL_GPIO_Init+0x222>
 800245c:	2305      	movs	r3, #5
 800245e:	e008      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002460:	2304      	movs	r3, #4
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002464:	2303      	movs	r3, #3
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x222>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x222>
 8002470:	2300      	movs	r3, #0
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	461a      	mov	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002484:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_GPIO_Init+0x310>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	089b      	lsrs	r3, r3, #2
 800248a:	3302      	adds	r3, #2
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <HAL_GPIO_Init+0x338>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024b6:	4a34      	ldr	r2, [pc, #208]	; (8002588 <HAL_GPIO_Init+0x338>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024bc:	4b32      	ldr	r3, [pc, #200]	; (8002588 <HAL_GPIO_Init+0x338>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <HAL_GPIO_Init+0x338>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <HAL_GPIO_Init+0x338>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800250a:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_GPIO_Init+0x338>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_GPIO_Init+0x338>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <HAL_GPIO_Init+0x338>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3301      	adds	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f47f ae88 	bne.w	8002260 <HAL_GPIO_Init+0x10>
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40021400 	.word	0x40021400
 800257c:	40021800 	.word	0x40021800
 8002580:	40021c00 	.word	0x40021c00
 8002584:	40022000 	.word	0x40022000
 8002588:	40013c00 	.word	0x40013c00

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43d9      	mvns	r1, r3
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	400b      	ands	r3, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e236      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d050      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b9b      	ldr	r3, [pc, #620]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d112      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b98      	ldr	r3, [pc, #608]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b94      	ldr	r3, [pc, #592]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d036      	beq.n	80026ae <HAL_RCC_OscConfig+0xbe>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d132      	bne.n	80026ae <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e211      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	4b8e      	ldr	r3, [pc, #568]	; (800288c <HAL_RCC_OscConfig+0x29c>)
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d013      	beq.n	8002686 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fc43 	bl	8000ee8 <HAL_GetTick>
 8002662:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002666:	f7fe fc3f 	bl	8000ee8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1fb      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002678:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x76>
 8002684:	e014      	b.n	80026b0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002686:	f7fe fc2f 	bl	8000ee8 <HAL_GetTick>
 800268a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe fc2b 	bl	8000ee8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a3b      	ldr	r3, [r7, #32]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1e7      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x9e>
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d077      	beq.n	80027ac <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026bc:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d126      	bne.n	8002722 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d4:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d120      	bne.n	8002722 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e1bb      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	21f8      	movs	r1, #248	; 0xf8
 8002706:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	fa91 f1a1 	rbit	r1, r1
 800270e:	6179      	str	r1, [r7, #20]
  return result;
 8002710:	6979      	ldr	r1, [r7, #20]
 8002712:	fab1 f181 	clz	r1, r1
 8002716:	b2c9      	uxtb	r1, r1
 8002718:	408b      	lsls	r3, r1
 800271a:	495b      	ldr	r1, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002720:	e044      	b.n	80027ac <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02a      	beq.n	8002780 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	4b59      	ldr	r3, [pc, #356]	; (8002890 <HAL_RCC_OscConfig+0x2a0>)
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fbda 	bl	8000ee8 <HAL_GetTick>
 8002734:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fbd6 	bl	8000ee8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e192      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	21f8      	movs	r1, #248	; 0xf8
 8002764:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	6939      	ldr	r1, [r7, #16]
 8002768:	fa91 f1a1 	rbit	r1, r1
 800276c:	60f9      	str	r1, [r7, #12]
  return result;
 800276e:	68f9      	ldr	r1, [r7, #12]
 8002770:	fab1 f181 	clz	r1, r1
 8002774:	b2c9      	uxtb	r1, r1
 8002776:	408b      	lsls	r3, r1
 8002778:	4943      	ldr	r1, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
 800277e:	e015      	b.n	80027ac <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x2a0>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fbaf 	bl	8000ee8 <HAL_GetTick>
 800278a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fbab 	bl	8000ee8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e167      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d030      	beq.n	800281a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <HAL_RCC_OscConfig+0x2a4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fb8f 	bl	8000ee8 <HAL_GetTick>
 80027ca:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ce:	f7fe fb8b 	bl	8000ee8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e147      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x1de>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_OscConfig+0x2a4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7fe fb78 	bl	8000ee8 <HAL_GetTick>
 80027f8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fb74 	bl	8000ee8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e130      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002828:	2300      	movs	r3, #0
 800282a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d110      	bne.n	800285c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	; 0x40
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_RCC_OscConfig+0x298>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_RCC_OscConfig+0x2a8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x2a8>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x2a8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d122      	bne.n	80028ba <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCC_OscConfig+0x2a8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_RCC_OscConfig+0x2a8>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002880:	f7fe fb32 	bl	8000ee8 <HAL_GetTick>
 8002884:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	e012      	b.n	80028ae <HAL_RCC_OscConfig+0x2be>
 8002888:	40023800 	.word	0x40023800
 800288c:	40023802 	.word	0x40023802
 8002890:	42470000 	.word	0x42470000
 8002894:	42470e80 	.word	0x42470e80
 8002898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fb24 	bl	8000ee8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0e0      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b72      	ldr	r3, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x488>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x48c>)
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fb0c 	bl	8000ee8 <HAL_GetTick>
 80028d0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d4:	f7fe fb08 	bl	8000ee8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0c2      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0ee      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2e4>
 80028f6:	e014      	b.n	8002922 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f8:	f7fe faf6 	bl	8000ee8 <HAL_GetTick>
 80028fc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe faf2 	bl	8000ee8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0ac      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002916:	4b5a      	ldr	r3, [pc, #360]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ee      	bne.n	8002900 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8097 	beq.w	8002a6e <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d061      	beq.n	8002a10 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d146      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x494>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fac5 	bl	8000ee8 <HAL_GetTick>
 800295e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fac1 	bl	8000ee8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	; 0x64
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e07d      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002974:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4b40      	ldr	r3, [pc, #256]	; (8002a88 <HAL_RCC_OscConfig+0x498>)
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	69d1      	ldr	r1, [r2, #28]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6a12      	ldr	r2, [r2, #32]
 8002990:	4311      	orrs	r1, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002996:	0192      	lsls	r2, r2, #6
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800299e:	0612      	lsls	r2, r2, #24
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0412      	lsls	r2, r2, #16
 80029ac:	430a      	orrs	r2, r1
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x494>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa95 	bl	8000ee8 <HAL_GetTick>
 80029be:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fa91 	bl	8000ee8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e04d      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
 80029e0:	e045      	b.n	8002a6e <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <HAL_RCC_OscConfig+0x494>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fa7e 	bl	8000ee8 <HAL_GetTick>
 80029ec:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fa7a 	bl	8000ee8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e036      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x400>
 8002a0e:	e02e      	b.n	8002a6e <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e029      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_RCC_OscConfig+0x490>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d11c      	bne.n	8002a6a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d10d      	bne.n	8002a6a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	40023870 	.word	0x40023870
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470060 	.word	0x42470060
 8002a88:	f0bc8000 	.word	0xf0bc8000

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0d2      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b6b      	ldr	r3, [pc, #428]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b66      	ldr	r3, [pc, #408]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0be      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4950      	ldr	r1, [pc, #320]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e085      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e079      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e071      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4939      	ldr	r1, [pc, #228]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9b8 	bl	8000ee8 <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe f9b4 	bl	8000ee8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e059      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d20c      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e03c      	b.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4913      	ldr	r1, [pc, #76]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002c0a:	f000 f82b 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4601      	mov	r1, r0
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c18:	22f0      	movs	r2, #240	; 0xf0
 8002c1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	fa92 f2a2 	rbit	r2, r2
 8002c22:	60fa      	str	r2, [r7, #12]
  return result;
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	fab2 f282 	clz	r2, r2
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	40d3      	lsrs	r3, r2
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1cc>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	fa21 f303 	lsr.w	r3, r1, r3
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x1d0>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1d4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f910 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023c00 	.word	0x40023c00
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08003cc4 	.word	0x08003cc4
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c68:	b090      	sub	sp, #64	; 0x40
 8002c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c70:	2300      	movs	r3, #0
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c74:	2300      	movs	r3, #0
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d00d      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	f200 80a2 	bhi.w	8002dd2 <HAL_RCC_GetSysClockFreq+0x16e>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x34>
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c96:	e09c      	b.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c9c:	e09c      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c9e:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ca2:	e099      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d027      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cba:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_GetSysClockFreq+0x188>)
 8002cd0:	fb03 f201 	mul.w	r2, r3, r1
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a43      	ldr	r2, [pc, #268]	; (8002dec <HAL_RCC_GetSysClockFreq+0x188>)
 8002cde:	fba0 2102 	umull	r2, r1, r0, r2
 8002ce2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002ce4:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce8:	4413      	add	r3, r2
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	61fa      	str	r2, [r7, #28]
 8002cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cfc:	f7fd fb70 	bl	80003e0 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d08:	e055      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	617a      	str	r2, [r7, #20]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d1c:	f04f 0b00 	mov.w	fp, #0
 8002d20:	4652      	mov	r2, sl
 8002d22:	465b      	mov	r3, fp
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ebb2 080a 	subs.w	r8, r2, sl
 8002d3c:	eb63 090b 	sbc.w	r9, r3, fp
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d4c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d50:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d54:	ebb2 0408 	subs.w	r4, r2, r8
 8002d58:	eb63 0509 	sbc.w	r5, r3, r9
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	00eb      	lsls	r3, r5, #3
 8002d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6a:	00e2      	lsls	r2, r4, #3
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	eb14 030a 	adds.w	r3, r4, sl
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	eb45 030b 	adc.w	r3, r5, fp
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d88:	4629      	mov	r1, r5
 8002d8a:	028b      	lsls	r3, r1, #10
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4604      	mov	r4, r0
 8002d92:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d96:	4601      	mov	r1, r0
 8002d98:	028a      	lsls	r2, r1, #10
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da0:	2200      	movs	r2, #0
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	60fa      	str	r2, [r7, #12]
 8002da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002daa:	f7fd fb19 	bl	80003e0 <__aeabi_uldivmod>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4613      	mov	r3, r2
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd0:	e002      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3740      	adds	r7, #64	; 0x40
 8002dde:	46bd      	mov	sp, r7
 8002de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de4:	40023800 	.word	0x40023800
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	017d7840 	.word	0x017d7840

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e041      	b.n	8002e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd ff3e 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 fba4 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e046      	b.n	8002f36 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	; (8002f40 <HAL_TIM_Base_Start+0xb0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d01d      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_TIM_Base_Start+0xb4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_TIM_Base_Start+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_TIM_Base_Start+0xbc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_TIM_Base_Start+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_TIM_Base_Start+0xc4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_TIM_Base_Start+0x70>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <HAL_TIM_Base_Start+0xc8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d111      	bne.n	8002f24 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d010      	beq.n	8002f34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f22:	e007      	b.n	8002f34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40010400 	.word	0x40010400
 8002f54:	40014000 	.word	0x40014000
 8002f58:	40001800 	.word	0x40001800

08002f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e041      	b.n	8002ff2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f839 	bl	8002ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 faee 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0202 	mvn.w	r2, #2
 8003038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa78 	bl	8003544 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa6b 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fa7a 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0204 	mvn.w	r2, #4
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa4e 	bl	8003544 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa41 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fa50 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0208 	mvn.w	r2, #8
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2204      	movs	r2, #4
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa24 	bl	8003544 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa17 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fa26 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b10      	cmp	r3, #16
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b10      	cmp	r3, #16
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0210 	mvn.w	r2, #16
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2208      	movs	r2, #8
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f9fa 	bl	8003544 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9ed 	bl	8003532 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9fc 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0201 	mvn.w	r2, #1
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f9c8 	bl	8003520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fd43 	bl	8003c42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9c0 	bl	8003568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d10e      	bne.n	8003214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	d107      	bne.n	8003214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0220 	mvn.w	r2, #32
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd0e 	bl	8003c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003232:	2302      	movs	r3, #2
 8003234:	e0ac      	b.n	8003390 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	f200 809f 	bhi.w	8003384 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	08003281 	.word	0x08003281
 8003250:	08003385 	.word	0x08003385
 8003254:	08003385 	.word	0x08003385
 8003258:	08003385 	.word	0x08003385
 800325c:	080032c1 	.word	0x080032c1
 8003260:	08003385 	.word	0x08003385
 8003264:	08003385 	.word	0x08003385
 8003268:	08003385 	.word	0x08003385
 800326c:	08003303 	.word	0x08003303
 8003270:	08003385 	.word	0x08003385
 8003274:	08003385 	.word	0x08003385
 8003278:	08003385 	.word	0x08003385
 800327c:	08003343 	.word	0x08003343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fa16 	bl	80036b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0208 	orr.w	r2, r2, #8
 800329a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	619a      	str	r2, [r3, #24]
      break;
 80032be:	e062      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa66 	bl	8003798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6999      	ldr	r1, [r3, #24]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	021a      	lsls	r2, r3, #8
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	619a      	str	r2, [r3, #24]
      break;
 8003300:	e041      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fab9 	bl	8003880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0208 	orr.w	r2, r2, #8
 800331c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0204 	bic.w	r2, r2, #4
 800332c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69d9      	ldr	r1, [r3, #28]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	61da      	str	r2, [r3, #28]
      break;
 8003340:	e021      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fb0d 	bl	8003968 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800335c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69d9      	ldr	r1, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	021a      	lsls	r2, r3, #8
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	61da      	str	r2, [r3, #28]
      break;
 8003382:	e000      	b.n	8003386 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003384:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIM_ConfigClockSource+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0b3      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x180>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e8:	d03e      	beq.n	8003468 <HAL_TIM_ConfigClockSource+0xd0>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	f200 8087 	bhi.w	8003500 <HAL_TIM_ConfigClockSource+0x168>
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f6:	f000 8085 	beq.w	8003504 <HAL_TIM_ConfigClockSource+0x16c>
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fe:	d87f      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003400:	2b70      	cmp	r3, #112	; 0x70
 8003402:	d01a      	beq.n	800343a <HAL_TIM_ConfigClockSource+0xa2>
 8003404:	2b70      	cmp	r3, #112	; 0x70
 8003406:	d87b      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003408:	2b60      	cmp	r3, #96	; 0x60
 800340a:	d050      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x116>
 800340c:	2b60      	cmp	r3, #96	; 0x60
 800340e:	d877      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003410:	2b50      	cmp	r3, #80	; 0x50
 8003412:	d03c      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xf6>
 8003414:	2b50      	cmp	r3, #80	; 0x50
 8003416:	d873      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d058      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x136>
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d86f      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003420:	2b30      	cmp	r3, #48	; 0x30
 8003422:	d064      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x156>
 8003424:	2b30      	cmp	r3, #48	; 0x30
 8003426:	d86b      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003428:	2b20      	cmp	r3, #32
 800342a:	d060      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x156>
 800342c:	2b20      	cmp	r3, #32
 800342e:	d867      	bhi.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x156>
 8003434:	2b10      	cmp	r3, #16
 8003436:	d05a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003438:	e062      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6899      	ldr	r1, [r3, #8]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f000 fb58 	bl	8003afe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800345c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	609a      	str	r2, [r3, #8]
      break;
 8003466:	e04e      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	6899      	ldr	r1, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f000 fb41 	bl	8003afe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800348a:	609a      	str	r2, [r3, #8]
      break;
 800348c:	e03b      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f000 fab8 	bl	8003a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2150      	movs	r1, #80	; 0x50
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fb0f 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 80034ac:	e02b      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fad6 	bl	8003a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2160      	movs	r1, #96	; 0x60
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 faff 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 80034cc:	e01b      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fa98 	bl	8003a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 faef 	bl	8003aca <TIM_ITRx_SetConfig>
      break;
 80034ec:	e00b      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 fae6 	bl	8003aca <TIM_ITRx_SetConfig>
        break;
 80034fe:	e002      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003504:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
	...

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3f      	ldr	r2, [pc, #252]	; (800368c <TIM_Base_SetConfig+0x110>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d00f      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3c      	ldr	r2, [pc, #240]	; (8003690 <TIM_Base_SetConfig+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d007      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a39      	ldr	r2, [pc, #228]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2e      	ldr	r2, [pc, #184]	; (800368c <TIM_Base_SetConfig+0x110>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d027      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a2b      	ldr	r2, [pc, #172]	; (8003690 <TIM_Base_SetConfig+0x114>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d023      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <TIM_Base_SetConfig+0x118>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a29      	ldr	r2, [pc, #164]	; (8003698 <TIM_Base_SetConfig+0x11c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <TIM_Base_SetConfig+0x120>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <TIM_Base_SetConfig+0x124>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a26      	ldr	r2, [pc, #152]	; (80036a4 <TIM_Base_SetConfig+0x128>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a25      	ldr	r2, [pc, #148]	; (80036a8 <TIM_Base_SetConfig+0x12c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <TIM_Base_SetConfig+0x130>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a23      	ldr	r2, [pc, #140]	; (80036b0 <TIM_Base_SetConfig+0x134>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <TIM_Base_SetConfig+0x138>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <TIM_Base_SetConfig+0x110>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a0b      	ldr	r2, [pc, #44]	; (800369c <TIM_Base_SetConfig+0x120>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d103      	bne.n	800367c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	615a      	str	r2, [r3, #20]
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40010000 	.word	0x40010000
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40010400 	.word	0x40010400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800
 80036ac:	40001800 	.word	0x40001800
 80036b0:	40001c00 	.word	0x40001c00
 80036b4:	40002000 	.word	0x40002000

080036b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f023 0302 	bic.w	r3, r3, #2
 8003700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <TIM_OC1_SetConfig+0xd8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <TIM_OC1_SetConfig+0x64>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <TIM_OC1_SetConfig+0xdc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d10c      	bne.n	8003736 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0308 	bic.w	r3, r3, #8
 8003722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0304 	bic.w	r3, r3, #4
 8003734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TIM_OC1_SetConfig+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d003      	beq.n	8003746 <TIM_OC1_SetConfig+0x8e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <TIM_OC1_SetConfig+0xdc>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d111      	bne.n	800376a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800374c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	621a      	str	r2, [r3, #32]
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40010400 	.word	0x40010400

08003798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a21      	ldr	r2, [pc, #132]	; (8003878 <TIM_OC2_SetConfig+0xe0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_OC2_SetConfig+0x68>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a20      	ldr	r2, [pc, #128]	; (800387c <TIM_OC2_SetConfig+0xe4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10d      	bne.n	800381c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM_OC2_SetConfig+0xe0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_OC2_SetConfig+0x94>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <TIM_OC2_SetConfig+0xe4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d113      	bne.n	8003854 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800383a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	621a      	str	r2, [r3, #32]
}
 800386e:	bf00      	nop
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40010000 	.word	0x40010000
 800387c:	40010400 	.word	0x40010400

08003880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0303 	bic.w	r3, r3, #3
 80038b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a21      	ldr	r2, [pc, #132]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_OC3_SetConfig+0x66>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a20      	ldr	r2, [pc, #128]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <TIM_OC3_SetConfig+0xe0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_OC3_SetConfig+0x92>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <TIM_OC3_SetConfig+0xe4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40010400 	.word	0x40010400

08003968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	031b      	lsls	r3, r3, #12
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <TIM_OC4_SetConfig+0xa0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_OC4_SetConfig+0x68>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a10      	ldr	r2, [pc, #64]	; (8003a0c <TIM_OC4_SetConfig+0xa4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d109      	bne.n	80039e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40010400 	.word	0x40010400

08003a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f023 030a 	bic.w	r3, r3, #10
 8003a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 0210 	bic.w	r2, r3, #16
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	031b      	lsls	r3, r3, #12
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f043 0307 	orr.w	r3, r3, #7
 8003aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
}
 8003af4:	bf00      	nop
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b087      	sub	sp, #28
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
 8003b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	609a      	str	r2, [r3, #8]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e05a      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d01d      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1a      	ldr	r2, [pc, #104]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a19      	ldr	r2, [pc, #100]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40000c00 	.word	0x40000c00
 8003c24:	40010400 	.word	0x40010400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40001800 	.word	0x40001800

08003c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <__libc_init_array>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	2600      	movs	r6, #0
 8003c58:	4d0c      	ldr	r5, [pc, #48]	; (8003c8c <__libc_init_array+0x38>)
 8003c5a:	4c0d      	ldr	r4, [pc, #52]	; (8003c90 <__libc_init_array+0x3c>)
 8003c5c:	1b64      	subs	r4, r4, r5
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	42a6      	cmp	r6, r4
 8003c62:	d109      	bne.n	8003c78 <__libc_init_array+0x24>
 8003c64:	f000 f822 	bl	8003cac <_init>
 8003c68:	2600      	movs	r6, #0
 8003c6a:	4d0a      	ldr	r5, [pc, #40]	; (8003c94 <__libc_init_array+0x40>)
 8003c6c:	4c0a      	ldr	r4, [pc, #40]	; (8003c98 <__libc_init_array+0x44>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	42a6      	cmp	r6, r4
 8003c74:	d105      	bne.n	8003c82 <__libc_init_array+0x2e>
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7c:	4798      	blx	r3
 8003c7e:	3601      	adds	r6, #1
 8003c80:	e7ee      	b.n	8003c60 <__libc_init_array+0xc>
 8003c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c86:	4798      	blx	r3
 8003c88:	3601      	adds	r6, #1
 8003c8a:	e7f2      	b.n	8003c72 <__libc_init_array+0x1e>
 8003c8c:	08003ce4 	.word	0x08003ce4
 8003c90:	08003ce4 	.word	0x08003ce4
 8003c94:	08003ce4 	.word	0x08003ce4
 8003c98:	08003ce8 	.word	0x08003ce8

08003c9c <memset>:
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4402      	add	r2, r0
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <memset+0xa>
 8003ca4:	4770      	bx	lr
 8003ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8003caa:	e7f9      	b.n	8003ca0 <memset+0x4>

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
