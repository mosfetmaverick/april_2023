
pwm_DAB_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e20  08002e20  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002e20  08002e20  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e20  08002e20  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000018  08002e40  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002e40  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008344  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a0  00000000  00000000  00028385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016559  00000000  00000000  0002ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009532  00000000  00000000  00041099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e1e  00000000  00000000  0004a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce3e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  000ce43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08002de8 	.word	0x08002de8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08002de8 	.word	0x08002de8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <phaseTOcount>:
uint16_t dead_value =10;
float phase_delay =90;
uint16_t arr_val =32;

void phaseTOcount()
{
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	af00      	add	r7, sp, #0
	pulse_value= (phase_delay* 0.00277)* arr_val* 2;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <phaseTOcount+0x68>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff7f 	bl	800066c <__aeabi_f2d>
 800076e:	a314      	add	r3, pc, #80	; (adr r3, 80007c0 <phaseTOcount+0x60>)
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	f7ff fcec 	bl	8000150 <__aeabi_dmul>
 8000778:	4602      	mov	r2, r0
 800077a:	460b      	mov	r3, r1
 800077c:	4614      	mov	r4, r2
 800077e:	461d      	mov	r5, r3
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <phaseTOcount+0x6c>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff5f 	bl	8000648 <__aeabi_i2d>
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	4620      	mov	r0, r4
 8000790:	4629      	mov	r1, r5
 8000792:	f7ff fcdd 	bl	8000150 <__aeabi_dmul>
 8000796:	4602      	mov	r2, r0
 8000798:	460b      	mov	r3, r1
 800079a:	4610      	mov	r0, r2
 800079c:	4619      	mov	r1, r3
 800079e:	4602      	mov	r2, r0
 80007a0:	460b      	mov	r3, r1
 80007a2:	f7ff fe05 	bl	80003b0 <__adddf3>
 80007a6:	4602      	mov	r2, r0
 80007a8:	460b      	mov	r3, r1
 80007aa:	4610      	mov	r0, r2
 80007ac:	4619      	mov	r1, r3
 80007ae:	f7ff ffb5 	bl	800071c <__aeabi_d2uiz>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <phaseTOcount+0x70>)
 80007b8:	801a      	strh	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	bdb0      	pop	{r4, r5, r7, pc}
 80007be:	bf00      	nop
 80007c0:	6d1e108c 	.word	0x6d1e108c
 80007c4:	3f66b11c 	.word	0x3f66b11c
 80007c8:	20000004 	.word	0x20000004
 80007cc:	20000008 	.word	0x20000008
 80007d0:	2000007c 	.word	0x2000007c

080007d4 <startPWM>:

void startPWM(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

//
//	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_3);			//OC3			enable
//	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_3);	//OC3N		enable
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_1);			//OC3			enable
 80007d8:	2100      	movs	r1, #0
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <startPWM+0x28>)
 80007dc:	f001 fb04 	bl	8001de8 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_1);	//OC3N		enable
 80007e0:	2100      	movs	r1, #0
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <startPWM+0x28>)
 80007e4:	f002 f8fc 	bl	80029e0 <HAL_TIMEx_OCN_Start>
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_2);			//OC2			enable
 80007e8:	2104      	movs	r1, #4
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <startPWM+0x28>)
 80007ec:	f001 fafc 	bl	8001de8 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_2);	//OC2N		enable
 80007f0:	2104      	movs	r1, #4
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <startPWM+0x28>)
 80007f4:	f002 f8f4 	bl	80029e0 <HAL_TIMEx_OCN_Start>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000034 	.word	0x20000034

08000800 <stopPWM>:

//�?£Ö¹Êä³öPWM²š
void stopPWM(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <stopPWM+0x28>)
 8000808:	f001 fb90 	bl	8001f2c <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_1);
 800080c:	2100      	movs	r1, #0
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <stopPWM+0x28>)
 8000810:	f002 f984 	bl	8002b1c <HAL_TIMEx_OCN_Stop>
	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_2);		//stop pwm output	or user function
 8000814:	2104      	movs	r1, #4
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <stopPWM+0x28>)
 8000818:	f001 fb88 	bl	8001f2c <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_2);
 800081c:	2104      	movs	r1, #4
 800081e:	4802      	ldr	r0, [pc, #8]	; (8000828 <stopPWM+0x28>)
 8000820:	f002 f97c 	bl	8002b1c <HAL_TIMEx_OCN_Stop>

//	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_3);
//	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_3);

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000034 	.word	0x20000034

0800082c <pulsePWM>:


//ÉèÖÃ�?šµÀ3Ž¥·¢Ê±Œä£¬ŒŽÊÇ�?ÞžÄÒÆ�?à
void pulsePWM(uint16_t pulse)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	phaseTOcount();
 8000836:	f7ff ff93 	bl	8000760 <phaseTOcount>
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <pulsePWM+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	88fa      	ldrh	r2, [r7, #6]
 8000840:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000034 	.word	0x20000034

08000850 <deadTimePWM>:

//�?ÞžÄËÀÇøÊ±Œä
void deadTimePWM(uint16_t dtime)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
	/* Set TIMx_BDTR	->	DTG data	*/
	TIM1->BDTR &= 0xFF00;							//clear	DTG data
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <deadTimePWM+0x30>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <deadTimePWM+0x30>)
 8000860:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= (dtime & 0x00FF);		//set	DTG data
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <deadTimePWM+0x30>)
 8000868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4904      	ldr	r1, [pc, #16]	; (8000880 <deadTimePWM+0x30>)
 8000870:	4313      	orrs	r3, r2
 8000872:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40012c00 	.word	0x40012c00

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f000 fb12 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f83e 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 f93a 	bl	8000b08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000894:	f000 f87c 	bl	8000990 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim1);										//TIM1		enable
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <main+0x74>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <main+0x74>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]

  	startPWM();
 80008a8:	f7ff ff94 	bl	80007d4 <startPWM>

  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);	//break interrupt enable
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <main+0x74>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68da      	ldr	r2, [r3, #12]
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <main+0x74>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008ba:	60da      	str	r2, [r3, #12]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2102      	movs	r1, #2
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <main+0x78>)
 80008c2:	f000 fde9 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2104      	movs	r1, #4
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <main+0x78>)
 80008cc:	f000 fde4 	bl	8001498 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		pulsePWM(pulse_value);	//user function set
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <main+0x7c>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffa9 	bl	800082c <pulsePWM>

			deadTimePWM(dead_value);
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <main+0x80>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ffb6 	bl	8000850 <deadTimePWM>

			if(break_falg == 1)			//user function set
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <main+0x84>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d1f1      	bne.n	80008d0 <main+0x4c>
			{
				break_falg = 0;				//clear falg
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <main+0x84>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
				startPWM();
 80008f2:	f7ff ff6f 	bl	80007d4 <startPWM>
		pulsePWM(pulse_value);	//user function set
 80008f6:	e7eb      	b.n	80008d0 <main+0x4c>
 80008f8:	20000034 	.word	0x20000034
 80008fc:	40010800 	.word	0x40010800
 8000900:	2000007c 	.word	0x2000007c
 8000904:	20000000 	.word	0x20000000
 8000908:	2000007e 	.word	0x2000007e

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b090      	sub	sp, #64	; 0x40
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fa5c 	bl	8002dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000932:	2301      	movs	r3, #1
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2310      	movs	r3, #16
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800093e:	2300      	movs	r3, #0
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000942:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fdbb 	bl	80014c8 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000958:	f000 f958 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f828 	bl	80019cc <HAL_RCC_ClockConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000982:	f000 f943 	bl	8000c0c <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3740      	adds	r7, #64	; 0x40
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
 80009be:	615a      	str	r2, [r3, #20]
 80009c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2220      	movs	r2, #32
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fa05 	bl	8002dd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <MX_TIM1_Init+0x174>)
 80009d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80009d4:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009d6:	221f      	movs	r2, #31
 80009d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80009e0:	4b47      	ldr	r3, [pc, #284]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009e2:	2209      	movs	r2, #9
 80009e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ec:	4b44      	ldr	r3, [pc, #272]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f2:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f8:	4841      	ldr	r0, [pc, #260]	; (8000b00 <MX_TIM1_Init+0x170>)
 80009fa:	f001 f94d 	bl	8001c98 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a04:	f000 f902 	bl	8000c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a12:	4619      	mov	r1, r3
 8000a14:	483a      	ldr	r0, [pc, #232]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a16:	f001 fc4d 	bl	80022b4 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a20:	f000 f8f4 	bl	8000c0c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a24:	4836      	ldr	r0, [pc, #216]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a26:	f001 f986 	bl	8001d36 <HAL_TIM_OC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a30:	f000 f8ec 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a40:	4619      	mov	r1, r3
 8000a42:	482f      	ldr	r0, [pc, #188]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a44:	f002 f8c8 	bl	8002bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a4e:	f000 f8dd 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a52:	2330      	movs	r3, #48	; 0x30
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4822      	ldr	r0, [pc, #136]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a78:	f001 fbc4 	bl	8002204 <HAL_TIM_OC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a82:	f000 f8c3 	bl	8000c0c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f042 0208 	orr.w	r2, r2, #8
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4818      	ldr	r0, [pc, #96]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000aa0:	f001 fbb0 	bl	8002204 <HAL_TIM_OC_ConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000aaa:	f000 f8af 	bl	8000c0c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000abc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8000aca:	2314      	movs	r3, #20
 8000acc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ad8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000adc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000ae4:	f002 f8d6 	bl	8002c94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000aee:	f000 f88d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM1_Init+0x170>)
 8000af4:	f000 f91c 	bl	8000d30 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3758      	adds	r7, #88	; 0x58
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000034 	.word	0x20000034
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2c      	ldr	r2, [pc, #176]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a20      	ldr	r2, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_GPIO_Init+0xcc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000b84:	f000 fc88 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000b8e:	f000 fc83 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <MX_GPIO_Init+0xd0>)
 8000bac:	f000 faf0 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_GPIO_Init+0xd4>)
 8000bc8:	f000 fae2 	bl	8001190 <HAL_GPIO_Init>

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <HAL_TIMEx_BreakCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)		//need modify
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <HAL_TIMEx_BreakCallback+0x24>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d104      	bne.n	8000bfc <HAL_TIMEx_BreakCallback+0x1c>
	{
		stopPWM();									//stop pwm output	or user function
 8000bf2:	f7ff fe05 	bl	8000800 <stopPWM>
		break_falg = 1;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_TIMEx_BreakCallback+0x28>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40012c00 	.word	0x40012c00
 8000c08:	2000007e 	.word	0x2000007e

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6193      	str	r3, [r2, #24]
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x5c>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x60>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_MspInit+0x60>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_TIM_Base_MspInit+0xa4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13d      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_TIM_Base_MspInit+0xa8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4812      	ldr	r0, [pc, #72]	; (8000d28 <HAL_TIM_Base_MspInit+0xac>)
 8000ce0:	f000 fa56 	bl	8001190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_TIM_Base_MspInit+0xb0>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0xb0>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	6053      	str	r3, [r2, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2018      	movs	r0, #24
 8000d0e:	f000 fa08 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000d12:	2018      	movs	r0, #24
 8000d14:	f000 fa21 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40012c00 	.word	0x40012c00
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	40010000 	.word	0x40010000

08000d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <HAL_TIM_MspPostInit+0xb0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d142      	bne.n	8000dd6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d80:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <HAL_TIM_MspPostInit+0xb8>)
 8000d96:	f000 f9fb 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <HAL_TIM_MspPostInit+0xbc>)
 8000dae:	f000 f9ef 	bl	8001190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_TIM_MspPostInit+0xc0>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_TIM_MspPostInit+0xc0>)
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40012c00 	.word	0x40012c00
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	40010000 	.word	0x40010000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <NMI_Handler+0x4>

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler+0x4>

08000e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler+0x4>

08000e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <UsageFault_Handler+0x4>

08000e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f87f 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM1_BRK_IRQHandler+0x10>)
 8000e4a:	f001 f8d3 	bl	8001ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000034 	.word	0x20000034

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8a:	f7ff ffe5 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f001 ff7f 	bl	8002d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff fcf7 	bl	8000884 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ea0:	08002e28 	.word	0x08002e28
  ldr r2, =_sbss
 8000ea4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ea8:	20000084 	.word	0x20000084

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f923 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fea4 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f93b 	bl	8001176 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f903 	bl	8001122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000000c 	.word	0x2000000c
 8000f34:	20000014 	.word	0x20000014
 8000f38:	20000010 	.word	0x20000010

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000014 	.word	0x20000014
 8000f5c:	20000080 	.word	0x20000080

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000080 	.word	0x20000080

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4906      	ldr	r1, [pc, #24]	; (800100c <__NVIC_EnableIRQ+0x34>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d8:	d301      	bcc.n	80010de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010da:	2301      	movs	r3, #1
 80010dc:	e00f      	b.n	80010fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <SysTick_Config+0x40>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e6:	210f      	movs	r1, #15
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f7ff ff90 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x40>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x40>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff2d 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff42 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff90 	bl	8001064 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff5f 	bl	8001010 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff35 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffa2 	bl	80010c8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a2:	e169      	b.n	8001478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a4:	2201      	movs	r2, #1
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f040 8158 	bne.w	8001472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a9a      	ldr	r2, [pc, #616]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d05e      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011cc:	4a98      	ldr	r2, [pc, #608]	; (8001430 <HAL_GPIO_Init+0x2a0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d875      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011d2:	4a98      	ldr	r2, [pc, #608]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d058      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011d8:	4a96      	ldr	r2, [pc, #600]	; (8001434 <HAL_GPIO_Init+0x2a4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d86f      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011de:	4a96      	ldr	r2, [pc, #600]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d052      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011e4:	4a94      	ldr	r2, [pc, #592]	; (8001438 <HAL_GPIO_Init+0x2a8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d869      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011ea:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_GPIO_Init+0x2ac>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d04c      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011f0:	4a92      	ldr	r2, [pc, #584]	; (800143c <HAL_GPIO_Init+0x2ac>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d863      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 80011f6:	4a92      	ldr	r2, [pc, #584]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d046      	beq.n	800128a <HAL_GPIO_Init+0xfa>
 80011fc:	4a90      	ldr	r2, [pc, #576]	; (8001440 <HAL_GPIO_Init+0x2b0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d85d      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 8001202:	2b12      	cmp	r3, #18
 8001204:	d82a      	bhi.n	800125c <HAL_GPIO_Init+0xcc>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d859      	bhi.n	80012be <HAL_GPIO_Init+0x12e>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <HAL_GPIO_Init+0x80>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	0800128b 	.word	0x0800128b
 8001214:	08001265 	.word	0x08001265
 8001218:	08001277 	.word	0x08001277
 800121c:	080012b9 	.word	0x080012b9
 8001220:	080012bf 	.word	0x080012bf
 8001224:	080012bf 	.word	0x080012bf
 8001228:	080012bf 	.word	0x080012bf
 800122c:	080012bf 	.word	0x080012bf
 8001230:	080012bf 	.word	0x080012bf
 8001234:	080012bf 	.word	0x080012bf
 8001238:	080012bf 	.word	0x080012bf
 800123c:	080012bf 	.word	0x080012bf
 8001240:	080012bf 	.word	0x080012bf
 8001244:	080012bf 	.word	0x080012bf
 8001248:	080012bf 	.word	0x080012bf
 800124c:	080012bf 	.word	0x080012bf
 8001250:	080012bf 	.word	0x080012bf
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001281 	.word	0x08001281
 800125c:	4a79      	ldr	r2, [pc, #484]	; (8001444 <HAL_GPIO_Init+0x2b4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d013      	beq.n	800128a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001262:	e02c      	b.n	80012be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	623b      	str	r3, [r7, #32]
          break;
 800126a:	e029      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	3304      	adds	r3, #4
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e024      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	3308      	adds	r3, #8
 800127c:	623b      	str	r3, [r7, #32]
          break;
 800127e:	e01f      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	330c      	adds	r3, #12
 8001286:	623b      	str	r3, [r7, #32]
          break;
 8001288:	e01a      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d102      	bne.n	8001298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001292:	2304      	movs	r3, #4
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e013      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	611a      	str	r2, [r3, #16]
          break;
 80012aa:	e009      	b.n	80012c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	615a      	str	r2, [r3, #20]
          break;
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x130>
          break;
 80012be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d801      	bhi.n	80012ca <HAL_GPIO_Init+0x13a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e001      	b.n	80012ce <HAL_GPIO_Init+0x13e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3304      	adds	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	d802      	bhi.n	80012dc <HAL_GPIO_Init+0x14c>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	e002      	b.n	80012e2 <HAL_GPIO_Init+0x152>
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	3b08      	subs	r3, #8
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	210f      	movs	r1, #15
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	6a39      	ldr	r1, [r7, #32]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80b1 	beq.w	8001472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <HAL_GPIO_Init+0x2b8>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_GPIO_Init+0x2bc>)
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <HAL_GPIO_Init+0x2c0>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d013      	beq.n	800137c <HAL_GPIO_Init+0x1ec>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <HAL_GPIO_Init+0x2c4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1e8>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3e      	ldr	r2, [pc, #248]	; (8001458 <HAL_GPIO_Init+0x2c8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1e4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3d      	ldr	r2, [pc, #244]	; (800145c <HAL_GPIO_Init+0x2cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1e0>
 800136c:	2303      	movs	r3, #3
 800136e:	e006      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001370:	2304      	movs	r3, #4
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001374:	2302      	movs	r3, #2
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1ee>
 800137c:	2300      	movs	r3, #0
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138e:	492f      	ldr	r1, [pc, #188]	; (800144c <HAL_GPIO_Init+0x2bc>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	492c      	ldr	r1, [pc, #176]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4928      	ldr	r1, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4922      	ldr	r1, [pc, #136]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	491e      	ldr	r1, [pc, #120]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	4918      	ldr	r1, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	4914      	ldr	r1, [pc, #80]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001410:	4013      	ands	r3, r2
 8001412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d021      	beq.n	8001464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	490e      	ldr	r1, [pc, #56]	; (8001460 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
 800142c:	e021      	b.n	8001472 <HAL_GPIO_Init+0x2e2>
 800142e:	bf00      	nop
 8001430:	10320000 	.word	0x10320000
 8001434:	10310000 	.word	0x10310000
 8001438:	10220000 	.word	0x10220000
 800143c:	10210000 	.word	0x10210000
 8001440:	10120000 	.word	0x10120000
 8001444:	10110000 	.word	0x10110000
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40011000 	.word	0x40011000
 800145c:	40011400 	.word	0x40011400
 8001460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_GPIO_Init+0x304>)
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	43db      	mvns	r3, r3
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_GPIO_Init+0x304>)
 800146e:	4013      	ands	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	3301      	adds	r3, #1
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	f47f ae8e 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	372c      	adds	r7, #44	; 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e272      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e8:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00c      	beq.n	800150e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d112      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
 8001500:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d10b      	bne.n	8001526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d06c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x12c>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d168      	bne.n	80015f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e24c      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x76>
 8001530:	4b80      	ldr	r3, [pc, #512]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7f      	ldr	r2, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e02e      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a7a      	ldr	r2, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b78      	ldr	r3, [pc, #480]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0xbc>
 800156a:	4b72      	ldr	r3, [pc, #456]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a71      	ldr	r2, [pc, #452]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xd4>
 8001584:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a67      	ldr	r2, [pc, #412]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcdc 	bl	8000f60 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcd8 	bl	8000f60 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e200      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xe4>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fcc8 	bl	8000f60 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fcc4 	bl	8000f60 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1ec      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x10c>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1c0      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4939      	ldr	r1, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fc7d 	bl	8000f60 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fc79 	bl	8000f60 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1a1      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4927      	ldr	r1, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x270>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc5c 	bl	8000f60 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc58 	bl	8000f60 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e180      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d03a      	beq.n	800174c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d019      	beq.n	8001712 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x274>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fc3c 	bl	8000f60 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc38 	bl	8000f60 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e160      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_RCC_OscConfig+0x26c>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f000 faa6 	bl	8001c5c <RCC_Delay>
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_RCC_OscConfig+0x274>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fc22 	bl	8000f60 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171e:	e00f      	b.n	8001740 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff fc1e 	bl	8000f60 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d908      	bls.n	8001740 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e146      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	42420000 	.word	0x42420000
 800173c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e9      	bne.n	8001720 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a6 	beq.w	80018a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10d      	bne.n	8001786 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a87      	ldr	r2, [pc, #540]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b85      	ldr	r3, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001782:	2301      	movs	r3, #1
 8001784:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b82      	ldr	r3, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x4c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x4c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7e      	ldr	r2, [pc, #504]	; (8001990 <HAL_RCC_OscConfig+0x4c8>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179e:	f7ff fbdf 	bl	8000f60 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a6:	f7ff fbdb 	bl	8000f60 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b64      	cmp	r3, #100	; 0x64
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e103      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x4c8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x312>
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	e02d      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x334>
 80017e2:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	4a69      	ldr	r2, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6213      	str	r3, [r2, #32]
 80017ee:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a66      	ldr	r2, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 0304 	bic.w	r3, r3, #4
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e01c      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d10c      	bne.n	800181e <HAL_RCC_OscConfig+0x356>
 8001804:	4b61      	ldr	r3, [pc, #388]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a60      	ldr	r2, [pc, #384]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	4b5e      	ldr	r3, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a5d      	ldr	r2, [pc, #372]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	e00b      	b.n	8001836 <HAL_RCC_OscConfig+0x36e>
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a5a      	ldr	r2, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb8f 	bl	8000f60 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fb8b 	bl	8000f60 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e0b1      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0ee      	beq.n	8001846 <HAL_RCC_OscConfig+0x37e>
 8001868:	e014      	b.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800186a:	f7ff fb79 	bl	8000f60 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff fb75 	bl	8000f60 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e09b      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ee      	bne.n	8001872 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d105      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8087 	beq.w	80019be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d061      	beq.n	8001980 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d146      	bne.n	8001952 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb49 	bl	8000f60 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb45 	bl	8000f60 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e06d      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f0      	bne.n	80018d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4921      	ldr	r1, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a19      	ldr	r1, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	430b      	orrs	r3, r1
 800191e:	491b      	ldr	r1, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fb19 	bl	8000f60 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fb15 	bl	8000f60 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e03d      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x46a>
 8001950:	e035      	b.n	80019be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x4cc>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fb02 	bl	8000f60 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fafe 	bl	8000f60 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e026      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x4c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x498>
 800197e:	e01e      	b.n	80019be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e019      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
 800198c:	40021000 	.word	0x40021000
 8001990:	40007000 	.word	0x40007000
 8001994:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x500>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0d0      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d910      	bls.n	8001a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 0207 	bic.w	r2, r3, #7
 80019f6:	4965      	ldr	r1, [pc, #404]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0b8      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d020      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	4a58      	ldr	r2, [pc, #352]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a52      	ldr	r2, [pc, #328]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	494d      	ldr	r1, [pc, #308]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d040      	beq.n	8001aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b47      	ldr	r3, [pc, #284]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e07f      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e073      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e06b      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4936      	ldr	r1, [pc, #216]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abc:	f7ff fa50 	bl	8000f60 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff fa4c 	bl	8000f60 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e053      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d210      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 0207 	bic.w	r2, r3, #7
 8001b02:	4922      	ldr	r1, [pc, #136]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e032      	b.n	8001b82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4916      	ldr	r1, [pc, #88]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490e      	ldr	r1, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b5a:	f000 f821 	bl	8001ba0 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490a      	ldr	r1, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1cc>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_ClockConfig+0x1d0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f9ae 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08002e10 	.word	0x08002e10
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000010 	.word	0x20000010

08001ba0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba0:	b490      	push	{r4, r7}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xac>)
 8001ba8:	1d3c      	adds	r4, r7, #4
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bb0:	f240 2301 	movw	r3, #513	; 0x201
 8001bb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bde:	e02b      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001be2:	623b      	str	r3, [r7, #32]
      break;
 8001be4:	e02b      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3328      	adds	r3, #40	; 0x28
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bf6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0c5b      	lsrs	r3, r3, #17
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	3328      	adds	r3, #40	; 0x28
 8001c0e:	443b      	add	r3, r7
 8001c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c1a:	fb03 f202 	mul.w	r2, r3, r2
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	623b      	str	r3, [r7, #32]
      break;
 8001c36:	e002      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c3a:	623b      	str	r3, [r7, #32]
      break;
 8001c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc90      	pop	{r4, r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	08002e00 	.word	0x08002e00
 8001c50:	40021000 	.word	0x40021000
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	003d0900 	.word	0x003d0900

08001c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <RCC_Delay+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <RCC_Delay+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c78:	bf00      	nop
  }
  while (Delay --);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <RCC_Delay+0x1c>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	10624dd3 	.word	0x10624dd3

08001c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e041      	b.n	8001d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ffdc 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f000 fbde 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e041      	b.n	8001dcc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f839 	bl	8001dd4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	4619      	mov	r1, r3
 8001d74:	4610      	mov	r0, r2
 8001d76:	f000 fb8f 	bl	8002498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_TIM_OC_Start+0x24>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e022      	b.n	8001e52 <HAL_TIM_OC_Start+0x6a>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d109      	bne.n	8001e26 <HAL_TIM_OC_Start+0x3e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e015      	b.n	8001e52 <HAL_TIM_OC_Start+0x6a>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d109      	bne.n	8001e40 <HAL_TIM_OC_Start+0x58>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e008      	b.n	8001e52 <HAL_TIM_OC_Start+0x6a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e05e      	b.n	8001f18 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_OC_Start+0x82>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e68:	e013      	b.n	8001e92 <HAL_TIM_OC_Start+0xaa>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d104      	bne.n	8001e7a <HAL_TIM_OC_Start+0x92>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	e00b      	b.n	8001e92 <HAL_TIM_OC_Start+0xaa>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIM_OC_Start+0xa2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e88:	e003      	b.n	8001e92 <HAL_TIM_OC_Start+0xaa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fd7c 	bl	8002998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <HAL_TIM_OC_Start+0x138>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d107      	bne.n	8001eba <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_TIM_OC_Start+0x138>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_TIM_OC_Start+0xfa>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d009      	beq.n	8001ee2 <HAL_TIM_OC_Start+0xfa>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_TIM_OC_Start+0x13c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_TIM_OC_Start+0xfa>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_TIM_OC_Start+0x140>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d111      	bne.n	8001f06 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2b06      	cmp	r3, #6
 8001ef2:	d010      	beq.n	8001f16 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	e007      	b.n	8001f16 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800

08001f2c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd2a 	bl	8002998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_TIM_OC_Stop+0xc4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d117      	bne.n	8001f7e <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_TIM_OC_Stop+0x52>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	f240 4344 	movw	r3, #1092	; 0x444
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <HAL_TIM_OC_Stop+0x52>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_TIM_OC_Stop+0x82>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	f240 4344 	movw	r3, #1092	; 0x444
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_OC_Stop+0x82>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_OC_Stop+0x92>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fbc:	e013      	b.n	8001fe6 <HAL_TIM_OC_Stop+0xba>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d104      	bne.n	8001fce <HAL_TIM_OC_Stop+0xa2>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	e00b      	b.n	8001fe6 <HAL_TIM_OC_Stop+0xba>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d104      	bne.n	8001fde <HAL_TIM_OC_Stop+0xb2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fdc:	e003      	b.n	8001fe6 <HAL_TIM_OC_Stop+0xba>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40012c00 	.word	0x40012c00

08001ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0202 	mvn.w	r2, #2
 8002020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa12 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fa05 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa14 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b04      	cmp	r3, #4
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b04      	cmp	r3, #4
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0204 	mvn.w	r2, #4
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9e8 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9db 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9ea 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0208 	mvn.w	r2, #8
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2204      	movs	r2, #4
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9be 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f9b1 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f9c0 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b10      	cmp	r3, #16
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b10      	cmp	r3, #16
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0210 	mvn.w	r2, #16
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2208      	movs	r2, #8
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f994 	bl	8002460 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f987 	bl	800244e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f996 	bl	8002472 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0201 	mvn.w	r2, #1
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f962 	bl	800243c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b80      	cmp	r3, #128	; 0x80
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fd1e 	bl	8000be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f95a 	bl	8002484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0220 	mvn.w	r2, #32
 80021f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fd9d 	bl	8002d36 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_TIM_OC_ConfigChannel+0x1a>
 800221a:	2302      	movs	r3, #2
 800221c:	e046      	b.n	80022ac <HAL_TIM_OC_ConfigChannel+0xa8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d839      	bhi.n	80022a0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <HAL_TIM_OC_ConfigChannel+0x30>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002269 	.word	0x08002269
 8002238:	080022a1 	.word	0x080022a1
 800223c:	080022a1 	.word	0x080022a1
 8002240:	080022a1 	.word	0x080022a1
 8002244:	08002277 	.word	0x08002277
 8002248:	080022a1 	.word	0x080022a1
 800224c:	080022a1 	.word	0x080022a1
 8002250:	080022a1 	.word	0x080022a1
 8002254:	08002285 	.word	0x08002285
 8002258:	080022a1 	.word	0x080022a1
 800225c:	080022a1 	.word	0x080022a1
 8002260:	080022a1 	.word	0x080022a1
 8002264:	08002293 	.word	0x08002293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f974 	bl	800255c <TIM_OC1_SetConfig>
      break;
 8002274:	e015      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f9d3 	bl	8002628 <TIM_OC2_SetConfig>
      break;
 8002282:	e00e      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fa36 	bl	80026fc <TIM_OC3_SetConfig>
      break;
 8002290:	e007      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fa99 	bl	80027d0 <TIM_OC4_SetConfig>
      break;
 800229e:	e000      	b.n	80022a2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80022a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_TIM_ConfigClockSource+0x18>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e0b3      	b.n	8002434 <HAL_TIM_ConfigClockSource+0x180>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	d03e      	beq.n	8002384 <HAL_TIM_ConfigClockSource+0xd0>
 8002306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800230a:	f200 8087 	bhi.w	800241c <HAL_TIM_ConfigClockSource+0x168>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	f000 8085 	beq.w	8002420 <HAL_TIM_ConfigClockSource+0x16c>
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d87f      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800231c:	2b70      	cmp	r3, #112	; 0x70
 800231e:	d01a      	beq.n	8002356 <HAL_TIM_ConfigClockSource+0xa2>
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d87b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002324:	2b60      	cmp	r3, #96	; 0x60
 8002326:	d050      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x116>
 8002328:	2b60      	cmp	r3, #96	; 0x60
 800232a:	d877      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b50      	cmp	r3, #80	; 0x50
 800232e:	d03c      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0xf6>
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	d873      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d058      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x136>
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d86f      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b30      	cmp	r3, #48	; 0x30
 800233e:	d064      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002340:	2b30      	cmp	r3, #48	; 0x30
 8002342:	d86b      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b20      	cmp	r3, #32
 8002346:	d060      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002348:	2b20      	cmp	r3, #32
 800234a:	d867      	bhi.n	800241c <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05c      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d05a      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002354:	e062      	b.n	800241c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f000 faf8 	bl	800295a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	609a      	str	r2, [r3, #8]
      break;
 8002382:	e04e      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f000 fae1 	bl	800295a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023a6:	609a      	str	r2, [r3, #8]
      break;
 80023a8:	e03b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 fa58 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2150      	movs	r1, #80	; 0x50
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 faaf 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 80023c8:	e02b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 fa76 	bl	80028c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2160      	movs	r1, #96	; 0x60
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa9f 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 80023e8:	e01b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f000 fa38 	bl	800286c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fa8f 	bl	8002926 <TIM_ITRx_SetConfig>
      break;
 8002408:	e00b      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f000 fa86 	bl	8002926 <TIM_ITRx_SetConfig>
        break;
 800241a:	e002      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800241c:	bf00      	nop
 800241e:	e000      	b.n	8002422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
	...

08002498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00b      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b6:	d007      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <TIM_Base_SetConfig+0xbc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d003      	beq.n	80024c8 <TIM_Base_SetConfig+0x30>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a25      	ldr	r2, [pc, #148]	; (8002558 <TIM_Base_SetConfig+0xc0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00b      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e8:	d007      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a19      	ldr	r2, [pc, #100]	; (8002554 <TIM_Base_SetConfig+0xbc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <TIM_Base_SetConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a18      	ldr	r2, [pc, #96]	; (8002558 <TIM_Base_SetConfig+0xc0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d108      	bne.n	800250c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a07      	ldr	r2, [pc, #28]	; (8002550 <TIM_Base_SetConfig+0xb8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800

0800255c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	f023 0201 	bic.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10c      	bne.n	80025d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0308 	bic.w	r3, r3, #8
 80025be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00

08002628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	f023 0210 	bic.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10d      	bne.n	80026a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d113      	bne.n	80026d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00

080026fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10d      	bne.n	8002776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d113      	bne.n	80027a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00

080027d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <TIM_OC4_SetConfig+0x98>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d109      	bne.n	8002844 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40012c00 	.word	0x40012c00

0800286c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f023 0210 	bic.w	r2, r3, #16
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	031b      	lsls	r3, r3, #12
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002904:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	621a      	str	r2, [r3, #32]
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800293c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	f043 0307 	orr.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	609a      	str	r2, [r3, #8]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800295a:	b480      	push	{r7}
 800295c:	b087      	sub	sp, #28
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	431a      	orrs	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	2201      	movs	r2, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	401a      	ands	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_TIMEx_OCN_Start+0x24>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e022      	b.n	8002a4a <HAL_TIMEx_OCN_Start+0x6a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d109      	bne.n	8002a1e <HAL_TIMEx_OCN_Start+0x3e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e015      	b.n	8002a4a <HAL_TIMEx_OCN_Start+0x6a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d109      	bne.n	8002a38 <HAL_TIMEx_OCN_Start+0x58>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e008      	b.n	8002a4a <HAL_TIMEx_OCN_Start+0x6a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e059      	b.n	8002b06 <HAL_TIMEx_OCN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_TIMEx_OCN_Start+0x82>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a60:	e013      	b.n	8002a8a <HAL_TIMEx_OCN_Start+0xaa>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d104      	bne.n	8002a72 <HAL_TIMEx_OCN_Start+0x92>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a70:	e00b      	b.n	8002a8a <HAL_TIMEx_OCN_Start+0xaa>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_TIMEx_OCN_Start+0xa2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a80:	e003      	b.n	8002a8a <HAL_TIMEx_OCN_Start+0xaa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f958 	bl	8002d48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_TIMEx_OCN_Start+0x130>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_TIMEx_OCN_Start+0xf0>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d009      	beq.n	8002ad0 <HAL_TIMEx_OCN_Start+0xf0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_TIMEx_OCN_Start+0x134>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIMEx_OCN_Start+0xf0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_TIMEx_OCN_Start+0x138>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d111      	bne.n	8002af4 <HAL_TIMEx_OCN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d010      	beq.n	8002b04 <HAL_TIMEx_OCN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	e007      	b.n	8002b04 <HAL_TIMEx_OCN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400
 8002b18:	40000800 	.word	0x40000800

08002b1c <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f90a 	bl	8002d48 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10f      	bne.n	8002b64 <HAL_TIMEx_OCN_Stop+0x48>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_TIMEx_OCN_Stop+0x48>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a1a      	ldr	r2, [r3, #32]
 8002b6a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10f      	bne.n	8002b94 <HAL_TIMEx_OCN_Stop+0x78>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	f240 4344 	movw	r3, #1092	; 0x444
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_TIMEx_OCN_Stop+0x78>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0201 	bic.w	r2, r2, #1
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <HAL_TIMEx_OCN_Stop+0x88>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba2:	e013      	b.n	8002bcc <HAL_TIMEx_OCN_Stop+0xb0>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d104      	bne.n	8002bb4 <HAL_TIMEx_OCN_Stop+0x98>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb2:	e00b      	b.n	8002bcc <HAL_TIMEx_OCN_Stop+0xb0>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d104      	bne.n	8002bc4 <HAL_TIMEx_OCN_Stop+0xa8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc2:	e003      	b.n	8002bcc <HAL_TIMEx_OCN_Stop+0xb0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e046      	b.n	8002c7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d009      	beq.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10c      	bne.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800

08002c94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e03d      	b.n	8002d2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <__libc_init_array>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	2600      	movs	r6, #0
 8002d94:	4d0c      	ldr	r5, [pc, #48]	; (8002dc8 <__libc_init_array+0x38>)
 8002d96:	4c0d      	ldr	r4, [pc, #52]	; (8002dcc <__libc_init_array+0x3c>)
 8002d98:	1b64      	subs	r4, r4, r5
 8002d9a:	10a4      	asrs	r4, r4, #2
 8002d9c:	42a6      	cmp	r6, r4
 8002d9e:	d109      	bne.n	8002db4 <__libc_init_array+0x24>
 8002da0:	f000 f822 	bl	8002de8 <_init>
 8002da4:	2600      	movs	r6, #0
 8002da6:	4d0a      	ldr	r5, [pc, #40]	; (8002dd0 <__libc_init_array+0x40>)
 8002da8:	4c0a      	ldr	r4, [pc, #40]	; (8002dd4 <__libc_init_array+0x44>)
 8002daa:	1b64      	subs	r4, r4, r5
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	42a6      	cmp	r6, r4
 8002db0:	d105      	bne.n	8002dbe <__libc_init_array+0x2e>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db8:	4798      	blx	r3
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7ee      	b.n	8002d9c <__libc_init_array+0xc>
 8002dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc2:	4798      	blx	r3
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	e7f2      	b.n	8002dae <__libc_init_array+0x1e>
 8002dc8:	08002e20 	.word	0x08002e20
 8002dcc:	08002e20 	.word	0x08002e20
 8002dd0:	08002e20 	.word	0x08002e20
 8002dd4:	08002e24 	.word	0x08002e24

08002dd8 <memset>:
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4402      	add	r2, r0
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d100      	bne.n	8002de2 <memset+0xa>
 8002de0:	4770      	bx	lr
 8002de2:	f803 1b01 	strb.w	r1, [r3], #1
 8002de6:	e7f9      	b.n	8002ddc <memset+0x4>

08002de8 <_init>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr

08002df4 <_fini>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr
