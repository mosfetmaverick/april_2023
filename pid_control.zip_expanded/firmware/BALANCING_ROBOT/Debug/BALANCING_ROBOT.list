
BALANCING_ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068d0  080068d0  000168d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d8  080068d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080068e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000031c  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f667  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002187  00000000  00000000  0002f707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00031890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc8  00000000  00000000  00032640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022123  00000000  00000000  00033308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd44  00000000  00000000  0005542b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccecc  00000000  00000000  0006516f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013203b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040d0  00000000  00000000  0013208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067d8 	.word	0x080067d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080067d8 	.word	0x080067d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <HAL_GPIO_EXTI_Callback>:
#define MOTOR_VEL_REFERENCE 60
int16_t motor1_vel, motor2_vel;
int32_t encoder_position;
uint16_t timer_counter;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
	static uint8_t flag_button = 0;
	if(flag_button == 0)
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <HAL_GPIO_EXTI_Callback+0x58>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10f      	bne.n	80005f6 <HAL_GPIO_EXTI_Callback+0x32>
	{
		flag_button = 1;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_GPIO_EXTI_Callback+0x58>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
		pid_instance_mot1.p_gain = 230;
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <HAL_GPIO_EXTI_Callback+0x60>)
 80005e0:	601a      	str	r2, [r3, #0]
		pid_instance_mot1.i_gain = 100;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_GPIO_EXTI_Callback+0x64>)
 80005e6:	605a      	str	r2, [r3, #4]
		pid_instance_mot1.d_gain = 20;
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005ea:	4a10      	ldr	r2, [pc, #64]	; (800062c <HAL_GPIO_EXTI_Callback+0x68>)
 80005ec:	609a      	str	r2, [r3, #8]
		printf("gains are set \n");
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <HAL_GPIO_EXTI_Callback+0x6c>)
 80005f0:	f005 f974 	bl	80058dc <puts>
		pid_instance_mot1.p_gain = 0;
		pid_instance_mot1.i_gain = 0;
		pid_instance_mot1.d_gain = 0;
		flag_button = 0;
	}
}
 80005f4:	e00e      	b.n	8000614 <HAL_GPIO_EXTI_Callback+0x50>
		pid_instance_mot1.p_gain = 0;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
		pid_instance_mot1.i_gain = 0;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000600:	f04f 0200 	mov.w	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
		pid_instance_mot1.d_gain = 0;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000608:	f04f 0200 	mov.w	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
		flag_button = 0;
 800060e:	4b03      	ldr	r3, [pc, #12]	; (800061c <HAL_GPIO_EXTI_Callback+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000372 	.word	0x20000372
 8000620:	20000268 	.word	0x20000268
 8000624:	43660000 	.word	0x43660000
 8000628:	42c80000 	.word	0x42c80000
 800062c:	41a00000 	.word	0x41a00000
 8000630:	080067f0 	.word	0x080067f0

08000634 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	 timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 800063c:	4b30      	ldr	r3, [pc, #192]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000646:	801a      	strh	r2, [r3, #0]
	 // measure velocity
	 update_encoder(&enc_instance_mot1, &htim3);
 8000648:	492d      	ldr	r1, [pc, #180]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800064a:	482f      	ldr	r0, [pc, #188]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800064c:	f000 fdc2 	bl	80011d4 <update_encoder>

	 // applying filter
	 apply_average_filter(&filter_instance1, enc_instance_mot1.velocity, &motor1_vel);
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000658:	4619      	mov	r1, r3
 800065a:	482d      	ldr	r0, [pc, #180]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800065c:	f000 fe3e 	bl	80012dc <apply_average_filter>

	 if(pid_instance_mot1.d_gain != 0 || pid_instance_mot1.p_gain != 0
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000662:	edd3 7a02 	vldr	s15, [r3, #8]
 8000666:	eef5 7a40 	vcmp.f32	s15, #0.0
 800066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066e:	d10f      	bne.n	8000690 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	eef5 7a40 	vcmp.f32	s15, #0.0
 800067a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800067e:	d107      	bne.n	8000690 <HAL_TIM_PeriodElapsedCallback+0x5c>
			 || pid_instance_mot1.i_gain != 0)
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000682:	edd3 7a01 	vldr	s15, [r3, #4]
 8000686:	eef5 7a40 	vcmp.f32	s15, #0.0
 800068a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068e:	d02d      	beq.n	80006ec <HAL_TIM_PeriodElapsedCallback+0xb8>
	 {
		 // PID apply
		 apply_pid(&pid_instance_mot1, MOTOR_VEL_REFERENCE - motor1_vel, UPDATE_RATE);
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800069c:	b29b      	uxth	r3, r3
 800069e:	b21b      	sxth	r3, r3
 80006a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a4:	4619      	mov	r1, r3
 80006a6:	481b      	ldr	r0, [pc, #108]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006a8:	f000 fd16 	bl	80010d8 <apply_pid>

		 // PWM
		 if(pid_instance_mot1.output > 0)
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006ae:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	dd0c      	ble.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x9c>
		 {
			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pid_instance_mot1.output);
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006b8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
			 HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80006ca:	f002 f827 	bl	800271c <HAL_GPIO_WritePin>
		 if(pid_instance_mot1.output > 0)
 80006ce:	e013      	b.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0xc4>
		 }
		 else
		 {
			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -pid_instance_mot1.output);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80006d6:	425a      	negs	r2, r3
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
			 HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80006e6:	f002 f819 	bl	800271c <HAL_GPIO_WritePin>
		 if(pid_instance_mot1.output > 0)
 80006ea:	e005      	b.n	80006f8 <HAL_TIM_PeriodElapsedCallback+0xc4>
		 }
	 }
	 else
	 {
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 2000);
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
	 }

}
 80006f6:	bf00      	nop
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000011c 	.word	0x2000011c
 8000704:	20000370 	.word	0x20000370
 8000708:	20000250 	.word	0x20000250
 800070c:	2000036e 	.word	0x2000036e
 8000710:	20000280 	.word	0x20000280
 8000714:	20000268 	.word	0x20000268
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	807b      	strh	r3, [r7, #2]
	// format p_gain i_gain d_gain
	int8_t counter = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	73fb      	strb	r3, [r7, #15]
	// until encountering empty space, extract the digits of p gain
	pid_instance_mot1.p_gain = 0;
 8000730:	4b5a      	ldr	r3, [pc, #360]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000732:	f04f 0200 	mov.w	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
	while(*(uart_buffer + counter) != 32 && counter < Size - 1)
 8000738:	e01b      	b.n	8000772 <HAL_UARTEx_RxEventCallback+0x52>
	{
		pid_instance_mot1.p_gain = *(uart_buffer + counter) - 48 + pid_instance_mot1.p_gain * 10;
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4a58      	ldr	r2, [pc, #352]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	3b30      	subs	r3, #48	; 0x30
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074e:	4b53      	ldr	r3, [pc, #332]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000750:	edd3 7a00 	vldr	s15, [r3]
 8000754:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000758:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800075c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000760:	4b4e      	ldr	r3, [pc, #312]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000762:	edc3 7a00 	vstr	s15, [r3]
		counter++;
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3301      	adds	r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	73fb      	strb	r3, [r7, #15]
	while(*(uart_buffer + counter) != 32 && counter < Size - 1)
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4a4a      	ldr	r2, [pc, #296]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b20      	cmp	r3, #32
 800077e:	d005      	beq.n	800078c <HAL_UARTEx_RxEventCallback+0x6c>
 8000780:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	3b01      	subs	r3, #1
 8000788:	429a      	cmp	r2, r3
 800078a:	dbd6      	blt.n	800073a <HAL_UARTEx_RxEventCallback+0x1a>
	}
	counter++;
 800078c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	3301      	adds	r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	73fb      	strb	r3, [r7, #15]
	printf("P %d, ", (int)pid_instance_mot1.p_gain);
 8000798:	4b40      	ldr	r3, [pc, #256]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 800079a:	edd3 7a00 	vldr	s15, [r3]
 800079e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a2:	ee17 1a90 	vmov	r1, s15
 80007a6:	483f      	ldr	r0, [pc, #252]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x184>)
 80007a8:	f005 f812 	bl	80057d0 <iprintf>

	// until encountering empty space, extract the digits of I gain
	pid_instance_mot1.i_gain = 0;
 80007ac:	4b3b      	ldr	r3, [pc, #236]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
	while(*(uart_buffer + counter) != 32 && counter < Size - 1)
 80007b4:	e01b      	b.n	80007ee <HAL_UARTEx_RxEventCallback+0xce>
	{
		pid_instance_mot1.i_gain = *(uart_buffer + counter) - 48 + pid_instance_mot1.i_gain * 10;
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4a39      	ldr	r2, [pc, #228]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3b30      	subs	r3, #48	; 0x30
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ca:	4b34      	ldr	r3, [pc, #208]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 80007cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80007d0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80007d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	4b2f      	ldr	r3, [pc, #188]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 80007de:	edc3 7a01 	vstr	s15, [r3, #4]
		counter++;
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	3301      	adds	r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	73fb      	strb	r3, [r7, #15]
	while(*(uart_buffer + counter) != 32 && counter < Size - 1)
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b20      	cmp	r3, #32
 80007fa:	d005      	beq.n	8000808 <HAL_UARTEx_RxEventCallback+0xe8>
 80007fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	3b01      	subs	r3, #1
 8000804:	429a      	cmp	r2, r3
 8000806:	dbd6      	blt.n	80007b6 <HAL_UARTEx_RxEventCallback+0x96>
	}
	counter++;
 8000808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	73fb      	strb	r3, [r7, #15]
	printf("I %d, ", (int)pid_instance_mot1.i_gain);
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000816:	edd3 7a01 	vldr	s15, [r3, #4]
 800081a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081e:	ee17 1a90 	vmov	r1, s15
 8000822:	4821      	ldr	r0, [pc, #132]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x188>)
 8000824:	f004 ffd4 	bl	80057d0 <iprintf>

	// until reaching the end, extract the digits of D gain
	pid_instance_mot1.d_gain = 0;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	while(counter < Size - 1)
 8000830:	e01b      	b.n	800086a <HAL_UARTEx_RxEventCallback+0x14a>
	{
		pid_instance_mot1.d_gain = *(uart_buffer + counter) - 48 + pid_instance_mot1.d_gain * 10;
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b30      	subs	r3, #48	; 0x30
 800083e:	ee07 3a90 	vmov	s15, r3
 8000842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000848:	edd3 7a02 	vldr	s15, [r3, #8]
 800084c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000850:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 800085a:	edc3 7a02 	vstr	s15, [r3, #8]
		counter++;
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	3301      	adds	r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	73fb      	strb	r3, [r7, #15]
	while(counter < Size - 1)
 800086a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	3b01      	subs	r3, #1
 8000872:	429a      	cmp	r2, r3
 8000874:	dbdd      	blt.n	8000832 <HAL_UARTEx_RxEventCallback+0x112>
	}
	printf("D %d\n", (int)pid_instance_mot1.d_gain);
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000878:	edd3 7a02 	vldr	s15, [r3, #8]
 800087c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000880:	ee17 1a90 	vmov	r1, s15
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_UARTEx_RxEventCallback+0x18c>)
 8000886:	f004 ffa3 	bl	80057d0 <iprintf>

	// receiving the next command
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_buffer, 30);
 800088a:	221e      	movs	r2, #30
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <HAL_UARTEx_RxEventCallback+0x180>)
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x190>)
 8000890:	f003 fe85 	bl	800459e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000268 	.word	0x20000268
 80008a0:	20000350 	.word	0x20000350
 80008a4:	08006800 	.word	0x08006800
 80008a8:	08006808 	.word	0x08006808
 80008ac:	08006810 	.word	0x08006810
 80008b0:	200001ac 	.word	0x200001ac

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f001 f80e 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f810 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 fa80 	bl	8000dc4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008c4:	f000 f92e 	bl	8000b24 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c8:	f000 f97e 	bl	8000bc8 <MX_TIM3_Init>
  MX_DMA_Init();
 80008cc:	f000 fa5a 	bl	8000d84 <MX_DMA_Init>
  MX_TIM1_Init();
 80008d0:	f000 f870 	bl	80009b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80008d4:	f000 fa2c 	bl	8000d30 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 80008d8:	f000 f9ce 	bl	8000c78 <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x28>
	...

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 ff66 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <SystemClock_Config+0xd0>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095c:	2307      	movs	r3, #7
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f001 ff0b 	bl	8002780 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000970:	f000 fbac 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2105      	movs	r1, #5
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f96c 	bl	8002c70 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099e:	f000 fb95 	bl	80010cc <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3750      	adds	r7, #80	; 0x50
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	; 0x58
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f004 fee7 	bl	80057c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f2:	4b4a      	ldr	r3, [pc, #296]	; (8000b1c <MX_TIM1_Init+0x168>)
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <MX_TIM1_Init+0x16c>)
 80009f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009f8:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <MX_TIM1_Init+0x168>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fe:	4b47      	ldr	r3, [pc, #284]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000a04:	4b45      	ldr	r3, [pc, #276]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b43      	ldr	r3, [pc, #268]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a12:	4b42      	ldr	r3, [pc, #264]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b40      	ldr	r3, [pc, #256]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1e:	483f      	ldr	r0, [pc, #252]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a20:	f002 fb46 	bl	80030b0 <HAL_TIM_Base_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a2a:	f000 fb4f 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4838      	ldr	r0, [pc, #224]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a3c:	f003 f880 	bl	8003b40 <HAL_TIM_ConfigClockSource>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a46:	f000 fb41 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4a:	4834      	ldr	r0, [pc, #208]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a4c:	f002 fc58 	bl	8003300 <HAL_TIM_PWM_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a56:	f000 fb39 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a66:	4619      	mov	r1, r3
 8000a68:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a6a:	f003 fc69 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a74:	f000 fb2a 	bl	80010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481f      	ldr	r0, [pc, #124]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000a9e:	f002 ff8d 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000aa8:	f000 fb10 	bl	80010cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4819      	ldr	r0, [pc, #100]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000ab6:	f002 ff81 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ac0:	f000 fb04 	bl	80010cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000ae8:	f003 fca6 	bl	8004438 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000af2:	f000 faeb 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start(&htim1);
 8000af6:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000af8:	f002 fb2a 	bl	8003150 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000b00:	f002 fc58 	bl	80033b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000b08:	f002 fc54 	bl	80033b4 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <MX_TIM1_Init+0x168>)
 8000b0e:	f000 fd13 	bl	8001538 <HAL_TIM_MspPostInit>

}
 8000b12:	bf00      	nop
 8000b14:	3758      	adds	r7, #88	; 0x58
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000008c 	.word	0x2000008c
 8000b20:	40010000 	.word	0x40010000

08000b24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b4a:	224f      	movs	r2, #79	; 0x4f
 8000b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b6a:	f002 faa1 	bl	80030b0 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b74:	f000 faaa 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4619      	mov	r1, r3
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000b86:	f002 ffdb 	bl	8003b40 <HAL_TIM_ConfigClockSource>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 fa9c 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000ba2:	f003 fbcd 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 fa8e 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000bb2:	f002 fb35 	bl	8003220 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM2_Init+0xa0>)
 8000bb8:	f002 faca 	bl	8003150 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000d4 	.word	0x200000d4

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2224      	movs	r2, #36	; 0x24
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 fdf2 	bl	80057c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <MX_TIM3_Init+0xac>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c22:	2301      	movs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4619      	mov	r1, r3
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c36:	f002 fc85 	bl	8003544 <HAL_TIM_Encoder_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c40:	f000 fa44 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c52:	f003 fb75 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c5c:	f000 fa36 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000c60:	213c      	movs	r1, #60	; 0x3c
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM3_Init+0xa8>)
 8000c64:	f002 fd14 	bl	8003690 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000011c 	.word	0x2000011c
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	; 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fd9a 	bl	80057c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c94:	4b24      	ldr	r3, [pc, #144]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000c96:	4a25      	ldr	r2, [pc, #148]	; (8000d2c <MX_TIM8_Init+0xb4>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000cec:	f002 fc2a 	bl	8003544 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000cf6:	f000 f9e9 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000d08:	f003 fb1a 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000d12:	f000 f9db 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000d16:	213c      	movs	r1, #60	; 0x3c
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM8_Init+0xb0>)
 8000d1a:	f002 fcb9 	bl	8003690 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM8_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000164 	.word	0x20000164
 8000d2c:	40010400 	.word	0x40010400

08000d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_USART2_UART_Init+0x50>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USART2_UART_Init+0x4c>)
 8000d68:	f003 fbcc 	bl	8004504 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d72:	f000 f9ab 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001ac 	.word	0x200001ac
 8000d80:	40004400 	.word	0x40004400

08000d84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_DMA_Init+0x3c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <MX_DMA_Init+0x3c>)
 8000d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_DMA_Init+0x3c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	2010      	movs	r0, #16
 8000dac:	f000 fee1 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000db0:	2010      	movs	r0, #16
 8000db2:	f000 fefa 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	4ba7      	ldr	r3, [pc, #668]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4aa6      	ldr	r2, [pc, #664]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000de4:	f043 0310 	orr.w	r3, r3, #16
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4ba4      	ldr	r3, [pc, #656]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	4ba0      	ldr	r3, [pc, #640]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a9f      	ldr	r2, [pc, #636]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b9d      	ldr	r3, [pc, #628]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b99      	ldr	r3, [pc, #612]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a98      	ldr	r2, [pc, #608]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b96      	ldr	r3, [pc, #600]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b92      	ldr	r3, [pc, #584]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a91      	ldr	r2, [pc, #580]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b8f      	ldr	r3, [pc, #572]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a8a      	ldr	r2, [pc, #552]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b84      	ldr	r3, [pc, #528]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a83      	ldr	r2, [pc, #524]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b81      	ldr	r3, [pc, #516]	; (800107c <MX_GPIO_Init+0x2b8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|MOTOR1_DIR_Pin|MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 8000e88:	487d      	ldr	r0, [pc, #500]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000e8a:	f001 fc47 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	2101      	movs	r1, #1
 8000e92:	487c      	ldr	r0, [pc, #496]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000e94:	f001 fc42 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e9e:	487a      	ldr	r0, [pc, #488]	; (8001088 <MX_GPIO_Init+0x2c4>)
 8000ea0:	f001 fc3c 	bl	800271c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 MOTOR1_DIR_Pin MOTOR2_DIR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|MOTOR1_DIR_Pin|MOTOR2_DIR_Pin;
 8000ea4:	f44f 63a1 	mov.w	r3, #1288	; 0x508
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4870      	ldr	r0, [pc, #448]	; (8001080 <MX_GPIO_Init+0x2bc>)
 8000ebe:	f001 fa91 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	486a      	ldr	r0, [pc, #424]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000eda:	f001 fa83 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4862      	ldr	r0, [pc, #392]	; (8001084 <MX_GPIO_Init+0x2c0>)
 8000efa:	f001 fa73 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	485e      	ldr	r0, [pc, #376]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000f14:	f001 fa66 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f28:	2306      	movs	r3, #6
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4856      	ldr	r0, [pc, #344]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000f34:	f001 fa56 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f38:	23e0      	movs	r3, #224	; 0xe0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	484e      	ldr	r0, [pc, #312]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000f54:	f001 fa46 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4849      	ldr	r0, [pc, #292]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8000f6c:	f001 fa3a 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f82:	2305      	movs	r3, #5
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4840      	ldr	r0, [pc, #256]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8000f8e:	f001 fa29 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f92:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f96:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4837      	ldr	r0, [pc, #220]	; (8001088 <MX_GPIO_Init+0x2c4>)
 8000fac:	f001 fa1a 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4831      	ldr	r0, [pc, #196]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000fc6:	f001 fa0d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000fca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_GPIO_Init+0x2c8>)
 8000fe8:	f001 f9fc 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffe:	2306      	movs	r3, #6
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_GPIO_Init+0x2c0>)
 800100a:	f001 f9eb 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800100e:	2320      	movs	r3, #32
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MX_GPIO_Init+0x2c4>)
 8001022:	f001 f9df 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001026:	f44f 7310 	mov.w	r3, #576	; 0x240
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102c:	2312      	movs	r3, #18
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001038:	2304      	movs	r3, #4
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_GPIO_Init+0x2cc>)
 8001044:	f001 f9ce 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800104c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_GPIO_Init+0x2bc>)
 800105e:	f001 f9c1 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2006      	movs	r0, #6
 8001068:	f000 fd83 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800106c:	2006      	movs	r0, #6
 800106e:	f000 fd9c 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40021000 	.word	0x40021000
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400

08001094 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e009      	b.n	80010ba <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	60ba      	str	r2, [r7, #8]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa60 	bl	8000574 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dbf1      	blt.n	80010a6 <_write+0x12>
	}
	return len;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <apply_pid>:
	pid_instance ->error_integral = 0;
}


void apply_pid(pid_instance_int16 *pid_instance, int16_t input_error, uint16_t sampling_rate)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	803b      	strh	r3, [r7, #0]
	pid_instance ->error_integral += input_error;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f0:	441a      	add	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	611a      	str	r2, [r3, #16]
	if(pid_instance->error_integral > INTEGRAL_GAIN_MAX)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4a34      	ldr	r2, [pc, #208]	; (80011cc <apply_pid+0xf4>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	dd02      	ble.n	8001106 <apply_pid+0x2e>
	{
		pid_instance->error_integral = INTEGRAL_GAIN_MAX;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <apply_pid+0xf4>)
 8001104:	611a      	str	r2, [r3, #16]
	}
	if(pid_instance->error_integral < -INTEGRAL_GAIN_MAX)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	4a31      	ldr	r2, [pc, #196]	; (80011d0 <apply_pid+0xf8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	da02      	bge.n	8001116 <apply_pid+0x3e>
	{
		pid_instance->error_integral = -INTEGRAL_GAIN_MAX;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <apply_pid+0xf8>)
 8001114:	611a      	str	r2, [r3, #16]
	}
	pid_instance ->output = pid_instance->p_gain * input_error +
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	ee27 7a27 	vmul.f32	s14, s14, s15
			pid_instance->i_gain * (pid_instance->error_integral) / sampling_rate +
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001142:	883b      	ldrh	r3, [r7, #0]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800114c:	eec6 7a26 	vdiv.f32	s15, s12, s13
	pid_instance ->output = pid_instance->p_gain * input_error +
 8001150:	ee37 7a27 	vadd.f32	s14, s14, s15
			pid_instance->d_gain * sampling_rate * (input_error - pid_instance->last_error);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 6a02 	vldr	s13, [r3, #8]
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001168:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_instance->i_gain * (pid_instance->error_integral) / sampling_rate +
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance ->output = pid_instance->p_gain * input_error +
 8001184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	b21a      	sxth	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	829a      	strh	r2, [r3, #20]

	if(pid_instance->output >= PID_MAX)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001198:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800119c:	db03      	blt.n	80011a6 <apply_pid+0xce>
	{
		pid_instance->output = PID_MAX;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011a4:	829a      	strh	r2, [r3, #20]
	}
	if(pid_instance->output <= -PID_MAX)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011ac:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 80011b0:	dc03      	bgt.n	80011ba <apply_pid+0xe2>
	{
		pid_instance->output = -PID_MAX;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f24e 02c0 	movw	r2, #57536	; 0xe0c0
 80011b8:	829a      	strh	r2, [r3, #20]
	}
	pid_instance->last_error = input_error;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	887a      	ldrh	r2, [r7, #2]
 80011be:	819a      	strh	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	001e8480 	.word	0x001e8480
 80011d0:	ffe17b80 	.word	0xffe17b80

080011d4 <update_encoder>:
#include "motor_encoder.h"


void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 80011d4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;
	if(!first_time)
 80011e8:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <update_encoder+0x104>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <update_encoder+0x2a>
	{
		encoder_value ->velocity = 0;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <update_encoder+0x104>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e052      	b.n	80012a4 <update_encoder+0xd0>
	}
	else
	{
		if(temp_counter == encoder_value ->last_counter_value)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d103      	bne.n	8001210 <update_encoder+0x3c>
		{
			encoder_value ->velocity = 0;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	e049      	b.n	80012a4 <update_encoder+0xd0>
		}
		else if(temp_counter > encoder_value ->last_counter_value)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	429a      	cmp	r2, r3
 8001218:	d922      	bls.n	8001260 <update_encoder+0x8c>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b10      	cmp	r3, #16
 8001226:	d110      	bne.n	800124a <update_encoder+0x76>
			{
				encoder_value ->velocity = -encoder_value ->last_counter_value -
						(__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	b29a      	uxth	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	b29b      	uxth	r3, r3
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b29a      	uxth	r2, r3
				encoder_value ->velocity = -encoder_value ->last_counter_value -
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	b29b      	uxth	r3, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29b      	uxth	r3, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	801a      	strh	r2, [r3, #0]
 8001248:	e02c      	b.n	80012a4 <update_encoder+0xd0>
			}
			else
			{
				encoder_value ->velocity = temp_counter - encoder_value ->last_counter_value;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	b29b      	uxth	r3, r3
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	b21a      	sxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	801a      	strh	r2, [r3, #0]
 800125e:	e021      	b.n	80012a4 <update_encoder+0xd0>
			}

		}
		else
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b10      	cmp	r3, #16
 800126c:	d10a      	bne.n	8001284 <update_encoder+0xb0>
			{
				encoder_value ->velocity = temp_counter - encoder_value ->last_counter_value;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	b29b      	uxth	r3, r3
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	b21a      	sxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	e00f      	b.n	80012a4 <update_encoder+0xd0>
			}
			else
			{
				encoder_value ->velocity = temp_counter +
						(__HAL_TIM_GET_AUTORELOAD(htim) - encoder_value ->last_counter_value);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	b29b      	uxth	r3, r3
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29a      	uxth	r2, r3
				encoder_value ->velocity = temp_counter +
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	encoder_value ->position += encoder_value ->velocity;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012b0:	b209      	sxth	r1, r1
 80012b2:	17c8      	asrs	r0, r1, #31
 80012b4:	460c      	mov	r4, r1
 80012b6:	4605      	mov	r5, r0
 80012b8:	eb12 0804 	adds.w	r8, r2, r4
 80012bc:	eb43 0905 	adc.w	r9, r3, r5
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoder_value ->last_counter_value = temp_counter;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	611a      	str	r2, [r3, #16]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80012d6:	4770      	bx	lr
 80012d8:	20000373 	.word	0x20000373

080012dc <apply_average_filter>:
	{
		instance->buffer[i] = 0;
	}
}
void apply_average_filter(mov_aver_intance_int16* instance, int16_t input, int16_t *out)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	817b      	strh	r3, [r7, #10]

	instance ->sum +=input - instance->buffer[instance ->counter];
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80012f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	f8b1 10c8 	ldrh.w	r1, [r1, #200]	; 0xc8
 80012fa:	4608      	mov	r0, r1
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8001302:	1a5b      	subs	r3, r3, r1
 8001304:	441a      	add	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	instance->buffer[instance ->counter] = input;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001312:	4619      	mov	r1, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	897a      	ldrh	r2, [r7, #10]
 8001318:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	instance ->counter++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001322:	3301      	adds	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	if(instance ->counter == MOVING_AVERAGE_LENGTH)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d103      	bne.n	800133e <apply_average_filter+0x62>
	{
		instance ->counter = 0;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}
	instance ->out = instance ->sum / MOVING_AVERAGE_LENGTH;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <apply_average_filter+0x94>)
 8001346:	fb82 1203 	smull	r1, r2, r2, r3
 800134a:	1152      	asrs	r2, r2, #5
 800134c:	17db      	asrs	r3, r3, #31
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b21a      	sxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	// normalization
	*out = instance ->out;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f9b3 20ca 	ldrsh.w	r2, [r3, #202]	; 0xca
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	801a      	strh	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	51eb851f 	.word	0x51eb851f

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b2:	2007      	movs	r0, #7
 80013b4:	f000 fbd2 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_TIM_Base_MspInit+0x70>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10e      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f2:	e01a      	b.n	800142a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d115      	bne.n	800142a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_TIM_Base_MspInit+0x74>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201c      	movs	r0, #28
 8001420:	f000 fba7 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001424:	201c      	movs	r0, #28
 8001426:	f000 fbc0 	bl	8001baa <HAL_NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40010000 	.word	0x40010000
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	; 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a32      	ldr	r2, [pc, #200]	; (8001524 <HAL_TIM_Encoder_MspInit+0xe8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12c      	bne.n	80014b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a30      	ldr	r2, [pc, #192]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001496:	2330      	movs	r3, #48	; 0x30
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	481e      	ldr	r0, [pc, #120]	; (800152c <HAL_TIM_Encoder_MspInit+0xf0>)
 80014b2:	f000 ff97 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80014b6:	e030      	b.n	800151a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_TIM_Encoder_MspInit+0xf4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d12b      	bne.n	800151a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_Encoder_MspInit+0xec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800150a:	2303      	movs	r3, #3
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001516:	f000 ff65 	bl	80023e4 <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	; 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40000400 	.word	0x40000400
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40010400 	.word	0x40010400
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_TIM_MspPostInit+0x68>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d11e      	bne.n	8001598 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_TIM_MspPostInit+0x6c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin;
 8001576:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800157a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001588:	2301      	movs	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_TIM_MspPostInit+0x70>)
 8001594:	f000 ff26 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a34      	ldr	r2, [pc, #208]	; (800169c <HAL_UART_MspInit+0xf0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d161      	bne.n	8001692 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a2b      	ldr	r2, [pc, #172]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <HAL_UART_MspInit+0xf4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001606:	230c      	movs	r3, #12
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	2307      	movs	r3, #7
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <HAL_UART_MspInit+0xf8>)
 8001622:	f000 fedf 	bl	80023e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <HAL_UART_MspInit+0x100>)
 800162a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800162e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001632:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001646:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 8001668:	f000 faba 	bl	8001be0 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001672:	f7ff fd2b 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_UART_MspInit+0xfc>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2026      	movs	r0, #38	; 0x26
 8001688:	f000 fa73 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800168c:	2026      	movs	r0, #38	; 0x26
 800168e:	f000 fa8c 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40004400 	.word	0x40004400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	200001f0 	.word	0x200001f0
 80016ac:	40026088 	.word	0x40026088

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <NMI_Handler+0x4>

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 f93e 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001708:	2001      	movs	r0, #1
 800170a:	f001 f821 	bl	8002750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Stream5_IRQHandler+0x10>)
 800171a:	f000 fbf9 	bl	8001f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001f0 	.word	0x200001f0

08001728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM2_IRQHandler+0x10>)
 800172e:	f002 f83d 	bl	80037ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200000d4 	.word	0x200000d4

0800173c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <USART2_IRQHandler+0x10>)
 8001742:	f002 ff91 	bl	8004668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001ac 	.word	0x200001ac

08001750 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
	}

return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:
	}
	return len;
}

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 ffa2 	bl	800576c <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000374 	.word	0x20000374
 800185c:	20000390 	.word	0x20000390

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f003 ff61 	bl	8005778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7fe fffd 	bl	80008b4 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	2000038c 	.word	0x2000038c

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f92b 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fd32 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f943 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f90b 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000000 	.word	0x20000000
 8001974:	20000008 	.word	0x20000008
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000378 	.word	0x20000378

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000378 	.word	0x20000378

080019bc <__NVIC_SetPriorityGrouping>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff feda 	bl	80019a4 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e099      	b.n	8001d30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1c:	e00f      	b.n	8001c3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1e:	f7ff fec1 	bl	80019a4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d908      	bls.n	8001c3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2203      	movs	r2, #3
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e078      	b.n	8001d30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_DMA_Init+0x158>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d107      	bne.n	8001ca8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f023 0307 	bic.w	r3, r3, #7
 8001cbe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d117      	bne.n	8001d02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00e      	beq.n	8001d02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fb01 	bl	80022ec <DMA_CheckFifoParam>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d008      	beq.n	8001d02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e016      	b.n	8001d30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fab8 	bl	8002280 <DMA_CalcBaseAndBitshift>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d18:	223f      	movs	r2, #63	; 0x3f
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f010803f 	.word	0xf010803f

08001d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_DMA_Start_IT+0x26>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e040      	b.n	8001de4 <HAL_DMA_Start_IT+0xa8>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d12f      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fa4a 	bl	8002224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	223f      	movs	r2, #63	; 0x3f
 8001d96:	409a      	lsls	r2, r3
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0216 	orr.w	r2, r2, #22
 8001daa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0208 	orr.w	r2, r2, #8
 8001dc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	e005      	b.n	8001de2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dfa:	f7ff fdd3 	bl	80019a4 <HAL_GetTick>
 8001dfe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d008      	beq.n	8001e1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e052      	b.n	8001ec4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0216 	bic.w	r2, r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d103      	bne.n	8001e4e <HAL_DMA_Abort+0x62>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0208 	bic.w	r2, r2, #8
 8001e5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6e:	e013      	b.n	8001e98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e70:	f7ff fd98 	bl	80019a4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d90c      	bls.n	8001e98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e015      	b.n	8001ec4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e4      	bne.n	8001e70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	223f      	movs	r2, #63	; 0x3f
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d004      	beq.n	8001eea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00c      	b.n	8001f04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2205      	movs	r2, #5
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0201 	bic.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f1c:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <HAL_DMA_IRQHandler+0x248>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a8e      	ldr	r2, [pc, #568]	; (800215c <HAL_DMA_IRQHandler+0x24c>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a9b      	lsrs	r3, r3, #10
 8001f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01a      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0204 	bic.w	r2, r2, #4
 8001f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2208      	movs	r2, #8
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2201      	movs	r2, #1
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001faa:	f043 0202 	orr.w	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d012      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00b      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0204 	orr.w	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2210      	movs	r2, #16
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d043      	beq.n	8002080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03c      	beq.n	8002080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2210      	movs	r2, #16
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d018      	beq.n	8002052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d108      	bne.n	8002040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d024      	beq.n	8002080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	e01f      	b.n	8002080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	4798      	blx	r3
 8002050:	e016      	b.n	8002080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0208 	bic.w	r2, r2, #8
 800206e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	2220      	movs	r2, #32
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 808f 	beq.w	80021b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8087 	beq.w	80021b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2220      	movs	r2, #32
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d136      	bne.n	8002128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0216 	bic.w	r2, r2, #22
 80020c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_DMA_IRQHandler+0x1da>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0208 	bic.w	r2, r2, #8
 80020f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	223f      	movs	r2, #63	; 0x3f
 8002100:	409a      	lsls	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211a:	2b00      	cmp	r3, #0
 800211c:	d07e      	beq.n	800221c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
        }
        return;
 8002126:	e079      	b.n	800221c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01d      	beq.n	8002172 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	2b00      	cmp	r3, #0
 800214a:	d031      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e02c      	b.n	80021b0 <HAL_DMA_IRQHandler+0x2a0>
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000
 800215c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d023      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
 8002170:	e01e      	b.n	80021b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10f      	bne.n	80021a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0210 	bic.w	r2, r2, #16
 800218e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d032      	beq.n	800221e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d022      	beq.n	800220a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2205      	movs	r2, #5
 80021c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d307      	bcc.n	80021f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f2      	bne.n	80021dc <HAL_DMA_IRQHandler+0x2cc>
 80021f6:	e000      	b.n	80021fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
 800221a:	e000      	b.n	800221e <HAL_DMA_IRQHandler+0x30e>
        return;
 800221c:	bf00      	nop
    }
  }
}
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d108      	bne.n	8002264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002262:	e007      	b.n	8002274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3b10      	subs	r3, #16
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <DMA_CalcBaseAndBitshift+0x68>)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d909      	bls.n	80022c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	1d1a      	adds	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	659a      	str	r2, [r3, #88]	; 0x58
 80022c0:	e007      	b.n	80022d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	aaaaaaab 	.word	0xaaaaaaab
 80022e8:	08006830 	.word	0x08006830

080022ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d11f      	bne.n	8002346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d856      	bhi.n	80023ba <DMA_CheckFifoParam+0xce>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <DMA_CheckFifoParam+0x28>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002325 	.word	0x08002325
 8002318:	08002337 	.word	0x08002337
 800231c:	08002325 	.word	0x08002325
 8002320:	080023bb 	.word	0x080023bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d046      	beq.n	80023be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002334:	e043      	b.n	80023be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800233e:	d140      	bne.n	80023c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002344:	e03d      	b.n	80023c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234e:	d121      	bne.n	8002394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d837      	bhi.n	80023c6 <DMA_CheckFifoParam+0xda>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <DMA_CheckFifoParam+0x70>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	0800236d 	.word	0x0800236d
 8002360:	08002373 	.word	0x08002373
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002385 	.word	0x08002385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e030      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d025      	beq.n	80023ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002382:	e022      	b.n	80023ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238c:	d11f      	bne.n	80023ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002392:	e01c      	b.n	80023ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d903      	bls.n	80023a2 <DMA_CheckFifoParam+0xb6>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d003      	beq.n	80023a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a0:	e018      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
      break;
 80023a6:	e015      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00e      	beq.n	80023d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e00b      	b.n	80023d2 <DMA_CheckFifoParam+0xe6>
      break;
 80023ba:	bf00      	nop
 80023bc:	e00a      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
 80023c0:	e008      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e006      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e004      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e002      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
    }
  } 
  
  return status; 
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e16b      	b.n	80026d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 815a 	bne.w	80026d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80b4 	beq.w	80026d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b60      	ldr	r3, [pc, #384]	; (80026f0 <HAL_GPIO_Init+0x30c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a5f      	ldr	r2, [pc, #380]	; (80026f0 <HAL_GPIO_Init+0x30c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b5d      	ldr	r3, [pc, #372]	; (80026f0 <HAL_GPIO_Init+0x30c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a5b      	ldr	r2, [pc, #364]	; (80026f4 <HAL_GPIO_Init+0x310>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_GPIO_Init+0x314>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a51      	ldr	r2, [pc, #324]	; (80026fc <HAL_GPIO_Init+0x318>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_GPIO_Init+0x31c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <HAL_GPIO_Init+0x320>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x21a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <HAL_GPIO_Init+0x324>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x216>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4d      	ldr	r2, [pc, #308]	; (800270c <HAL_GPIO_Init+0x328>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x212>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	; (8002710 <HAL_GPIO_Init+0x32c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_GPIO_Init+0x330>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x20a>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x228>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	; (80026f4 <HAL_GPIO_Init+0x310>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_GPIO_Init+0x334>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a32      	ldr	r2, [pc, #200]	; (8002718 <HAL_GPIO_Init+0x334>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b30      	ldr	r3, [pc, #192]	; (8002718 <HAL_GPIO_Init+0x334>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a27      	ldr	r2, [pc, #156]	; (8002718 <HAL_GPIO_Init+0x334>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_GPIO_Init+0x334>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_GPIO_Init+0x334>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_GPIO_Init+0x334>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_GPIO_Init+0x334>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae90 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021c00 	.word	0x40021c00
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d006      	beq.n	8002774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd ff28 	bl	80005c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e267      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d075      	beq.n	800288a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d00c      	beq.n	80027c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b85      	ldr	r3, [pc, #532]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d112      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c2:	d10b      	bne.n	80027dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	4b7e      	ldr	r3, [pc, #504]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d05b      	beq.n	8002888 <HAL_RCC_OscConfig+0x108>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d157      	bne.n	8002888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e242      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_OscConfig+0x74>
 80027e6:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a75      	ldr	r2, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e01d      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x98>
 80027fe:	4b70      	ldr	r3, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6f      	ldr	r2, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6c      	ldr	r2, [pc, #432]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e00b      	b.n	8002830 <HAL_RCC_OscConfig+0xb0>
 8002818:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff f8b4 	bl	80019a4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002840:	f7ff f8b0 	bl	80019a4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e207      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0xc0>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7ff f8a0 	bl	80019a4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002868:	f7ff f89c 	bl	80019a4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1f3      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0xe8>
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00b      	beq.n	80028ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d11c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d116      	bne.n	80028e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1c7      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4937      	ldr	r1, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	e03a      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f0:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x244>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7ff f855 	bl	80019a4 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7ff f851 	bl	80019a4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e1a8      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4925      	ldr	r1, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_OscConfig+0x244>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7ff f834 	bl	80019a4 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002940:	f7ff f830 	bl	80019a4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e187      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d036      	beq.n	80029d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d016      	beq.n	80029a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCC_OscConfig+0x248>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7ff f814 	bl	80019a4 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002980:	f7ff f810 	bl	80019a4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e167      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_OscConfig+0x240>)
 8002994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x200>
 800299e:	e01b      	b.n	80029d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x248>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fffd 	bl	80019a4 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ac:	e00e      	b.n	80029cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ae:	f7fe fff9 	bl	80019a4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e150      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	42470000 	.word	0x42470000
 80029c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8097 	beq.w	8002b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b77      	ldr	r3, [pc, #476]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d118      	bne.n	8002a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b74      	ldr	r3, [pc, #464]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a73      	ldr	r2, [pc, #460]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe ffb9 	bl	80019a4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a36:	f7fe ffb5 	bl	80019a4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e10c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b6a      	ldr	r3, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0x474>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x2ea>
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a60:	4a63      	ldr	r2, [pc, #396]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70
 8002a68:	e01c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x30c>
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a5e      	ldr	r2, [pc, #376]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	4a5b      	ldr	r2, [pc, #364]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x324>
 8002a8c:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a57      	ldr	r2, [pc, #348]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
 8002a98:	4b55      	ldr	r3, [pc, #340]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a54      	ldr	r2, [pc, #336]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 0304 	bic.w	r3, r3, #4
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe ff7a 	bl	80019a4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe ff76 	bl	80019a4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0cb      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0ee      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x334>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad8:	f7fe ff64 	bl	80019a4 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae0:	f7fe ff60 	bl	80019a4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0b5      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ee      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	4a38      	ldr	r2, [pc, #224]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80a1 	beq.w	8002c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d05c      	beq.n	8002be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d141      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fe ff34 	bl	80019a4 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b40:	f7fe ff30 	bl	80019a4 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e087      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b52:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	085b      	lsrs	r3, r3, #1
 8002b76:	3b01      	subs	r3, #1
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	491b      	ldr	r1, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8e:	f7fe ff09 	bl	80019a4 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b96:	f7fe ff05 	bl	80019a4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e05c      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x416>
 8002bb4:	e054      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <HAL_RCC_OscConfig+0x478>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fef2 	bl	80019a4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7fe feee 	bl	80019a4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e045      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x444>
 8002be2:	e03d      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d107      	bne.n	8002bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e038      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x4ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d028      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d111      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0cc      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d90c      	bls.n	8002cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b63      	ldr	r3, [pc, #396]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0b8      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cdc:	4b53      	ldr	r3, [pc, #332]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a52      	ldr	r2, [pc, #328]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	494d      	ldr	r1, [pc, #308]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e07f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e06f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d4e:	4b37      	ldr	r3, [pc, #220]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4934      	ldr	r1, [pc, #208]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d60:	f7fe fe20 	bl	80019a4 <HAL_GetTick>
 8002d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d68:	f7fe fe1c 	bl	80019a4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 020c 	and.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d1eb      	bne.n	8002d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d20c      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e032      	b.n	8002e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	490e      	ldr	r1, [pc, #56]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002df6:	f000 f821 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	490a      	ldr	r1, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	5ccb      	ldrb	r3, [r1, r3]
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fd80 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	08006818 	.word	0x08006818
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e40:	b094      	sub	sp, #80	; 0x50
 8002e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
 8002e48:	2300      	movs	r3, #0
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e54:	4b79      	ldr	r3, [pc, #484]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d00d      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x40>
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	f200 80e1 	bhi.w	8003028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x34>
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e6e:	e0db      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e70:	4b73      	ldr	r3, [pc, #460]	; (8003040 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e74:	e0db      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e76:	4b73      	ldr	r3, [pc, #460]	; (8003044 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e7a:	e0d8      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e86:	4b6d      	ldr	r3, [pc, #436]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d063      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eae:	4622      	mov	r2, r4
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	f04f 0000 	mov.w	r0, #0
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	0159      	lsls	r1, r3, #5
 8002ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec0:	0150      	lsls	r0, r2, #5
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	1a51      	subs	r1, r2, r1
 8002eca:	6139      	str	r1, [r7, #16]
 8002ecc:	4629      	mov	r1, r5
 8002ece:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	018b      	lsls	r3, r1, #6
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eea:	4651      	mov	r1, sl
 8002eec:	018a      	lsls	r2, r1, #6
 8002eee:	4651      	mov	r1, sl
 8002ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0e:	4690      	mov	r8, r2
 8002f10:	4699      	mov	r9, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	eb18 0303 	adds.w	r3, r8, r3
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	eb49 0303 	adc.w	r3, r9, r3
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	024b      	lsls	r3, r1, #9
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f38:	4621      	mov	r1, r4
 8002f3a:	024a      	lsls	r2, r1, #9
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f4c:	f7fd f990 	bl	8000270 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	e058      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	4611      	mov	r1, r2
 8002f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f74:	4642      	mov	r2, r8
 8002f76:	464b      	mov	r3, r9
 8002f78:	f04f 0000 	mov.w	r0, #0
 8002f7c:	f04f 0100 	mov.w	r1, #0
 8002f80:	0159      	lsls	r1, r3, #5
 8002f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f86:	0150      	lsls	r0, r2, #5
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f92:	4649      	mov	r1, r9
 8002f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fac:	ebb2 040a 	subs.w	r4, r2, sl
 8002fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	00eb      	lsls	r3, r5, #3
 8002fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fc2:	00e2      	lsls	r2, r4, #3
 8002fc4:	4614      	mov	r4, r2
 8002fc6:	461d      	mov	r5, r3
 8002fc8:	4643      	mov	r3, r8
 8002fca:	18e3      	adds	r3, r4, r3
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb45 0303 	adc.w	r3, r5, r3
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	028b      	lsls	r3, r1, #10
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fec:	4621      	mov	r1, r4
 8002fee:	028a      	lsls	r2, r1, #10
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	61fa      	str	r2, [r7, #28]
 8002ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003000:	f7fd f936 	bl	8000270 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4613      	mov	r3, r2
 800300a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_GetSysClockFreq+0x200>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800301c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003026:	e002      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetSysClockFreq+0x204>)
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800302c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800302e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003030:	4618      	mov	r0, r3
 8003032:	3750      	adds	r7, #80	; 0x50
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	08006828 	.word	0x08006828

08003088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800308c:	f7ff ffdc 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	08006828 	.word	0x08006828

080030b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e041      	b.n	8003146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe f974 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f000 fe16 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e046      	b.n	80031f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_TIM_Base_Start+0xb4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d022      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d01d      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <HAL_TIM_Base_Start+0xb8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d018      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1e      	ldr	r2, [pc, #120]	; (800320c <HAL_TIM_Base_Start+0xbc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d013      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_TIM_Base_Start+0xc0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00e      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <HAL_TIM_Base_Start+0xc4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d009      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_TIM_Base_Start+0xc8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_Base_Start+0x70>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <HAL_TIM_Base_Start+0xcc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d010      	beq.n	80031f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e2:	e007      	b.n	80031f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40001800 	.word	0x40001800

08003220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04e      	b.n	80032d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d01d      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_Base_Start_IT+0xdc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40001800 	.word	0x40001800

08003300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e041      	b.n	8003396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f839 	bl	800339e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 fcee 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x24>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e022      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d109      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e015      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d109      	bne.n	800340c <HAL_TIM_PWM_Start+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e008      	b.n	800341e <HAL_TIM_PWM_Start+0x6a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e07c      	b.n	8003520 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <HAL_TIM_PWM_Start+0x82>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	e013      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b04      	cmp	r3, #4
 800343a:	d104      	bne.n	8003446 <HAL_TIM_PWM_Start+0x92>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003444:	e00b      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d104      	bne.n	8003456 <HAL_TIM_PWM_Start+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	e003      	b.n	800345e <HAL_TIM_PWM_Start+0xaa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2201      	movs	r2, #1
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ff44 	bl	80042f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <HAL_TIM_PWM_Start+0x174>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_TIM_PWM_Start+0xcc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_TIM_PWM_Start+0x178>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d101      	bne.n	8003484 <HAL_TIM_PWM_Start+0xd0>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_TIM_PWM_Start+0xd2>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_TIM_PWM_Start+0x174>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ac:	d01d      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_TIM_PWM_Start+0x17c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_TIM_PWM_Start+0x180>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_TIM_PWM_Start+0x184>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a16      	ldr	r2, [pc, #88]	; (800352c <HAL_TIM_PWM_Start+0x178>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIM_PWM_Start+0x188>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_TIM_PWM_Start+0x136>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <HAL_TIM_PWM_Start+0x18c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d010      	beq.n	800351e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	e007      	b.n	800351e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40010000 	.word	0x40010000
 800352c:	40010400 	.word	0x40010400
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40014000 	.word	0x40014000
 8003540:	40001800 	.word	0x40001800

08003544 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e097      	b.n	8003688 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fd ff65 	bl	800143c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003588:	f023 0307 	bic.w	r3, r3, #7
 800358c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4610      	mov	r0, r2
 800359a:	f000 fbc1 	bl	8003d20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	4313      	orrs	r3, r2
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80035e4:	f023 030c 	bic.w	r3, r3, #12
 80035e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	4313      	orrs	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	011a      	lsls	r2, r3, #4
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	031b      	lsls	r3, r3, #12
 8003614:	4313      	orrs	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4313      	orrs	r3, r2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c6:	7b7b      	ldrb	r3, [r7, #13]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d001      	beq.n	80036d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e069      	b.n	80037a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e0:	e031      	b.n	8003746 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d110      	bne.n	800370a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036e8:	7bbb      	ldrb	r3, [r7, #14]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036ee:	7b3b      	ldrb	r3, [r7, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d001      	beq.n	80036f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e055      	b.n	80037a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003708:	e01d      	b.n	8003746 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d108      	bne.n	8003722 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003710:	7bbb      	ldrb	r3, [r7, #14]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003716:	7b7b      	ldrb	r3, [r7, #13]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800371c:	7b3b      	ldrb	r3, [r7, #12]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e03e      	b.n	80037a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_TIM_Encoder_Start+0xc4>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d008      	beq.n	8003764 <HAL_TIM_Encoder_Start+0xd4>
 8003752:	e00f      	b.n	8003774 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2201      	movs	r2, #1
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fdc9 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 8003762:	e016      	b.n	8003792 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	2104      	movs	r1, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fdc1 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 8003772:	e00e      	b.n	8003792 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2201      	movs	r2, #1
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fdb9 	bl	80042f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	2104      	movs	r1, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fdb2 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 8003790:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0202 	mvn.w	r2, #2
 80037d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa77 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fa69 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa7a 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0204 	mvn.w	r2, #4
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa4d 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa3f 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa50 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b08      	cmp	r3, #8
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0208 	mvn.w	r2, #8
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa23 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa15 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa26 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2208      	movs	r2, #8
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9f9 	bl	8003ce2 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9eb 	bl	8003cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9fc 	bl	8003cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0201 	mvn.w	r2, #1
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fc fe82 	bl	8000634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d10e      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d107      	bne.n	800395c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fdca 	bl	80044f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d107      	bne.n	8003988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f9c1 	bl	8003d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b20      	cmp	r3, #32
 8003994:	d10e      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d107      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0220 	mvn.w	r2, #32
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fd94 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0ae      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	f200 809f 	bhi.w	8003b28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a25 	.word	0x08003a25
 80039f4:	08003b29 	.word	0x08003b29
 80039f8:	08003b29 	.word	0x08003b29
 80039fc:	08003b29 	.word	0x08003b29
 8003a00:	08003a65 	.word	0x08003a65
 8003a04:	08003b29 	.word	0x08003b29
 8003a08:	08003b29 	.word	0x08003b29
 8003a0c:	08003b29 	.word	0x08003b29
 8003a10:	08003aa7 	.word	0x08003aa7
 8003a14:	08003b29 	.word	0x08003b29
 8003a18:	08003b29 	.word	0x08003b29
 8003a1c:	08003b29 	.word	0x08003b29
 8003a20:	08003ae7 	.word	0x08003ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fa18 	bl	8003e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0208 	orr.w	r2, r2, #8
 8003a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691a      	ldr	r2, [r3, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	619a      	str	r2, [r3, #24]
      break;
 8003a62:	e064      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa68 	bl	8003f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6999      	ldr	r1, [r3, #24]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	021a      	lsls	r2, r3, #8
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	619a      	str	r2, [r3, #24]
      break;
 8003aa4:	e043      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fabd 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0208 	orr.w	r2, r2, #8
 8003ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0204 	bic.w	r2, r2, #4
 8003ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]
      break;
 8003ae4:	e023      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fb11 	bl	8004114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	61da      	str	r2, [r3, #28]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_TIM_ConfigClockSource+0x1c>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e0b4      	b.n	8003cc6 <HAL_TIM_ConfigClockSource+0x186>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b94:	d03e      	beq.n	8003c14 <HAL_TIM_ConfigClockSource+0xd4>
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9a:	f200 8087 	bhi.w	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba2:	f000 8086 	beq.w	8003cb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d87f      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d01a      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xa6>
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d87b      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d050      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x11a>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d877      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b50      	cmp	r3, #80	; 0x50
 8003bbe:	d03c      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0xfa>
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d873      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d058      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x13a>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d86f      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d064      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d86b      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d060      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d867      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05c      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d05a      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	e062      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f000 fb5d 	bl	80042b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	609a      	str	r2, [r3, #8]
      break;
 8003c12:	e04f      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f000 fb46 	bl	80042b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c36:	609a      	str	r2, [r3, #8]
      break;
 8003c38:	e03c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 faba 	bl	80041c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2150      	movs	r1, #80	; 0x50
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb13 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c58:	e02c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fad9 	bl	800421e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2160      	movs	r1, #96	; 0x60
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb03 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c78:	e01c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fa9a 	bl	80041c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 faf3 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c98:	e00c      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f000 faea 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003caa:	e003      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e000      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3d      	ldr	r2, [pc, #244]	; (8003e38 <TIM_Base_SetConfig+0x118>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <TIM_Base_SetConfig+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <TIM_Base_SetConfig+0x120>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d027      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <TIM_Base_SetConfig+0x118>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d023      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <TIM_Base_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <TIM_Base_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d017      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <TIM_Base_SetConfig+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <TIM_Base_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <TIM_Base_SetConfig+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <TIM_Base_SetConfig+0x134>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <TIM_Base_SetConfig+0x138>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <TIM_Base_SetConfig+0x13c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0xf8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d103      	bne.n	8003e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	615a      	str	r2, [r3, #20]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800
 8003e54:	40001800 	.word	0x40001800
 8003e58:	40001c00 	.word	0x40001c00
 8003e5c:	40002000 	.word	0x40002000

08003e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0302 	bic.w	r3, r3, #2
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x64>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0308 	bic.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC1_SetConfig+0x8e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0210 	bic.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x68>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10d      	bne.n	8003fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x94>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d113      	bne.n	8003ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a21      	ldr	r2, [pc, #132]	; (800410c <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x66>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC3_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x92>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d113      	bne.n	80040e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	031b      	lsls	r3, r3, #12
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <TIM_OC4_SetConfig+0xa4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC4_SetConfig+0x68>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a11      	ldr	r2, [pc, #68]	; (80041bc <TIM_OC4_SetConfig+0xa8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 030a 	bic.w	r3, r3, #10
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	f043 0307 	orr.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2201      	movs	r2, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
	...

08004340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004354:	2302      	movs	r3, #2
 8004356:	e05a      	b.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d01d      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10c      	bne.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40010400 	.word	0x40010400
 8004430:	40014000 	.word	0x40014000
 8004434:	40001800 	.word	0x40001800

08004438 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004450:	2302      	movs	r3, #2
 8004452:	e03d      	b.n	80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e03f      	b.n	8004596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd f83e 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fe9b 	bl	8005284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08c      	sub	sp, #48	; 0x30
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d152      	bne.n	800465e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04b      	b.n	8004660 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e044      	b.n	8004660 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	461a      	mov	r2, r3
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fbea 	bl	8004dc4 <UART_Start_Receive_DMA>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12c      	bne.n	8004658 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	2b01      	cmp	r3, #1
 8004604:	d125      	bne.n	8004652 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	617b      	str	r3, [r7, #20]
   return(result);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f043 0310 	orr.w	r3, r3, #16
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	330c      	adds	r3, #12
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	627a      	str	r2, [r7, #36]	; 0x24
 800463e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6a39      	ldr	r1, [r7, #32]
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	61fb      	str	r3, [r7, #28]
   return(result);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004650:	e002      	b.n	8004658 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800465c:	e000      	b.n	8004660 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	4618      	mov	r0, r3
 8004662:	3730      	adds	r7, #48	; 0x30
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ba      	sub	sp, #232	; 0xe8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10f      	bne.n	80046ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fd21 	bl	800510e <UART_Receive_IT>
      return;
 80046cc:	e256      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80de 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80d1 	beq.w	8004894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f043 0201 	orr.w	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f043 0202 	orr.w	r2, r3, #2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00b      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
 8004746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0204 	orr.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800475e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
 800476a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 81ed 	beq.w	8004b72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fcac 	bl	800510e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_UART_IRQHandler+0x17a>
 80047da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04f      	beq.n	8004882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fbb4 	bl	8004f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d141      	bne.n	800487a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800482e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800483a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1d9      	bne.n	80047f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_UART_IRQHandler+0x3dc>)
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fb38 	bl	8001ecc <HAL_DMA_Abort_IT>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00e      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9a4 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00a      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f9a0 	bl	8004bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e006      	b.n	8004890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f99c 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800488e:	e170      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	bf00      	nop
    return;
 8004892:	e16e      	b.n	8004b72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 814a 	bne.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8143 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 813c 	beq.w	8004b32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	f040 80b4 	bne.w	8004a48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8140 	beq.w	8004b76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fe:	429a      	cmp	r2, r3
 8004900:	f080 8139 	bcs.w	8004b76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800490a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	f000 8088 	beq.w	8004a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800495e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1d9      	bne.n	800491a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3314      	adds	r3, #20
 800496c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	e853 3f00 	ldrex	r3, [r3]
 8004974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3314      	adds	r3, #20
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800498a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800498e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800499c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e1      	bne.n	8004966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd f9e1 	bl	8001dec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fb fe70 	bl	8000720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a40:	e099      	b.n	8004b76 <HAL_UART_IRQHandler+0x50e>
 8004a42:	bf00      	nop
 8004a44:	08005017 	.word	0x08005017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 808b 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8086 	beq.w	8004b7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	330c      	adds	r3, #12
 8004a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a92:	647a      	str	r2, [r7, #68]	; 0x44
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004aca:	633a      	str	r2, [r7, #48]	; 0x30
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b10:	61fa      	str	r2, [r7, #28]
 8004b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	69b9      	ldr	r1, [r7, #24]
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e3      	bne.n	8004aec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fb fdf8 	bl	8000720 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b30:	e023      	b.n	8004b7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa77 	bl	800503e <UART_Transmit_IT>
    return;
 8004b50:	e014      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00e      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d008      	beq.n	8004b7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fab7 	bl	80050de <UART_EndTransmit_IT>
    return;
 8004b70:	e004      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
    return;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <HAL_UART_IRQHandler+0x514>
      return;
 8004b7a:	bf00      	nop
  }
}
 8004b7c:	37e8      	adds	r7, #232	; 0xe8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop

08004b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b09c      	sub	sp, #112	; 0x70
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d172      	bne.n	8004cd6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c16:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	667b      	str	r3, [r7, #100]	; 0x64
 8004c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3314      	adds	r3, #20
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c74:	663b      	str	r3, [r7, #96]	; 0x60
 8004c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e5      	bne.n	8004c5e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d119      	bne.n	8004cd6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0310 	bic.w	r3, r3, #16
 8004cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc2:	61fa      	str	r2, [r7, #28]
 8004cc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	69b9      	ldr	r1, [r7, #24]
 8004cc8:	69fa      	ldr	r2, [r7, #28]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d106      	bne.n	8004cec <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ce6:	f7fb fd1b 	bl	8000720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cea:	e002      	b.n	8004cf2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004cec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004cee:	f7ff ff53 	bl	8004b98 <HAL_UART_RxCpltCallback>
}
 8004cf2:	bf00      	nop
 8004cf4:	3770      	adds	r7, #112	; 0x70
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d108      	bne.n	8004d22 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7fb fd00 	bl	8000720 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d20:	e002      	b.n	8004d28 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff42 	bl	8004bac <HAL_UART_RxHalfCpltCallback>
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b21      	cmp	r3, #33	; 0x21
 8004d62:	d108      	bne.n	8004d76 <UART_DMAError+0x46>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d70:	68b8      	ldr	r0, [r7, #8]
 8004d72:	f000 f8c5 	bl	8004f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	d108      	bne.n	8004daa <UART_DMAError+0x7a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f000 f8d3 	bl	8004f50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f7ff ff02 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	; 0x60
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2222      	movs	r2, #34	; 0x22
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	4a40      	ldr	r2, [pc, #256]	; (8004ef4 <UART_Start_Receive_DMA+0x130>)
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <UART_Start_Receive_DMA+0x134>)
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	4a3e      	ldr	r2, [pc, #248]	; (8004efc <UART_Start_Receive_DMA+0x138>)
 8004e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	2200      	movs	r2, #0
 8004e0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f7fc ff8a 	bl	8001d3c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d019      	beq.n	8004e82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3314      	adds	r3, #20
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	e853 3f00 	ldrex	r3, [r3]
 8004e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	657b      	str	r3, [r7, #84]	; 0x54
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ea2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ea4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e5      	bne.n	8004e82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	6a39      	ldr	r1, [r7, #32]
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e5      	bne.n	8004eb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3760      	adds	r7, #96	; 0x60
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	08004bd5 	.word	0x08004bd5
 8004ef8:	08004cfb 	.word	0x08004cfb
 8004efc:	08004d31 	.word	0x08004d31

08004f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	61ba      	str	r2, [r7, #24]
 8004f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f44:	bf00      	nop
 8004f46:	3724      	adds	r7, #36	; 0x24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b095      	sub	sp, #84	; 0x54
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f78:	643a      	str	r2, [r7, #64]	; 0x40
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d119      	bne.n	8004ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe8:	61ba      	str	r2, [r7, #24]
 8004fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6979      	ldr	r1, [r7, #20]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800500a:	bf00      	nop
 800500c:	3754      	adds	r7, #84	; 0x54
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fdc5 	bl	8004bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b21      	cmp	r3, #33	; 0x21
 8005050:	d13e      	bne.n	80050d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d114      	bne.n	8005086 <UART_Transmit_IT+0x48>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]
 8005084:	e008      	b.n	8005098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6211      	str	r1, [r2, #32]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fd40 	bl	8004b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	f040 80ab 	bne.w	800527a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d117      	bne.n	800515e <UART_Receive_IT+0x50>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	b29a      	uxth	r2, r3
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
 800515c:	e026      	b.n	80051ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d007      	beq.n	8005182 <UART_Receive_IT+0x74>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <UART_Receive_IT+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15a      	bne.n	8005276 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0220 	bic.w	r2, r2, #32
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d135      	bne.n	800526c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	613b      	str	r3, [r7, #16]
   return(result);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 0310 	bic.w	r3, r3, #16
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	623a      	str	r2, [r7, #32]
 8005228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	69f9      	ldr	r1, [r7, #28]
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61bb      	str	r3, [r7, #24]
   return(result);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0310 	and.w	r3, r3, #16
 8005244:	2b10      	cmp	r3, #16
 8005246:	d10a      	bne.n	800525e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fa5b 	bl	8000720 <HAL_UARTEx_RxEventCallback>
 800526a:	e002      	b.n	8005272 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fc93 	bl	8004b98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e002      	b.n	800527c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
  }
}
 800527c:	4618      	mov	r0, r3
 800527e:	3730      	adds	r7, #48	; 0x30
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005288:	b0c0      	sub	sp, #256	; 0x100
 800528a:	af00      	add	r7, sp, #0
 800528c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	ea40 0301 	orr.w	r3, r0, r1
 80052ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052dc:	f021 010c 	bic.w	r1, r1, #12
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	ea40 0301 	orr.w	r3, r0, r1
 800530a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b8f      	ldr	r3, [pc, #572]	; (8005550 <UART_SetConfig+0x2cc>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d005      	beq.n	8005324 <UART_SetConfig+0xa0>
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b8d      	ldr	r3, [pc, #564]	; (8005554 <UART_SetConfig+0x2d0>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d104      	bne.n	800532e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fd feb0 	bl	8003088 <HAL_RCC_GetPCLK2Freq>
 8005328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800532c:	e003      	b.n	8005336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7fd fe97 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	f040 810c 	bne.w	800555c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800534e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	1891      	adds	r1, r2, r2
 800535c:	65b9      	str	r1, [r7, #88]	; 0x58
 800535e:	415b      	adcs	r3, r3
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005366:	4621      	mov	r1, r4
 8005368:	eb12 0801 	adds.w	r8, r2, r1
 800536c:	4629      	mov	r1, r5
 800536e:	eb43 0901 	adc.w	r9, r3, r1
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800537e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005386:	4690      	mov	r8, r2
 8005388:	4699      	mov	r9, r3
 800538a:	4623      	mov	r3, r4
 800538c:	eb18 0303 	adds.w	r3, r8, r3
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053b2:	460b      	mov	r3, r1
 80053b4:	18db      	adds	r3, r3, r3
 80053b6:	653b      	str	r3, [r7, #80]	; 0x50
 80053b8:	4613      	mov	r3, r2
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	657b      	str	r3, [r7, #84]	; 0x54
 80053c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053c8:	f7fa ff52 	bl	8000270 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <UART_SetConfig+0x2d4>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053f4:	415b      	adcs	r3, r3
 80053f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053fc:	4641      	mov	r1, r8
 80053fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005402:	4649      	mov	r1, r9
 8005404:	eb43 0b01 	adc.w	fp, r3, r1
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541c:	4692      	mov	sl, r2
 800541e:	469b      	mov	fp, r3
 8005420:	4643      	mov	r3, r8
 8005422:	eb1a 0303 	adds.w	r3, sl, r3
 8005426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800542a:	464b      	mov	r3, r9
 800542c:	eb4b 0303 	adc.w	r3, fp, r3
 8005430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005448:	460b      	mov	r3, r1
 800544a:	18db      	adds	r3, r3, r3
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
 800544e:	4613      	mov	r3, r2
 8005450:	eb42 0303 	adc.w	r3, r2, r3
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
 8005456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800545a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800545e:	f7fa ff07 	bl	8000270 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4611      	mov	r1, r2
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2264      	movs	r2, #100	; 0x64
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	1acb      	subs	r3, r1, r3
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <UART_SetConfig+0x2d4>)
 8005480:	fba3 2302 	umull	r2, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800548c:	441c      	add	r4, r3
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800549c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054a8:	415b      	adcs	r3, r3
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054b0:	4641      	mov	r1, r8
 80054b2:	1851      	adds	r1, r2, r1
 80054b4:	6339      	str	r1, [r7, #48]	; 0x30
 80054b6:	4649      	mov	r1, r9
 80054b8:	414b      	adcs	r3, r1
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054c8:	4659      	mov	r1, fp
 80054ca:	00cb      	lsls	r3, r1, #3
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d2:	4651      	mov	r1, sl
 80054d4:	00ca      	lsls	r2, r1, #3
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	4642      	mov	r2, r8
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e4:	464b      	mov	r3, r9
 80054e6:	460a      	mov	r2, r1
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800551a:	f7fa fea9 	bl	8000270 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <UART_SetConfig+0x2d4>)
 8005524:	fba3 1302 	umull	r1, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	2164      	movs	r1, #100	; 0x64
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	3332      	adds	r3, #50	; 0x32
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <UART_SetConfig+0x2d4>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4422      	add	r2, r4
 800554a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800554c:	e105      	b.n	800575a <UART_SetConfig+0x4d6>
 800554e:	bf00      	nop
 8005550:	40011000 	.word	0x40011000
 8005554:	40011400 	.word	0x40011400
 8005558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800556a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	1891      	adds	r1, r2, r2
 8005574:	6239      	str	r1, [r7, #32]
 8005576:	415b      	adcs	r3, r3
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557e:	4641      	mov	r1, r8
 8005580:	1854      	adds	r4, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0501 	adc.w	r5, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	00eb      	lsls	r3, r5, #3
 8005592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005596:	00e2      	lsls	r2, r4, #3
 8005598:	4614      	mov	r4, r2
 800559a:	461d      	mov	r5, r3
 800559c:	4643      	mov	r3, r8
 800559e:	18e3      	adds	r3, r4, r3
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055a4:	464b      	mov	r3, r9
 80055a6:	eb45 0303 	adc.w	r3, r5, r3
 80055aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ca:	4629      	mov	r1, r5
 80055cc:	008b      	lsls	r3, r1, #2
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d4:	4621      	mov	r1, r4
 80055d6:	008a      	lsls	r2, r1, #2
 80055d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055dc:	f7fa fe48 	bl	8000270 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b60      	ldr	r3, [pc, #384]	; (8005768 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	61b9      	str	r1, [r7, #24]
 8005608:	415b      	adcs	r3, r3
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	4641      	mov	r1, r8
 8005612:	1851      	adds	r1, r2, r1
 8005614:	6139      	str	r1, [r7, #16]
 8005616:	4649      	mov	r1, r9
 8005618:	414b      	adcs	r3, r1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005628:	4659      	mov	r1, fp
 800562a:	00cb      	lsls	r3, r1, #3
 800562c:	4651      	mov	r1, sl
 800562e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005632:	4651      	mov	r1, sl
 8005634:	00ca      	lsls	r2, r1, #3
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	4603      	mov	r3, r0
 800563c:	4642      	mov	r2, r8
 800563e:	189b      	adds	r3, r3, r2
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005644:	464b      	mov	r3, r9
 8005646:	460a      	mov	r2, r1
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	67bb      	str	r3, [r7, #120]	; 0x78
 800565a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005668:	4649      	mov	r1, r9
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	4641      	mov	r1, r8
 800566e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005672:	4641      	mov	r1, r8
 8005674:	008a      	lsls	r2, r1, #2
 8005676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800567a:	f7fa fdf9 	bl	8000270 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4b39      	ldr	r3, [pc, #228]	; (8005768 <UART_SetConfig+0x4e4>)
 8005684:	fba3 1302 	umull	r1, r3, r3, r2
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	2164      	movs	r1, #100	; 0x64
 800568c:	fb01 f303 	mul.w	r3, r1, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	3332      	adds	r3, #50	; 0x32
 8005696:	4a34      	ldr	r2, [pc, #208]	; (8005768 <UART_SetConfig+0x4e4>)
 8005698:	fba2 2303 	umull	r2, r3, r2, r3
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a2:	441c      	add	r4, r3
 80056a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a8:	2200      	movs	r2, #0
 80056aa:	673b      	str	r3, [r7, #112]	; 0x70
 80056ac:	677a      	str	r2, [r7, #116]	; 0x74
 80056ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056b2:	4642      	mov	r2, r8
 80056b4:	464b      	mov	r3, r9
 80056b6:	1891      	adds	r1, r2, r2
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	415b      	adcs	r3, r3
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c2:	4641      	mov	r1, r8
 80056c4:	1851      	adds	r1, r2, r1
 80056c6:	6039      	str	r1, [r7, #0]
 80056c8:	4649      	mov	r1, r9
 80056ca:	414b      	adcs	r3, r1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056da:	4659      	mov	r1, fp
 80056dc:	00cb      	lsls	r3, r1, #3
 80056de:	4651      	mov	r1, sl
 80056e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e4:	4651      	mov	r1, sl
 80056e6:	00ca      	lsls	r2, r1, #3
 80056e8:	4610      	mov	r0, r2
 80056ea:	4619      	mov	r1, r3
 80056ec:	4603      	mov	r3, r0
 80056ee:	4642      	mov	r2, r8
 80056f0:	189b      	adds	r3, r3, r2
 80056f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f4:	464b      	mov	r3, r9
 80056f6:	460a      	mov	r2, r1
 80056f8:	eb42 0303 	adc.w	r3, r2, r3
 80056fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	663b      	str	r3, [r7, #96]	; 0x60
 8005708:	667a      	str	r2, [r7, #100]	; 0x64
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005716:	4649      	mov	r1, r9
 8005718:	008b      	lsls	r3, r1, #2
 800571a:	4641      	mov	r1, r8
 800571c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005720:	4641      	mov	r1, r8
 8005722:	008a      	lsls	r2, r1, #2
 8005724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005728:	f7fa fda2 	bl	8000270 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <UART_SetConfig+0x4e4>)
 8005732:	fba3 1302 	umull	r1, r3, r3, r2
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	2164      	movs	r1, #100	; 0x64
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	3332      	adds	r3, #50	; 0x32
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <UART_SetConfig+0x4e4>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4422      	add	r2, r4
 8005758:	609a      	str	r2, [r3, #8]
}
 800575a:	bf00      	nop
 800575c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005760:	46bd      	mov	sp, r7
 8005762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005766:	bf00      	nop
 8005768:	51eb851f 	.word	0x51eb851f

0800576c <__errno>:
 800576c:	4b01      	ldr	r3, [pc, #4]	; (8005774 <__errno+0x8>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2000000c 	.word	0x2000000c

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4d0d      	ldr	r5, [pc, #52]	; (80057b0 <__libc_init_array+0x38>)
 800577c:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 800577e:	1b64      	subs	r4, r4, r5
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	2600      	movs	r6, #0
 8005784:	42a6      	cmp	r6, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	4d0b      	ldr	r5, [pc, #44]	; (80057b8 <__libc_init_array+0x40>)
 800578a:	4c0c      	ldr	r4, [pc, #48]	; (80057bc <__libc_init_array+0x44>)
 800578c:	f001 f824 	bl	80067d8 <_init>
 8005790:	1b64      	subs	r4, r4, r5
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	2600      	movs	r6, #0
 8005796:	42a6      	cmp	r6, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a0:	4798      	blx	r3
 80057a2:	3601      	adds	r6, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057aa:	4798      	blx	r3
 80057ac:	3601      	adds	r6, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	080068d8 	.word	0x080068d8
 80057b4:	080068d8 	.word	0x080068d8
 80057b8:	080068d8 	.word	0x080068d8
 80057bc:	080068dc 	.word	0x080068dc

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <iprintf>:
 80057d0:	b40f      	push	{r0, r1, r2, r3}
 80057d2:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <iprintf+0x2c>)
 80057d4:	b513      	push	{r0, r1, r4, lr}
 80057d6:	681c      	ldr	r4, [r3, #0]
 80057d8:	b124      	cbz	r4, 80057e4 <iprintf+0x14>
 80057da:	69a3      	ldr	r3, [r4, #24]
 80057dc:	b913      	cbnz	r3, 80057e4 <iprintf+0x14>
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 fa5e 	bl	8005ca0 <__sinit>
 80057e4:	ab05      	add	r3, sp, #20
 80057e6:	9a04      	ldr	r2, [sp, #16]
 80057e8:	68a1      	ldr	r1, [r4, #8]
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fc67 	bl	80060c0 <_vfiprintf_r>
 80057f2:	b002      	add	sp, #8
 80057f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f8:	b004      	add	sp, #16
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c

08005800 <_puts_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	460e      	mov	r6, r1
 8005804:	4605      	mov	r5, r0
 8005806:	b118      	cbz	r0, 8005810 <_puts_r+0x10>
 8005808:	6983      	ldr	r3, [r0, #24]
 800580a:	b90b      	cbnz	r3, 8005810 <_puts_r+0x10>
 800580c:	f000 fa48 	bl	8005ca0 <__sinit>
 8005810:	69ab      	ldr	r3, [r5, #24]
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	b913      	cbnz	r3, 800581c <_puts_r+0x1c>
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fa42 	bl	8005ca0 <__sinit>
 800581c:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <_puts_r+0xd0>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d120      	bne.n	8005864 <_puts_r+0x64>
 8005822:	686c      	ldr	r4, [r5, #4]
 8005824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005826:	07db      	lsls	r3, r3, #31
 8005828:	d405      	bmi.n	8005836 <_puts_r+0x36>
 800582a:	89a3      	ldrh	r3, [r4, #12]
 800582c:	0598      	lsls	r0, r3, #22
 800582e:	d402      	bmi.n	8005836 <_puts_r+0x36>
 8005830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005832:	f000 fad3 	bl	8005ddc <__retarget_lock_acquire_recursive>
 8005836:	89a3      	ldrh	r3, [r4, #12]
 8005838:	0719      	lsls	r1, r3, #28
 800583a:	d51d      	bpl.n	8005878 <_puts_r+0x78>
 800583c:	6923      	ldr	r3, [r4, #16]
 800583e:	b1db      	cbz	r3, 8005878 <_puts_r+0x78>
 8005840:	3e01      	subs	r6, #1
 8005842:	68a3      	ldr	r3, [r4, #8]
 8005844:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005848:	3b01      	subs	r3, #1
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	bb39      	cbnz	r1, 800589e <_puts_r+0x9e>
 800584e:	2b00      	cmp	r3, #0
 8005850:	da38      	bge.n	80058c4 <_puts_r+0xc4>
 8005852:	4622      	mov	r2, r4
 8005854:	210a      	movs	r1, #10
 8005856:	4628      	mov	r0, r5
 8005858:	f000 f848 	bl	80058ec <__swbuf_r>
 800585c:	3001      	adds	r0, #1
 800585e:	d011      	beq.n	8005884 <_puts_r+0x84>
 8005860:	250a      	movs	r5, #10
 8005862:	e011      	b.n	8005888 <_puts_r+0x88>
 8005864:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <_puts_r+0xd4>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d101      	bne.n	800586e <_puts_r+0x6e>
 800586a:	68ac      	ldr	r4, [r5, #8]
 800586c:	e7da      	b.n	8005824 <_puts_r+0x24>
 800586e:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <_puts_r+0xd8>)
 8005870:	429c      	cmp	r4, r3
 8005872:	bf08      	it	eq
 8005874:	68ec      	ldreq	r4, [r5, #12]
 8005876:	e7d5      	b.n	8005824 <_puts_r+0x24>
 8005878:	4621      	mov	r1, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f888 	bl	8005990 <__swsetup_r>
 8005880:	2800      	cmp	r0, #0
 8005882:	d0dd      	beq.n	8005840 <_puts_r+0x40>
 8005884:	f04f 35ff 	mov.w	r5, #4294967295
 8005888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800588a:	07da      	lsls	r2, r3, #31
 800588c:	d405      	bmi.n	800589a <_puts_r+0x9a>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	059b      	lsls	r3, r3, #22
 8005892:	d402      	bmi.n	800589a <_puts_r+0x9a>
 8005894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005896:	f000 faa2 	bl	8005dde <__retarget_lock_release_recursive>
 800589a:	4628      	mov	r0, r5
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da04      	bge.n	80058ac <_puts_r+0xac>
 80058a2:	69a2      	ldr	r2, [r4, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	dc06      	bgt.n	80058b6 <_puts_r+0xb6>
 80058a8:	290a      	cmp	r1, #10
 80058aa:	d004      	beq.n	80058b6 <_puts_r+0xb6>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	6022      	str	r2, [r4, #0]
 80058b2:	7019      	strb	r1, [r3, #0]
 80058b4:	e7c5      	b.n	8005842 <_puts_r+0x42>
 80058b6:	4622      	mov	r2, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f817 	bl	80058ec <__swbuf_r>
 80058be:	3001      	adds	r0, #1
 80058c0:	d1bf      	bne.n	8005842 <_puts_r+0x42>
 80058c2:	e7df      	b.n	8005884 <_puts_r+0x84>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	250a      	movs	r5, #10
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	6022      	str	r2, [r4, #0]
 80058cc:	701d      	strb	r5, [r3, #0]
 80058ce:	e7db      	b.n	8005888 <_puts_r+0x88>
 80058d0:	0800685c 	.word	0x0800685c
 80058d4:	0800687c 	.word	0x0800687c
 80058d8:	0800683c 	.word	0x0800683c

080058dc <puts>:
 80058dc:	4b02      	ldr	r3, [pc, #8]	; (80058e8 <puts+0xc>)
 80058de:	4601      	mov	r1, r0
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f7ff bf8d 	b.w	8005800 <_puts_r>
 80058e6:	bf00      	nop
 80058e8:	2000000c 	.word	0x2000000c

080058ec <__swbuf_r>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	460e      	mov	r6, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	4605      	mov	r5, r0
 80058f4:	b118      	cbz	r0, 80058fe <__swbuf_r+0x12>
 80058f6:	6983      	ldr	r3, [r0, #24]
 80058f8:	b90b      	cbnz	r3, 80058fe <__swbuf_r+0x12>
 80058fa:	f000 f9d1 	bl	8005ca0 <__sinit>
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <__swbuf_r+0x98>)
 8005900:	429c      	cmp	r4, r3
 8005902:	d12b      	bne.n	800595c <__swbuf_r+0x70>
 8005904:	686c      	ldr	r4, [r5, #4]
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	071a      	lsls	r2, r3, #28
 800590e:	d52f      	bpl.n	8005970 <__swbuf_r+0x84>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	b36b      	cbz	r3, 8005970 <__swbuf_r+0x84>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	1ac0      	subs	r0, r0, r3
 800591a:	6963      	ldr	r3, [r4, #20]
 800591c:	b2f6      	uxtb	r6, r6
 800591e:	4283      	cmp	r3, r0
 8005920:	4637      	mov	r7, r6
 8005922:	dc04      	bgt.n	800592e <__swbuf_r+0x42>
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f926 	bl	8005b78 <_fflush_r>
 800592c:	bb30      	cbnz	r0, 800597c <__swbuf_r+0x90>
 800592e:	68a3      	ldr	r3, [r4, #8]
 8005930:	3b01      	subs	r3, #1
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	701e      	strb	r6, [r3, #0]
 800593c:	6963      	ldr	r3, [r4, #20]
 800593e:	3001      	adds	r0, #1
 8005940:	4283      	cmp	r3, r0
 8005942:	d004      	beq.n	800594e <__swbuf_r+0x62>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	07db      	lsls	r3, r3, #31
 8005948:	d506      	bpl.n	8005958 <__swbuf_r+0x6c>
 800594a:	2e0a      	cmp	r6, #10
 800594c:	d104      	bne.n	8005958 <__swbuf_r+0x6c>
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 f911 	bl	8005b78 <_fflush_r>
 8005956:	b988      	cbnz	r0, 800597c <__swbuf_r+0x90>
 8005958:	4638      	mov	r0, r7
 800595a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <__swbuf_r+0x9c>)
 800595e:	429c      	cmp	r4, r3
 8005960:	d101      	bne.n	8005966 <__swbuf_r+0x7a>
 8005962:	68ac      	ldr	r4, [r5, #8]
 8005964:	e7cf      	b.n	8005906 <__swbuf_r+0x1a>
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <__swbuf_r+0xa0>)
 8005968:	429c      	cmp	r4, r3
 800596a:	bf08      	it	eq
 800596c:	68ec      	ldreq	r4, [r5, #12]
 800596e:	e7ca      	b.n	8005906 <__swbuf_r+0x1a>
 8005970:	4621      	mov	r1, r4
 8005972:	4628      	mov	r0, r5
 8005974:	f000 f80c 	bl	8005990 <__swsetup_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	d0cb      	beq.n	8005914 <__swbuf_r+0x28>
 800597c:	f04f 37ff 	mov.w	r7, #4294967295
 8005980:	e7ea      	b.n	8005958 <__swbuf_r+0x6c>
 8005982:	bf00      	nop
 8005984:	0800685c 	.word	0x0800685c
 8005988:	0800687c 	.word	0x0800687c
 800598c:	0800683c 	.word	0x0800683c

08005990 <__swsetup_r>:
 8005990:	4b32      	ldr	r3, [pc, #200]	; (8005a5c <__swsetup_r+0xcc>)
 8005992:	b570      	push	{r4, r5, r6, lr}
 8005994:	681d      	ldr	r5, [r3, #0]
 8005996:	4606      	mov	r6, r0
 8005998:	460c      	mov	r4, r1
 800599a:	b125      	cbz	r5, 80059a6 <__swsetup_r+0x16>
 800599c:	69ab      	ldr	r3, [r5, #24]
 800599e:	b913      	cbnz	r3, 80059a6 <__swsetup_r+0x16>
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f97d 	bl	8005ca0 <__sinit>
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <__swsetup_r+0xd0>)
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d10f      	bne.n	80059cc <__swsetup_r+0x3c>
 80059ac:	686c      	ldr	r4, [r5, #4]
 80059ae:	89a3      	ldrh	r3, [r4, #12]
 80059b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059b4:	0719      	lsls	r1, r3, #28
 80059b6:	d42c      	bmi.n	8005a12 <__swsetup_r+0x82>
 80059b8:	06dd      	lsls	r5, r3, #27
 80059ba:	d411      	bmi.n	80059e0 <__swsetup_r+0x50>
 80059bc:	2309      	movs	r3, #9
 80059be:	6033      	str	r3, [r6, #0]
 80059c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	e03e      	b.n	8005a4a <__swsetup_r+0xba>
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <__swsetup_r+0xd4>)
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d101      	bne.n	80059d6 <__swsetup_r+0x46>
 80059d2:	68ac      	ldr	r4, [r5, #8]
 80059d4:	e7eb      	b.n	80059ae <__swsetup_r+0x1e>
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <__swsetup_r+0xd8>)
 80059d8:	429c      	cmp	r4, r3
 80059da:	bf08      	it	eq
 80059dc:	68ec      	ldreq	r4, [r5, #12]
 80059de:	e7e6      	b.n	80059ae <__swsetup_r+0x1e>
 80059e0:	0758      	lsls	r0, r3, #29
 80059e2:	d512      	bpl.n	8005a0a <__swsetup_r+0x7a>
 80059e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059e6:	b141      	cbz	r1, 80059fa <__swsetup_r+0x6a>
 80059e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ec:	4299      	cmp	r1, r3
 80059ee:	d002      	beq.n	80059f6 <__swsetup_r+0x66>
 80059f0:	4630      	mov	r0, r6
 80059f2:	f000 fa5b 	bl	8005eac <_free_r>
 80059f6:	2300      	movs	r3, #0
 80059f8:	6363      	str	r3, [r4, #52]	; 0x34
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	b94b      	cbnz	r3, 8005a2a <__swsetup_r+0x9a>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a20:	d003      	beq.n	8005a2a <__swsetup_r+0x9a>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 fa01 	bl	8005e2c <__smakebuf_r>
 8005a2a:	89a0      	ldrh	r0, [r4, #12]
 8005a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a30:	f010 0301 	ands.w	r3, r0, #1
 8005a34:	d00a      	beq.n	8005a4c <__swsetup_r+0xbc>
 8005a36:	2300      	movs	r3, #0
 8005a38:	60a3      	str	r3, [r4, #8]
 8005a3a:	6963      	ldr	r3, [r4, #20]
 8005a3c:	425b      	negs	r3, r3
 8005a3e:	61a3      	str	r3, [r4, #24]
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	b943      	cbnz	r3, 8005a56 <__swsetup_r+0xc6>
 8005a44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a48:	d1ba      	bne.n	80059c0 <__swsetup_r+0x30>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	0781      	lsls	r1, r0, #30
 8005a4e:	bf58      	it	pl
 8005a50:	6963      	ldrpl	r3, [r4, #20]
 8005a52:	60a3      	str	r3, [r4, #8]
 8005a54:	e7f4      	b.n	8005a40 <__swsetup_r+0xb0>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e7f7      	b.n	8005a4a <__swsetup_r+0xba>
 8005a5a:	bf00      	nop
 8005a5c:	2000000c 	.word	0x2000000c
 8005a60:	0800685c 	.word	0x0800685c
 8005a64:	0800687c 	.word	0x0800687c
 8005a68:	0800683c 	.word	0x0800683c

08005a6c <__sflush_r>:
 8005a6c:	898a      	ldrh	r2, [r1, #12]
 8005a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a72:	4605      	mov	r5, r0
 8005a74:	0710      	lsls	r0, r2, #28
 8005a76:	460c      	mov	r4, r1
 8005a78:	d458      	bmi.n	8005b2c <__sflush_r+0xc0>
 8005a7a:	684b      	ldr	r3, [r1, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dc05      	bgt.n	8005a8c <__sflush_r+0x20>
 8005a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	dc02      	bgt.n	8005a8c <__sflush_r+0x20>
 8005a86:	2000      	movs	r0, #0
 8005a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	d0f9      	beq.n	8005a86 <__sflush_r+0x1a>
 8005a92:	2300      	movs	r3, #0
 8005a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a98:	682f      	ldr	r7, [r5, #0]
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	d032      	beq.n	8005b04 <__sflush_r+0x98>
 8005a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	075a      	lsls	r2, r3, #29
 8005aa4:	d505      	bpl.n	8005ab2 <__sflush_r+0x46>
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	1ac0      	subs	r0, r0, r3
 8005aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aac:	b10b      	cbz	r3, 8005ab2 <__sflush_r+0x46>
 8005aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ab0:	1ac0      	subs	r0, r0, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ab8:	6a21      	ldr	r1, [r4, #32]
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b0      	blx	r6
 8005abe:	1c43      	adds	r3, r0, #1
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	d106      	bne.n	8005ad2 <__sflush_r+0x66>
 8005ac4:	6829      	ldr	r1, [r5, #0]
 8005ac6:	291d      	cmp	r1, #29
 8005ac8:	d82c      	bhi.n	8005b24 <__sflush_r+0xb8>
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <__sflush_r+0x108>)
 8005acc:	40ca      	lsrs	r2, r1
 8005ace:	07d6      	lsls	r6, r2, #31
 8005ad0:	d528      	bpl.n	8005b24 <__sflush_r+0xb8>
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	6062      	str	r2, [r4, #4]
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	6922      	ldr	r2, [r4, #16]
 8005ada:	6022      	str	r2, [r4, #0]
 8005adc:	d504      	bpl.n	8005ae8 <__sflush_r+0x7c>
 8005ade:	1c42      	adds	r2, r0, #1
 8005ae0:	d101      	bne.n	8005ae6 <__sflush_r+0x7a>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	b903      	cbnz	r3, 8005ae8 <__sflush_r+0x7c>
 8005ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8005ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aea:	602f      	str	r7, [r5, #0]
 8005aec:	2900      	cmp	r1, #0
 8005aee:	d0ca      	beq.n	8005a86 <__sflush_r+0x1a>
 8005af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af4:	4299      	cmp	r1, r3
 8005af6:	d002      	beq.n	8005afe <__sflush_r+0x92>
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 f9d7 	bl	8005eac <_free_r>
 8005afe:	2000      	movs	r0, #0
 8005b00:	6360      	str	r0, [r4, #52]	; 0x34
 8005b02:	e7c1      	b.n	8005a88 <__sflush_r+0x1c>
 8005b04:	6a21      	ldr	r1, [r4, #32]
 8005b06:	2301      	movs	r3, #1
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b0      	blx	r6
 8005b0c:	1c41      	adds	r1, r0, #1
 8005b0e:	d1c7      	bne.n	8005aa0 <__sflush_r+0x34>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0c4      	beq.n	8005aa0 <__sflush_r+0x34>
 8005b16:	2b1d      	cmp	r3, #29
 8005b18:	d001      	beq.n	8005b1e <__sflush_r+0xb2>
 8005b1a:	2b16      	cmp	r3, #22
 8005b1c:	d101      	bne.n	8005b22 <__sflush_r+0xb6>
 8005b1e:	602f      	str	r7, [r5, #0]
 8005b20:	e7b1      	b.n	8005a86 <__sflush_r+0x1a>
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	e7ad      	b.n	8005a88 <__sflush_r+0x1c>
 8005b2c:	690f      	ldr	r7, [r1, #16]
 8005b2e:	2f00      	cmp	r7, #0
 8005b30:	d0a9      	beq.n	8005a86 <__sflush_r+0x1a>
 8005b32:	0793      	lsls	r3, r2, #30
 8005b34:	680e      	ldr	r6, [r1, #0]
 8005b36:	bf08      	it	eq
 8005b38:	694b      	ldreq	r3, [r1, #20]
 8005b3a:	600f      	str	r7, [r1, #0]
 8005b3c:	bf18      	it	ne
 8005b3e:	2300      	movne	r3, #0
 8005b40:	eba6 0807 	sub.w	r8, r6, r7
 8005b44:	608b      	str	r3, [r1, #8]
 8005b46:	f1b8 0f00 	cmp.w	r8, #0
 8005b4a:	dd9c      	ble.n	8005a86 <__sflush_r+0x1a>
 8005b4c:	6a21      	ldr	r1, [r4, #32]
 8005b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b50:	4643      	mov	r3, r8
 8005b52:	463a      	mov	r2, r7
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b0      	blx	r6
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	dc06      	bgt.n	8005b6a <__sflush_r+0xfe>
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e78e      	b.n	8005a88 <__sflush_r+0x1c>
 8005b6a:	4407      	add	r7, r0
 8005b6c:	eba8 0800 	sub.w	r8, r8, r0
 8005b70:	e7e9      	b.n	8005b46 <__sflush_r+0xda>
 8005b72:	bf00      	nop
 8005b74:	20400001 	.word	0x20400001

08005b78 <_fflush_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	690b      	ldr	r3, [r1, #16]
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	b913      	cbnz	r3, 8005b88 <_fflush_r+0x10>
 8005b82:	2500      	movs	r5, #0
 8005b84:	4628      	mov	r0, r5
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	b118      	cbz	r0, 8005b92 <_fflush_r+0x1a>
 8005b8a:	6983      	ldr	r3, [r0, #24]
 8005b8c:	b90b      	cbnz	r3, 8005b92 <_fflush_r+0x1a>
 8005b8e:	f000 f887 	bl	8005ca0 <__sinit>
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <_fflush_r+0x6c>)
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d11b      	bne.n	8005bd0 <_fflush_r+0x58>
 8005b98:	686c      	ldr	r4, [r5, #4]
 8005b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ef      	beq.n	8005b82 <_fflush_r+0xa>
 8005ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ba4:	07d0      	lsls	r0, r2, #31
 8005ba6:	d404      	bmi.n	8005bb2 <_fflush_r+0x3a>
 8005ba8:	0599      	lsls	r1, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_fflush_r+0x3a>
 8005bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bae:	f000 f915 	bl	8005ddc <__retarget_lock_acquire_recursive>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7ff ff59 	bl	8005a6c <__sflush_r>
 8005bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bbc:	07da      	lsls	r2, r3, #31
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	d4e0      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d4dd      	bmi.n	8005b84 <_fflush_r+0xc>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bca:	f000 f908 	bl	8005dde <__retarget_lock_release_recursive>
 8005bce:	e7d9      	b.n	8005b84 <_fflush_r+0xc>
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_fflush_r+0x70>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d101      	bne.n	8005bda <_fflush_r+0x62>
 8005bd6:	68ac      	ldr	r4, [r5, #8]
 8005bd8:	e7df      	b.n	8005b9a <_fflush_r+0x22>
 8005bda:	4b04      	ldr	r3, [pc, #16]	; (8005bec <_fflush_r+0x74>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	bf08      	it	eq
 8005be0:	68ec      	ldreq	r4, [r5, #12]
 8005be2:	e7da      	b.n	8005b9a <_fflush_r+0x22>
 8005be4:	0800685c 	.word	0x0800685c
 8005be8:	0800687c 	.word	0x0800687c
 8005bec:	0800683c 	.word	0x0800683c

08005bf0 <std>:
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	b510      	push	{r4, lr}
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bfe:	6083      	str	r3, [r0, #8]
 8005c00:	8181      	strh	r1, [r0, #12]
 8005c02:	6643      	str	r3, [r0, #100]	; 0x64
 8005c04:	81c2      	strh	r2, [r0, #14]
 8005c06:	6183      	str	r3, [r0, #24]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	2208      	movs	r2, #8
 8005c0c:	305c      	adds	r0, #92	; 0x5c
 8005c0e:	f7ff fdd7 	bl	80057c0 <memset>
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <std+0x38>)
 8005c14:	6263      	str	r3, [r4, #36]	; 0x24
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <std+0x3c>)
 8005c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <std+0x40>)
 8005c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <std+0x44>)
 8005c20:	6224      	str	r4, [r4, #32]
 8005c22:	6323      	str	r3, [r4, #48]	; 0x30
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	08006669 	.word	0x08006669
 8005c2c:	0800668b 	.word	0x0800668b
 8005c30:	080066c3 	.word	0x080066c3
 8005c34:	080066e7 	.word	0x080066e7

08005c38 <_cleanup_r>:
 8005c38:	4901      	ldr	r1, [pc, #4]	; (8005c40 <_cleanup_r+0x8>)
 8005c3a:	f000 b8af 	b.w	8005d9c <_fwalk_reent>
 8005c3e:	bf00      	nop
 8005c40:	08005b79 	.word	0x08005b79

08005c44 <__sfmoreglue>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	2268      	movs	r2, #104	; 0x68
 8005c48:	1e4d      	subs	r5, r1, #1
 8005c4a:	4355      	muls	r5, r2
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c52:	f000 f997 	bl	8005f84 <_malloc_r>
 8005c56:	4604      	mov	r4, r0
 8005c58:	b140      	cbz	r0, 8005c6c <__sfmoreglue+0x28>
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c60:	300c      	adds	r0, #12
 8005c62:	60a0      	str	r0, [r4, #8]
 8005c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c68:	f7ff fdaa 	bl	80057c0 <memset>
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}

08005c70 <__sfp_lock_acquire>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__sfp_lock_acquire+0x8>)
 8005c72:	f000 b8b3 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 8005c76:	bf00      	nop
 8005c78:	2000037d 	.word	0x2000037d

08005c7c <__sfp_lock_release>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__sfp_lock_release+0x8>)
 8005c7e:	f000 b8ae 	b.w	8005dde <__retarget_lock_release_recursive>
 8005c82:	bf00      	nop
 8005c84:	2000037d 	.word	0x2000037d

08005c88 <__sinit_lock_acquire>:
 8005c88:	4801      	ldr	r0, [pc, #4]	; (8005c90 <__sinit_lock_acquire+0x8>)
 8005c8a:	f000 b8a7 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	2000037e 	.word	0x2000037e

08005c94 <__sinit_lock_release>:
 8005c94:	4801      	ldr	r0, [pc, #4]	; (8005c9c <__sinit_lock_release+0x8>)
 8005c96:	f000 b8a2 	b.w	8005dde <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	2000037e 	.word	0x2000037e

08005ca0 <__sinit>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	f7ff fff0 	bl	8005c88 <__sinit_lock_acquire>
 8005ca8:	69a3      	ldr	r3, [r4, #24]
 8005caa:	b11b      	cbz	r3, 8005cb4 <__sinit+0x14>
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f7ff bff0 	b.w	8005c94 <__sinit_lock_release>
 8005cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8005cba:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <__sinit+0x68>)
 8005cbc:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <__sinit+0x6c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	bf04      	itt	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	61a3      	streq	r3, [r4, #24]
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 f820 	bl	8005d10 <__sfp>
 8005cd0:	6060      	str	r0, [r4, #4]
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 f81c 	bl	8005d10 <__sfp>
 8005cd8:	60a0      	str	r0, [r4, #8]
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f000 f818 	bl	8005d10 <__sfp>
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60e0      	str	r0, [r4, #12]
 8005ce4:	2104      	movs	r1, #4
 8005ce6:	6860      	ldr	r0, [r4, #4]
 8005ce8:	f7ff ff82 	bl	8005bf0 <std>
 8005cec:	68a0      	ldr	r0, [r4, #8]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	2109      	movs	r1, #9
 8005cf2:	f7ff ff7d 	bl	8005bf0 <std>
 8005cf6:	68e0      	ldr	r0, [r4, #12]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	2112      	movs	r1, #18
 8005cfc:	f7ff ff78 	bl	8005bf0 <std>
 8005d00:	2301      	movs	r3, #1
 8005d02:	61a3      	str	r3, [r4, #24]
 8005d04:	e7d2      	b.n	8005cac <__sinit+0xc>
 8005d06:	bf00      	nop
 8005d08:	08006838 	.word	0x08006838
 8005d0c:	08005c39 	.word	0x08005c39

08005d10 <__sfp>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	4607      	mov	r7, r0
 8005d14:	f7ff ffac 	bl	8005c70 <__sfp_lock_acquire>
 8005d18:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <__sfp+0x84>)
 8005d1a:	681e      	ldr	r6, [r3, #0]
 8005d1c:	69b3      	ldr	r3, [r6, #24]
 8005d1e:	b913      	cbnz	r3, 8005d26 <__sfp+0x16>
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff ffbd 	bl	8005ca0 <__sinit>
 8005d26:	3648      	adds	r6, #72	; 0x48
 8005d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	d503      	bpl.n	8005d38 <__sfp+0x28>
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	b30b      	cbz	r3, 8005d78 <__sfp+0x68>
 8005d34:	6836      	ldr	r6, [r6, #0]
 8005d36:	e7f7      	b.n	8005d28 <__sfp+0x18>
 8005d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d3c:	b9d5      	cbnz	r5, 8005d74 <__sfp+0x64>
 8005d3e:	4b16      	ldr	r3, [pc, #88]	; (8005d98 <__sfp+0x88>)
 8005d40:	60e3      	str	r3, [r4, #12]
 8005d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d46:	6665      	str	r5, [r4, #100]	; 0x64
 8005d48:	f000 f847 	bl	8005dda <__retarget_lock_init_recursive>
 8005d4c:	f7ff ff96 	bl	8005c7c <__sfp_lock_release>
 8005d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d58:	6025      	str	r5, [r4, #0]
 8005d5a:	61a5      	str	r5, [r4, #24]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d64:	f7ff fd2c 	bl	80057c0 <memset>
 8005d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d70:	4620      	mov	r0, r4
 8005d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d74:	3468      	adds	r4, #104	; 0x68
 8005d76:	e7d9      	b.n	8005d2c <__sfp+0x1c>
 8005d78:	2104      	movs	r1, #4
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7ff ff62 	bl	8005c44 <__sfmoreglue>
 8005d80:	4604      	mov	r4, r0
 8005d82:	6030      	str	r0, [r6, #0]
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d1d5      	bne.n	8005d34 <__sfp+0x24>
 8005d88:	f7ff ff78 	bl	8005c7c <__sfp_lock_release>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	e7ee      	b.n	8005d70 <__sfp+0x60>
 8005d92:	bf00      	nop
 8005d94:	08006838 	.word	0x08006838
 8005d98:	ffff0001 	.word	0xffff0001

08005d9c <_fwalk_reent>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4606      	mov	r6, r0
 8005da2:	4688      	mov	r8, r1
 8005da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005da8:	2700      	movs	r7, #0
 8005daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dae:	f1b9 0901 	subs.w	r9, r9, #1
 8005db2:	d505      	bpl.n	8005dc0 <_fwalk_reent+0x24>
 8005db4:	6824      	ldr	r4, [r4, #0]
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	d1f7      	bne.n	8005daa <_fwalk_reent+0xe>
 8005dba:	4638      	mov	r0, r7
 8005dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc0:	89ab      	ldrh	r3, [r5, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d907      	bls.n	8005dd6 <_fwalk_reent+0x3a>
 8005dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	d003      	beq.n	8005dd6 <_fwalk_reent+0x3a>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	47c0      	blx	r8
 8005dd4:	4307      	orrs	r7, r0
 8005dd6:	3568      	adds	r5, #104	; 0x68
 8005dd8:	e7e9      	b.n	8005dae <_fwalk_reent+0x12>

08005dda <__retarget_lock_init_recursive>:
 8005dda:	4770      	bx	lr

08005ddc <__retarget_lock_acquire_recursive>:
 8005ddc:	4770      	bx	lr

08005dde <__retarget_lock_release_recursive>:
 8005dde:	4770      	bx	lr

08005de0 <__swhatbuf_r>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	460e      	mov	r6, r1
 8005de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de8:	2900      	cmp	r1, #0
 8005dea:	b096      	sub	sp, #88	; 0x58
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	da08      	bge.n	8005e04 <__swhatbuf_r+0x24>
 8005df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	602a      	str	r2, [r5, #0]
 8005dfa:	061a      	lsls	r2, r3, #24
 8005dfc:	d410      	bmi.n	8005e20 <__swhatbuf_r+0x40>
 8005dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e02:	e00e      	b.n	8005e22 <__swhatbuf_r+0x42>
 8005e04:	466a      	mov	r2, sp
 8005e06:	f000 fc95 	bl	8006734 <_fstat_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	dbf1      	blt.n	8005df2 <__swhatbuf_r+0x12>
 8005e0e:	9a01      	ldr	r2, [sp, #4]
 8005e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e18:	425a      	negs	r2, r3
 8005e1a:	415a      	adcs	r2, r3
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	e7ee      	b.n	8005dfe <__swhatbuf_r+0x1e>
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	2000      	movs	r0, #0
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	b016      	add	sp, #88	; 0x58
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e2c <__smakebuf_r>:
 8005e2c:	898b      	ldrh	r3, [r1, #12]
 8005e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e30:	079d      	lsls	r5, r3, #30
 8005e32:	4606      	mov	r6, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	d507      	bpl.n	8005e48 <__smakebuf_r+0x1c>
 8005e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2301      	movs	r3, #1
 8005e42:	6163      	str	r3, [r4, #20]
 8005e44:	b002      	add	sp, #8
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	ab01      	add	r3, sp, #4
 8005e4a:	466a      	mov	r2, sp
 8005e4c:	f7ff ffc8 	bl	8005de0 <__swhatbuf_r>
 8005e50:	9900      	ldr	r1, [sp, #0]
 8005e52:	4605      	mov	r5, r0
 8005e54:	4630      	mov	r0, r6
 8005e56:	f000 f895 	bl	8005f84 <_malloc_r>
 8005e5a:	b948      	cbnz	r0, 8005e70 <__smakebuf_r+0x44>
 8005e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e60:	059a      	lsls	r2, r3, #22
 8005e62:	d4ef      	bmi.n	8005e44 <__smakebuf_r+0x18>
 8005e64:	f023 0303 	bic.w	r3, r3, #3
 8005e68:	f043 0302 	orr.w	r3, r3, #2
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	e7e3      	b.n	8005e38 <__smakebuf_r+0xc>
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <__smakebuf_r+0x7c>)
 8005e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	6020      	str	r0, [r4, #0]
 8005e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7c:	81a3      	strh	r3, [r4, #12]
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	6163      	str	r3, [r4, #20]
 8005e82:	9b01      	ldr	r3, [sp, #4]
 8005e84:	6120      	str	r0, [r4, #16]
 8005e86:	b15b      	cbz	r3, 8005ea0 <__smakebuf_r+0x74>
 8005e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f000 fc63 	bl	8006758 <_isatty_r>
 8005e92:	b128      	cbz	r0, 8005ea0 <__smakebuf_r+0x74>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	89a0      	ldrh	r0, [r4, #12]
 8005ea2:	4305      	orrs	r5, r0
 8005ea4:	81a5      	strh	r5, [r4, #12]
 8005ea6:	e7cd      	b.n	8005e44 <__smakebuf_r+0x18>
 8005ea8:	08005c39 	.word	0x08005c39

08005eac <_free_r>:
 8005eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d044      	beq.n	8005f3c <_free_r+0x90>
 8005eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb6:	9001      	str	r0, [sp, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f1a1 0404 	sub.w	r4, r1, #4
 8005ebe:	bfb8      	it	lt
 8005ec0:	18e4      	addlt	r4, r4, r3
 8005ec2:	f000 fc6b 	bl	800679c <__malloc_lock>
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <_free_r+0x94>)
 8005ec8:	9801      	ldr	r0, [sp, #4]
 8005eca:	6813      	ldr	r3, [r2, #0]
 8005ecc:	b933      	cbnz	r3, 8005edc <_free_r+0x30>
 8005ece:	6063      	str	r3, [r4, #4]
 8005ed0:	6014      	str	r4, [r2, #0]
 8005ed2:	b003      	add	sp, #12
 8005ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed8:	f000 bc66 	b.w	80067a8 <__malloc_unlock>
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d908      	bls.n	8005ef2 <_free_r+0x46>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	bf01      	itttt	eq
 8005ee8:	6819      	ldreq	r1, [r3, #0]
 8005eea:	685b      	ldreq	r3, [r3, #4]
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	e7ed      	b.n	8005ece <_free_r+0x22>
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b10b      	cbz	r3, 8005efc <_free_r+0x50>
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	d9fa      	bls.n	8005ef2 <_free_r+0x46>
 8005efc:	6811      	ldr	r1, [r2, #0]
 8005efe:	1855      	adds	r5, r2, r1
 8005f00:	42a5      	cmp	r5, r4
 8005f02:	d10b      	bne.n	8005f1c <_free_r+0x70>
 8005f04:	6824      	ldr	r4, [r4, #0]
 8005f06:	4421      	add	r1, r4
 8005f08:	1854      	adds	r4, r2, r1
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	6011      	str	r1, [r2, #0]
 8005f0e:	d1e0      	bne.n	8005ed2 <_free_r+0x26>
 8005f10:	681c      	ldr	r4, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	4421      	add	r1, r4
 8005f18:	6011      	str	r1, [r2, #0]
 8005f1a:	e7da      	b.n	8005ed2 <_free_r+0x26>
 8005f1c:	d902      	bls.n	8005f24 <_free_r+0x78>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6003      	str	r3, [r0, #0]
 8005f22:	e7d6      	b.n	8005ed2 <_free_r+0x26>
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	1961      	adds	r1, r4, r5
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	bf04      	itt	eq
 8005f2c:	6819      	ldreq	r1, [r3, #0]
 8005f2e:	685b      	ldreq	r3, [r3, #4]
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	bf04      	itt	eq
 8005f34:	1949      	addeq	r1, r1, r5
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	6054      	str	r4, [r2, #4]
 8005f3a:	e7ca      	b.n	8005ed2 <_free_r+0x26>
 8005f3c:	b003      	add	sp, #12
 8005f3e:	bd30      	pop	{r4, r5, pc}
 8005f40:	20000380 	.word	0x20000380

08005f44 <sbrk_aligned>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4e0e      	ldr	r6, [pc, #56]	; (8005f80 <sbrk_aligned+0x3c>)
 8005f48:	460c      	mov	r4, r1
 8005f4a:	6831      	ldr	r1, [r6, #0]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	b911      	cbnz	r1, 8005f56 <sbrk_aligned+0x12>
 8005f50:	f000 fb7a 	bl	8006648 <_sbrk_r>
 8005f54:	6030      	str	r0, [r6, #0]
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f000 fb75 	bl	8006648 <_sbrk_r>
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d00a      	beq.n	8005f78 <sbrk_aligned+0x34>
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d007      	beq.n	8005f7c <sbrk_aligned+0x38>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fb6a 	bl	8006648 <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d101      	bne.n	8005f7c <sbrk_aligned+0x38>
 8005f78:	f04f 34ff 	mov.w	r4, #4294967295
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	20000384 	.word	0x20000384

08005f84 <_malloc_r>:
 8005f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f88:	1ccd      	adds	r5, r1, #3
 8005f8a:	f025 0503 	bic.w	r5, r5, #3
 8005f8e:	3508      	adds	r5, #8
 8005f90:	2d0c      	cmp	r5, #12
 8005f92:	bf38      	it	cc
 8005f94:	250c      	movcc	r5, #12
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	4607      	mov	r7, r0
 8005f9a:	db01      	blt.n	8005fa0 <_malloc_r+0x1c>
 8005f9c:	42a9      	cmp	r1, r5
 8005f9e:	d905      	bls.n	8005fac <_malloc_r+0x28>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	2600      	movs	r6, #0
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fac:	4e2e      	ldr	r6, [pc, #184]	; (8006068 <_malloc_r+0xe4>)
 8005fae:	f000 fbf5 	bl	800679c <__malloc_lock>
 8005fb2:	6833      	ldr	r3, [r6, #0]
 8005fb4:	461c      	mov	r4, r3
 8005fb6:	bb34      	cbnz	r4, 8006006 <_malloc_r+0x82>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f7ff ffc2 	bl	8005f44 <sbrk_aligned>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	d14d      	bne.n	8006062 <_malloc_r+0xde>
 8005fc6:	6834      	ldr	r4, [r6, #0]
 8005fc8:	4626      	mov	r6, r4
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	d140      	bne.n	8006050 <_malloc_r+0xcc>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	eb04 0803 	add.w	r8, r4, r3
 8005fd8:	f000 fb36 	bl	8006648 <_sbrk_r>
 8005fdc:	4580      	cmp	r8, r0
 8005fde:	d13a      	bne.n	8006056 <_malloc_r+0xd2>
 8005fe0:	6821      	ldr	r1, [r4, #0]
 8005fe2:	3503      	adds	r5, #3
 8005fe4:	1a6d      	subs	r5, r5, r1
 8005fe6:	f025 0503 	bic.w	r5, r5, #3
 8005fea:	3508      	adds	r5, #8
 8005fec:	2d0c      	cmp	r5, #12
 8005fee:	bf38      	it	cc
 8005ff0:	250c      	movcc	r5, #12
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f7ff ffa5 	bl	8005f44 <sbrk_aligned>
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d02b      	beq.n	8006056 <_malloc_r+0xd2>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	442b      	add	r3, r5
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	e00e      	b.n	8006024 <_malloc_r+0xa0>
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	1b52      	subs	r2, r2, r5
 800600a:	d41e      	bmi.n	800604a <_malloc_r+0xc6>
 800600c:	2a0b      	cmp	r2, #11
 800600e:	d916      	bls.n	800603e <_malloc_r+0xba>
 8006010:	1961      	adds	r1, r4, r5
 8006012:	42a3      	cmp	r3, r4
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	bf18      	it	ne
 8006018:	6059      	strne	r1, [r3, #4]
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	bf08      	it	eq
 800601e:	6031      	streq	r1, [r6, #0]
 8006020:	5162      	str	r2, [r4, r5]
 8006022:	604b      	str	r3, [r1, #4]
 8006024:	4638      	mov	r0, r7
 8006026:	f104 060b 	add.w	r6, r4, #11
 800602a:	f000 fbbd 	bl	80067a8 <__malloc_unlock>
 800602e:	f026 0607 	bic.w	r6, r6, #7
 8006032:	1d23      	adds	r3, r4, #4
 8006034:	1af2      	subs	r2, r6, r3
 8006036:	d0b6      	beq.n	8005fa6 <_malloc_r+0x22>
 8006038:	1b9b      	subs	r3, r3, r6
 800603a:	50a3      	str	r3, [r4, r2]
 800603c:	e7b3      	b.n	8005fa6 <_malloc_r+0x22>
 800603e:	6862      	ldr	r2, [r4, #4]
 8006040:	42a3      	cmp	r3, r4
 8006042:	bf0c      	ite	eq
 8006044:	6032      	streq	r2, [r6, #0]
 8006046:	605a      	strne	r2, [r3, #4]
 8006048:	e7ec      	b.n	8006024 <_malloc_r+0xa0>
 800604a:	4623      	mov	r3, r4
 800604c:	6864      	ldr	r4, [r4, #4]
 800604e:	e7b2      	b.n	8005fb6 <_malloc_r+0x32>
 8006050:	4634      	mov	r4, r6
 8006052:	6876      	ldr	r6, [r6, #4]
 8006054:	e7b9      	b.n	8005fca <_malloc_r+0x46>
 8006056:	230c      	movs	r3, #12
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	4638      	mov	r0, r7
 800605c:	f000 fba4 	bl	80067a8 <__malloc_unlock>
 8006060:	e7a1      	b.n	8005fa6 <_malloc_r+0x22>
 8006062:	6025      	str	r5, [r4, #0]
 8006064:	e7de      	b.n	8006024 <_malloc_r+0xa0>
 8006066:	bf00      	nop
 8006068:	20000380 	.word	0x20000380

0800606c <__sfputc_r>:
 800606c:	6893      	ldr	r3, [r2, #8]
 800606e:	3b01      	subs	r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	b410      	push	{r4}
 8006074:	6093      	str	r3, [r2, #8]
 8006076:	da08      	bge.n	800608a <__sfputc_r+0x1e>
 8006078:	6994      	ldr	r4, [r2, #24]
 800607a:	42a3      	cmp	r3, r4
 800607c:	db01      	blt.n	8006082 <__sfputc_r+0x16>
 800607e:	290a      	cmp	r1, #10
 8006080:	d103      	bne.n	800608a <__sfputc_r+0x1e>
 8006082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006086:	f7ff bc31 	b.w	80058ec <__swbuf_r>
 800608a:	6813      	ldr	r3, [r2, #0]
 800608c:	1c58      	adds	r0, r3, #1
 800608e:	6010      	str	r0, [r2, #0]
 8006090:	7019      	strb	r1, [r3, #0]
 8006092:	4608      	mov	r0, r1
 8006094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006098:	4770      	bx	lr

0800609a <__sfputs_r>:
 800609a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609c:	4606      	mov	r6, r0
 800609e:	460f      	mov	r7, r1
 80060a0:	4614      	mov	r4, r2
 80060a2:	18d5      	adds	r5, r2, r3
 80060a4:	42ac      	cmp	r4, r5
 80060a6:	d101      	bne.n	80060ac <__sfputs_r+0x12>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e007      	b.n	80060bc <__sfputs_r+0x22>
 80060ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b0:	463a      	mov	r2, r7
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ffda 	bl	800606c <__sfputc_r>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d1f3      	bne.n	80060a4 <__sfputs_r+0xa>
 80060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060c0 <_vfiprintf_r>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	460d      	mov	r5, r1
 80060c6:	b09d      	sub	sp, #116	; 0x74
 80060c8:	4614      	mov	r4, r2
 80060ca:	4698      	mov	r8, r3
 80060cc:	4606      	mov	r6, r0
 80060ce:	b118      	cbz	r0, 80060d8 <_vfiprintf_r+0x18>
 80060d0:	6983      	ldr	r3, [r0, #24]
 80060d2:	b90b      	cbnz	r3, 80060d8 <_vfiprintf_r+0x18>
 80060d4:	f7ff fde4 	bl	8005ca0 <__sinit>
 80060d8:	4b89      	ldr	r3, [pc, #548]	; (8006300 <_vfiprintf_r+0x240>)
 80060da:	429d      	cmp	r5, r3
 80060dc:	d11b      	bne.n	8006116 <_vfiprintf_r+0x56>
 80060de:	6875      	ldr	r5, [r6, #4]
 80060e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_vfiprintf_r+0x32>
 80060e6:	89ab      	ldrh	r3, [r5, #12]
 80060e8:	059a      	lsls	r2, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_vfiprintf_r+0x32>
 80060ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ee:	f7ff fe75 	bl	8005ddc <__retarget_lock_acquire_recursive>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	071b      	lsls	r3, r3, #28
 80060f6:	d501      	bpl.n	80060fc <_vfiprintf_r+0x3c>
 80060f8:	692b      	ldr	r3, [r5, #16]
 80060fa:	b9eb      	cbnz	r3, 8006138 <_vfiprintf_r+0x78>
 80060fc:	4629      	mov	r1, r5
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff fc46 	bl	8005990 <__swsetup_r>
 8006104:	b1c0      	cbz	r0, 8006138 <_vfiprintf_r+0x78>
 8006106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006108:	07dc      	lsls	r4, r3, #31
 800610a:	d50e      	bpl.n	800612a <_vfiprintf_r+0x6a>
 800610c:	f04f 30ff 	mov.w	r0, #4294967295
 8006110:	b01d      	add	sp, #116	; 0x74
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	4b7b      	ldr	r3, [pc, #492]	; (8006304 <_vfiprintf_r+0x244>)
 8006118:	429d      	cmp	r5, r3
 800611a:	d101      	bne.n	8006120 <_vfiprintf_r+0x60>
 800611c:	68b5      	ldr	r5, [r6, #8]
 800611e:	e7df      	b.n	80060e0 <_vfiprintf_r+0x20>
 8006120:	4b79      	ldr	r3, [pc, #484]	; (8006308 <_vfiprintf_r+0x248>)
 8006122:	429d      	cmp	r5, r3
 8006124:	bf08      	it	eq
 8006126:	68f5      	ldreq	r5, [r6, #12]
 8006128:	e7da      	b.n	80060e0 <_vfiprintf_r+0x20>
 800612a:	89ab      	ldrh	r3, [r5, #12]
 800612c:	0598      	lsls	r0, r3, #22
 800612e:	d4ed      	bmi.n	800610c <_vfiprintf_r+0x4c>
 8006130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006132:	f7ff fe54 	bl	8005dde <__retarget_lock_release_recursive>
 8006136:	e7e9      	b.n	800610c <_vfiprintf_r+0x4c>
 8006138:	2300      	movs	r3, #0
 800613a:	9309      	str	r3, [sp, #36]	; 0x24
 800613c:	2320      	movs	r3, #32
 800613e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006142:	f8cd 800c 	str.w	r8, [sp, #12]
 8006146:	2330      	movs	r3, #48	; 0x30
 8006148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800630c <_vfiprintf_r+0x24c>
 800614c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006150:	f04f 0901 	mov.w	r9, #1
 8006154:	4623      	mov	r3, r4
 8006156:	469a      	mov	sl, r3
 8006158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800615c:	b10a      	cbz	r2, 8006162 <_vfiprintf_r+0xa2>
 800615e:	2a25      	cmp	r2, #37	; 0x25
 8006160:	d1f9      	bne.n	8006156 <_vfiprintf_r+0x96>
 8006162:	ebba 0b04 	subs.w	fp, sl, r4
 8006166:	d00b      	beq.n	8006180 <_vfiprintf_r+0xc0>
 8006168:	465b      	mov	r3, fp
 800616a:	4622      	mov	r2, r4
 800616c:	4629      	mov	r1, r5
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff ff93 	bl	800609a <__sfputs_r>
 8006174:	3001      	adds	r0, #1
 8006176:	f000 80aa 	beq.w	80062ce <_vfiprintf_r+0x20e>
 800617a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617c:	445a      	add	r2, fp
 800617e:	9209      	str	r2, [sp, #36]	; 0x24
 8006180:	f89a 3000 	ldrb.w	r3, [sl]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a2 	beq.w	80062ce <_vfiprintf_r+0x20e>
 800618a:	2300      	movs	r3, #0
 800618c:	f04f 32ff 	mov.w	r2, #4294967295
 8006190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006194:	f10a 0a01 	add.w	sl, sl, #1
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	9307      	str	r3, [sp, #28]
 800619c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a0:	931a      	str	r3, [sp, #104]	; 0x68
 80061a2:	4654      	mov	r4, sl
 80061a4:	2205      	movs	r2, #5
 80061a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061aa:	4858      	ldr	r0, [pc, #352]	; (800630c <_vfiprintf_r+0x24c>)
 80061ac:	f7fa f810 	bl	80001d0 <memchr>
 80061b0:	9a04      	ldr	r2, [sp, #16]
 80061b2:	b9d8      	cbnz	r0, 80061ec <_vfiprintf_r+0x12c>
 80061b4:	06d1      	lsls	r1, r2, #27
 80061b6:	bf44      	itt	mi
 80061b8:	2320      	movmi	r3, #32
 80061ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061be:	0713      	lsls	r3, r2, #28
 80061c0:	bf44      	itt	mi
 80061c2:	232b      	movmi	r3, #43	; 0x2b
 80061c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c8:	f89a 3000 	ldrb.w	r3, [sl]
 80061cc:	2b2a      	cmp	r3, #42	; 0x2a
 80061ce:	d015      	beq.n	80061fc <_vfiprintf_r+0x13c>
 80061d0:	9a07      	ldr	r2, [sp, #28]
 80061d2:	4654      	mov	r4, sl
 80061d4:	2000      	movs	r0, #0
 80061d6:	f04f 0c0a 	mov.w	ip, #10
 80061da:	4621      	mov	r1, r4
 80061dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e0:	3b30      	subs	r3, #48	; 0x30
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d94e      	bls.n	8006284 <_vfiprintf_r+0x1c4>
 80061e6:	b1b0      	cbz	r0, 8006216 <_vfiprintf_r+0x156>
 80061e8:	9207      	str	r2, [sp, #28]
 80061ea:	e014      	b.n	8006216 <_vfiprintf_r+0x156>
 80061ec:	eba0 0308 	sub.w	r3, r0, r8
 80061f0:	fa09 f303 	lsl.w	r3, r9, r3
 80061f4:	4313      	orrs	r3, r2
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	46a2      	mov	sl, r4
 80061fa:	e7d2      	b.n	80061a2 <_vfiprintf_r+0xe2>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	1d19      	adds	r1, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	9103      	str	r1, [sp, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfbb      	ittet	lt
 8006208:	425b      	neglt	r3, r3
 800620a:	f042 0202 	orrlt.w	r2, r2, #2
 800620e:	9307      	strge	r3, [sp, #28]
 8006210:	9307      	strlt	r3, [sp, #28]
 8006212:	bfb8      	it	lt
 8006214:	9204      	strlt	r2, [sp, #16]
 8006216:	7823      	ldrb	r3, [r4, #0]
 8006218:	2b2e      	cmp	r3, #46	; 0x2e
 800621a:	d10c      	bne.n	8006236 <_vfiprintf_r+0x176>
 800621c:	7863      	ldrb	r3, [r4, #1]
 800621e:	2b2a      	cmp	r3, #42	; 0x2a
 8006220:	d135      	bne.n	800628e <_vfiprintf_r+0x1ce>
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	1d1a      	adds	r2, r3, #4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	9203      	str	r2, [sp, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfb8      	it	lt
 800622e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006232:	3402      	adds	r4, #2
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800631c <_vfiprintf_r+0x25c>
 800623a:	7821      	ldrb	r1, [r4, #0]
 800623c:	2203      	movs	r2, #3
 800623e:	4650      	mov	r0, sl
 8006240:	f7f9 ffc6 	bl	80001d0 <memchr>
 8006244:	b140      	cbz	r0, 8006258 <_vfiprintf_r+0x198>
 8006246:	2340      	movs	r3, #64	; 0x40
 8006248:	eba0 000a 	sub.w	r0, r0, sl
 800624c:	fa03 f000 	lsl.w	r0, r3, r0
 8006250:	9b04      	ldr	r3, [sp, #16]
 8006252:	4303      	orrs	r3, r0
 8006254:	3401      	adds	r4, #1
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625c:	482c      	ldr	r0, [pc, #176]	; (8006310 <_vfiprintf_r+0x250>)
 800625e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006262:	2206      	movs	r2, #6
 8006264:	f7f9 ffb4 	bl	80001d0 <memchr>
 8006268:	2800      	cmp	r0, #0
 800626a:	d03f      	beq.n	80062ec <_vfiprintf_r+0x22c>
 800626c:	4b29      	ldr	r3, [pc, #164]	; (8006314 <_vfiprintf_r+0x254>)
 800626e:	bb1b      	cbnz	r3, 80062b8 <_vfiprintf_r+0x1f8>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	3307      	adds	r3, #7
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	3308      	adds	r3, #8
 800627a:	9303      	str	r3, [sp, #12]
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	443b      	add	r3, r7
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	e767      	b.n	8006154 <_vfiprintf_r+0x94>
 8006284:	fb0c 3202 	mla	r2, ip, r2, r3
 8006288:	460c      	mov	r4, r1
 800628a:	2001      	movs	r0, #1
 800628c:	e7a5      	b.n	80061da <_vfiprintf_r+0x11a>
 800628e:	2300      	movs	r3, #0
 8006290:	3401      	adds	r4, #1
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	4619      	mov	r1, r3
 8006296:	f04f 0c0a 	mov.w	ip, #10
 800629a:	4620      	mov	r0, r4
 800629c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a0:	3a30      	subs	r2, #48	; 0x30
 80062a2:	2a09      	cmp	r2, #9
 80062a4:	d903      	bls.n	80062ae <_vfiprintf_r+0x1ee>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0c5      	beq.n	8006236 <_vfiprintf_r+0x176>
 80062aa:	9105      	str	r1, [sp, #20]
 80062ac:	e7c3      	b.n	8006236 <_vfiprintf_r+0x176>
 80062ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b2:	4604      	mov	r4, r0
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7f0      	b.n	800629a <_vfiprintf_r+0x1da>
 80062b8:	ab03      	add	r3, sp, #12
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	462a      	mov	r2, r5
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <_vfiprintf_r+0x258>)
 80062c0:	a904      	add	r1, sp, #16
 80062c2:	4630      	mov	r0, r6
 80062c4:	f3af 8000 	nop.w
 80062c8:	4607      	mov	r7, r0
 80062ca:	1c78      	adds	r0, r7, #1
 80062cc:	d1d6      	bne.n	800627c <_vfiprintf_r+0x1bc>
 80062ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d0:	07d9      	lsls	r1, r3, #31
 80062d2:	d405      	bmi.n	80062e0 <_vfiprintf_r+0x220>
 80062d4:	89ab      	ldrh	r3, [r5, #12]
 80062d6:	059a      	lsls	r2, r3, #22
 80062d8:	d402      	bmi.n	80062e0 <_vfiprintf_r+0x220>
 80062da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062dc:	f7ff fd7f 	bl	8005dde <__retarget_lock_release_recursive>
 80062e0:	89ab      	ldrh	r3, [r5, #12]
 80062e2:	065b      	lsls	r3, r3, #25
 80062e4:	f53f af12 	bmi.w	800610c <_vfiprintf_r+0x4c>
 80062e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ea:	e711      	b.n	8006110 <_vfiprintf_r+0x50>
 80062ec:	ab03      	add	r3, sp, #12
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	462a      	mov	r2, r5
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <_vfiprintf_r+0x258>)
 80062f4:	a904      	add	r1, sp, #16
 80062f6:	4630      	mov	r0, r6
 80062f8:	f000 f880 	bl	80063fc <_printf_i>
 80062fc:	e7e4      	b.n	80062c8 <_vfiprintf_r+0x208>
 80062fe:	bf00      	nop
 8006300:	0800685c 	.word	0x0800685c
 8006304:	0800687c 	.word	0x0800687c
 8006308:	0800683c 	.word	0x0800683c
 800630c:	0800689c 	.word	0x0800689c
 8006310:	080068a6 	.word	0x080068a6
 8006314:	00000000 	.word	0x00000000
 8006318:	0800609b 	.word	0x0800609b
 800631c:	080068a2 	.word	0x080068a2

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	68e5      	ldr	r5, [r4, #12]
 800638a:	6832      	ldr	r2, [r6, #0]
 800638c:	f003 0306 	and.w	r3, r3, #6
 8006390:	2b04      	cmp	r3, #4
 8006392:	bf08      	it	eq
 8006394:	1aad      	subeq	r5, r5, r2
 8006396:	68a3      	ldr	r3, [r4, #8]
 8006398:	6922      	ldr	r2, [r4, #16]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4649      	mov	r1, r9
 80063bc:	4638      	mov	r0, r7
 80063be:	47c0      	blx	r8
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	7e0f      	ldrb	r7, [r1, #24]
 8006402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006404:	2f78      	cmp	r7, #120	; 0x78
 8006406:	4691      	mov	r9, r2
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	469a      	mov	sl, r3
 800640e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	; 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d8 	beq.w	80065ce <_printf_i+0x1d2>
 800641e:	2f58      	cmp	r7, #88	; 0x58
 8006420:	f000 80a3 	beq.w	800656a <_printf_i+0x16e>
 8006424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a101      	add	r1, pc, #4	; (adr r1, 800643c <_printf_i+0x40>)
 8006438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065b5 	.word	0x080065b5
 800646c:	080064d9 	.word	0x080064d9
 8006470:	08006597 	.word	0x08006597
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065d7 	.word	0x080065d7
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d9 	.word	0x080064d9
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800659f 	.word	0x0800659f
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0a3      	b.n	80065f0 <_printf_i+0x1f4>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	6829      	ldr	r1, [r5, #0]
 80064ac:	0606      	lsls	r6, r0, #24
 80064ae:	f101 0304 	add.w	r3, r1, #4
 80064b2:	d50a      	bpl.n	80064ca <_printf_i+0xce>
 80064b4:	680e      	ldr	r6, [r1, #0]
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	da03      	bge.n	80064c4 <_printf_i+0xc8>
 80064bc:	232d      	movs	r3, #45	; 0x2d
 80064be:	4276      	negs	r6, r6
 80064c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c4:	485e      	ldr	r0, [pc, #376]	; (8006640 <_printf_i+0x244>)
 80064c6:	230a      	movs	r3, #10
 80064c8:	e019      	b.n	80064fe <_printf_i+0x102>
 80064ca:	680e      	ldr	r6, [r1, #0]
 80064cc:	602b      	str	r3, [r5, #0]
 80064ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064d2:	bf18      	it	ne
 80064d4:	b236      	sxthne	r6, r6
 80064d6:	e7ef      	b.n	80064b8 <_printf_i+0xbc>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	6820      	ldr	r0, [r4, #0]
 80064dc:	1d19      	adds	r1, r3, #4
 80064de:	6029      	str	r1, [r5, #0]
 80064e0:	0601      	lsls	r1, r0, #24
 80064e2:	d501      	bpl.n	80064e8 <_printf_i+0xec>
 80064e4:	681e      	ldr	r6, [r3, #0]
 80064e6:	e002      	b.n	80064ee <_printf_i+0xf2>
 80064e8:	0646      	lsls	r6, r0, #25
 80064ea:	d5fb      	bpl.n	80064e4 <_printf_i+0xe8>
 80064ec:	881e      	ldrh	r6, [r3, #0]
 80064ee:	4854      	ldr	r0, [pc, #336]	; (8006640 <_printf_i+0x244>)
 80064f0:	2f6f      	cmp	r7, #111	; 0x6f
 80064f2:	bf0c      	ite	eq
 80064f4:	2308      	moveq	r3, #8
 80064f6:	230a      	movne	r3, #10
 80064f8:	2100      	movs	r1, #0
 80064fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fe:	6865      	ldr	r5, [r4, #4]
 8006500:	60a5      	str	r5, [r4, #8]
 8006502:	2d00      	cmp	r5, #0
 8006504:	bfa2      	ittt	ge
 8006506:	6821      	ldrge	r1, [r4, #0]
 8006508:	f021 0104 	bicge.w	r1, r1, #4
 800650c:	6021      	strge	r1, [r4, #0]
 800650e:	b90e      	cbnz	r6, 8006514 <_printf_i+0x118>
 8006510:	2d00      	cmp	r5, #0
 8006512:	d04d      	beq.n	80065b0 <_printf_i+0x1b4>
 8006514:	4615      	mov	r5, r2
 8006516:	fbb6 f1f3 	udiv	r1, r6, r3
 800651a:	fb03 6711 	mls	r7, r3, r1, r6
 800651e:	5dc7      	ldrb	r7, [r0, r7]
 8006520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006524:	4637      	mov	r7, r6
 8006526:	42bb      	cmp	r3, r7
 8006528:	460e      	mov	r6, r1
 800652a:	d9f4      	bls.n	8006516 <_printf_i+0x11a>
 800652c:	2b08      	cmp	r3, #8
 800652e:	d10b      	bne.n	8006548 <_printf_i+0x14c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	07de      	lsls	r6, r3, #31
 8006534:	d508      	bpl.n	8006548 <_printf_i+0x14c>
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6861      	ldr	r1, [r4, #4]
 800653a:	4299      	cmp	r1, r3
 800653c:	bfde      	ittt	le
 800653e:	2330      	movle	r3, #48	; 0x30
 8006540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006548:	1b52      	subs	r2, r2, r5
 800654a:	6122      	str	r2, [r4, #16]
 800654c:	f8cd a000 	str.w	sl, [sp]
 8006550:	464b      	mov	r3, r9
 8006552:	aa03      	add	r2, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fee2 	bl	8006320 <_printf_common>
 800655c:	3001      	adds	r0, #1
 800655e:	d14c      	bne.n	80065fa <_printf_i+0x1fe>
 8006560:	f04f 30ff 	mov.w	r0, #4294967295
 8006564:	b004      	add	sp, #16
 8006566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656a:	4835      	ldr	r0, [pc, #212]	; (8006640 <_printf_i+0x244>)
 800656c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006570:	6829      	ldr	r1, [r5, #0]
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	f851 6b04 	ldr.w	r6, [r1], #4
 8006578:	6029      	str	r1, [r5, #0]
 800657a:	061d      	lsls	r5, r3, #24
 800657c:	d514      	bpl.n	80065a8 <_printf_i+0x1ac>
 800657e:	07df      	lsls	r7, r3, #31
 8006580:	bf44      	itt	mi
 8006582:	f043 0320 	orrmi.w	r3, r3, #32
 8006586:	6023      	strmi	r3, [r4, #0]
 8006588:	b91e      	cbnz	r6, 8006592 <_printf_i+0x196>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f023 0320 	bic.w	r3, r3, #32
 8006590:	6023      	str	r3, [r4, #0]
 8006592:	2310      	movs	r3, #16
 8006594:	e7b0      	b.n	80064f8 <_printf_i+0xfc>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	f043 0320 	orr.w	r3, r3, #32
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	2378      	movs	r3, #120	; 0x78
 80065a0:	4828      	ldr	r0, [pc, #160]	; (8006644 <_printf_i+0x248>)
 80065a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065a6:	e7e3      	b.n	8006570 <_printf_i+0x174>
 80065a8:	0659      	lsls	r1, r3, #25
 80065aa:	bf48      	it	mi
 80065ac:	b2b6      	uxthmi	r6, r6
 80065ae:	e7e6      	b.n	800657e <_printf_i+0x182>
 80065b0:	4615      	mov	r5, r2
 80065b2:	e7bb      	b.n	800652c <_printf_i+0x130>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	6826      	ldr	r6, [r4, #0]
 80065b8:	6961      	ldr	r1, [r4, #20]
 80065ba:	1d18      	adds	r0, r3, #4
 80065bc:	6028      	str	r0, [r5, #0]
 80065be:	0635      	lsls	r5, r6, #24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0x1cc>
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	e002      	b.n	80065ce <_printf_i+0x1d2>
 80065c8:	0670      	lsls	r0, r6, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0x1c8>
 80065cc:	8019      	strh	r1, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	4615      	mov	r5, r2
 80065d4:	e7ba      	b.n	800654c <_printf_i+0x150>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	602a      	str	r2, [r5, #0]
 80065dc:	681d      	ldr	r5, [r3, #0]
 80065de:	6862      	ldr	r2, [r4, #4]
 80065e0:	2100      	movs	r1, #0
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7f9 fdf4 	bl	80001d0 <memchr>
 80065e8:	b108      	cbz	r0, 80065ee <_printf_i+0x1f2>
 80065ea:	1b40      	subs	r0, r0, r5
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	6863      	ldr	r3, [r4, #4]
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f8:	e7a8      	b.n	800654c <_printf_i+0x150>
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4649      	mov	r1, r9
 8006600:	4640      	mov	r0, r8
 8006602:	47d0      	blx	sl
 8006604:	3001      	adds	r0, #1
 8006606:	d0ab      	beq.n	8006560 <_printf_i+0x164>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	079b      	lsls	r3, r3, #30
 800660c:	d413      	bmi.n	8006636 <_printf_i+0x23a>
 800660e:	68e0      	ldr	r0, [r4, #12]
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	4298      	cmp	r0, r3
 8006614:	bfb8      	it	lt
 8006616:	4618      	movlt	r0, r3
 8006618:	e7a4      	b.n	8006564 <_printf_i+0x168>
 800661a:	2301      	movs	r3, #1
 800661c:	4632      	mov	r2, r6
 800661e:	4649      	mov	r1, r9
 8006620:	4640      	mov	r0, r8
 8006622:	47d0      	blx	sl
 8006624:	3001      	adds	r0, #1
 8006626:	d09b      	beq.n	8006560 <_printf_i+0x164>
 8006628:	3501      	adds	r5, #1
 800662a:	68e3      	ldr	r3, [r4, #12]
 800662c:	9903      	ldr	r1, [sp, #12]
 800662e:	1a5b      	subs	r3, r3, r1
 8006630:	42ab      	cmp	r3, r5
 8006632:	dcf2      	bgt.n	800661a <_printf_i+0x21e>
 8006634:	e7eb      	b.n	800660e <_printf_i+0x212>
 8006636:	2500      	movs	r5, #0
 8006638:	f104 0619 	add.w	r6, r4, #25
 800663c:	e7f5      	b.n	800662a <_printf_i+0x22e>
 800663e:	bf00      	nop
 8006640:	080068ad 	.word	0x080068ad
 8006644:	080068be 	.word	0x080068be

08006648 <_sbrk_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_sbrk_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fb f8ce 	bl	80017f4 <_sbrk>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_sbrk_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_sbrk_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	20000388 	.word	0x20000388

08006668 <__sread>:
 8006668:	b510      	push	{r4, lr}
 800666a:	460c      	mov	r4, r1
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	f000 f8a0 	bl	80067b4 <_read_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	bfab      	itete	ge
 8006678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800667a:	89a3      	ldrhlt	r3, [r4, #12]
 800667c:	181b      	addge	r3, r3, r0
 800667e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006682:	bfac      	ite	ge
 8006684:	6563      	strge	r3, [r4, #84]	; 0x54
 8006686:	81a3      	strhlt	r3, [r4, #12]
 8006688:	bd10      	pop	{r4, pc}

0800668a <__swrite>:
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	461f      	mov	r7, r3
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	05db      	lsls	r3, r3, #23
 8006694:	4605      	mov	r5, r0
 8006696:	460c      	mov	r4, r1
 8006698:	4616      	mov	r6, r2
 800669a:	d505      	bpl.n	80066a8 <__swrite+0x1e>
 800669c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a0:	2302      	movs	r3, #2
 80066a2:	2200      	movs	r2, #0
 80066a4:	f000 f868 	bl	8006778 <_lseek_r>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	f000 b817 	b.w	80066f0 <_write_r>

080066c2 <__sseek>:
 80066c2:	b510      	push	{r4, lr}
 80066c4:	460c      	mov	r4, r1
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 f855 	bl	8006778 <_lseek_r>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	bf15      	itete	ne
 80066d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066de:	81a3      	strheq	r3, [r4, #12]
 80066e0:	bf18      	it	ne
 80066e2:	81a3      	strhne	r3, [r4, #12]
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <__sclose>:
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 b813 	b.w	8006714 <_close_r>
	...

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_write_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa fcc8 	bl	8001094 <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000388 	.word	0x20000388

08006714 <_close_r>:
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4d06      	ldr	r5, [pc, #24]	; (8006730 <_close_r+0x1c>)
 8006718:	2300      	movs	r3, #0
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	602b      	str	r3, [r5, #0]
 8006720:	f7fb f833 	bl	800178a <_close>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_close_r+0x1a>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_close_r+0x1a>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000388 	.word	0x20000388

08006734 <_fstat_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	; (8006754 <_fstat_r+0x20>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	f7fb f82e 	bl	80017a2 <_fstat>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d102      	bne.n	8006750 <_fstat_r+0x1c>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	b103      	cbz	r3, 8006750 <_fstat_r+0x1c>
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	20000388 	.word	0x20000388

08006758 <_isatty_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d06      	ldr	r5, [pc, #24]	; (8006774 <_isatty_r+0x1c>)
 800675c:	2300      	movs	r3, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	602b      	str	r3, [r5, #0]
 8006764:	f7fb f82d 	bl	80017c2 <_isatty>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_isatty_r+0x1a>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_isatty_r+0x1a>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20000388 	.word	0x20000388

08006778 <_lseek_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d07      	ldr	r5, [pc, #28]	; (8006798 <_lseek_r+0x20>)
 800677c:	4604      	mov	r4, r0
 800677e:	4608      	mov	r0, r1
 8006780:	4611      	mov	r1, r2
 8006782:	2200      	movs	r2, #0
 8006784:	602a      	str	r2, [r5, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f7fb f826 	bl	80017d8 <_lseek>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_lseek_r+0x1e>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_lseek_r+0x1e>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20000388 	.word	0x20000388

0800679c <__malloc_lock>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__malloc_lock+0x8>)
 800679e:	f7ff bb1d 	b.w	8005ddc <__retarget_lock_acquire_recursive>
 80067a2:	bf00      	nop
 80067a4:	2000037c 	.word	0x2000037c

080067a8 <__malloc_unlock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	; (80067b0 <__malloc_unlock+0x8>)
 80067aa:	f7ff bb18 	b.w	8005dde <__retarget_lock_release_recursive>
 80067ae:	bf00      	nop
 80067b0:	2000037c 	.word	0x2000037c

080067b4 <_read_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d07      	ldr	r5, [pc, #28]	; (80067d4 <_read_r+0x20>)
 80067b8:	4604      	mov	r4, r0
 80067ba:	4608      	mov	r0, r1
 80067bc:	4611      	mov	r1, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f7fa ffc4 	bl	8001750 <_read>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_read_r+0x1e>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_read_r+0x1e>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000388 	.word	0x20000388

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
