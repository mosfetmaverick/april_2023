
adc_scan_mutex_tut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800271c  0800271c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002724  08002724  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002728  08002728  00012728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800272c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002738  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002738  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006186  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bd  00000000  00000000  000261bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00027d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3f6  00000000  00000000  00028200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006dea  00000000  00000000  000465f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8835  00000000  00000000  0004d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001558  00000000  00000000  00105c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080026ec 	.word	0x080026ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080026ec 	.word	0x080026ec

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa4c 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f810 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8f2 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f8d0 	bl	8000680 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e0:	f000 f852 	bl	8000588 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, 4);
 80004e4:	2204      	movs	r2, #4
 80004e6:	4902      	ldr	r1, [pc, #8]	; (80004f0 <main+0x24>)
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x28>)
 80004ea:	f000 faf1 	bl	8000ad0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x22>
 80004f0:	20000028 	.word	0x20000028
 80004f4:	20000030 	.word	0x20000030

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b092      	sub	sp, #72	; 0x48
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	2230      	movs	r2, #48	; 0x30
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 f8e8 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2310      	movs	r3, #16
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2300      	movs	r3, #0
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800052e:	230d      	movs	r3, #13
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000532:	23c3      	movs	r3, #195	; 0xc3
 8000534:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000536:	2302      	movs	r3, #2
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800053a:	2304      	movs	r3, #4
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fca6 	bl	8001e94 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800054e:	f000 f907 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2302      	movs	r3, #2
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800055e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2103      	movs	r1, #3
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fede 	bl	8002330 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057a:	f000 f8f1 	bl	8000760 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3748      	adds	r7, #72	; 0x48
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b33      	ldr	r3, [pc, #204]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b2:	4b30      	ldr	r3, [pc, #192]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c6:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c8:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e6:	4823      	ldr	r0, [pc, #140]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e8:	f000 fa2e 	bl	8000a48 <HAL_ADC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005f2:	f000 f8b5 	bl	8000760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <MX_ADC1_Init+0xec>)
 8000608:	f000 fb52 	bl	8000cb0 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000612:	f000 f8a5 	bl	8000760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	2305      	movs	r3, #5
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_ADC1_Init+0xec>)
 8000624:	f000 fb44 	bl	8000cb0 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800062e:	f000 f897 	bl	8000760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000632:	2306      	movs	r3, #6
 8000634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000636:	2303      	movs	r3, #3
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0xec>)
 8000640:	f000 fb36 	bl	8000cb0 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800064a:	f000 f889 	bl	8000760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800064e:	2307      	movs	r3, #7
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000652:	2304      	movs	r3, #4
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0xec>)
 800065c:	f000 fb28 	bl	8000cb0 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000666:	f000 f87b 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000030 	.word	0x20000030
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x3c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x3c>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x3c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2038      	movs	r0, #56	; 0x38
 80006a8:	f000 fe81 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ac:	2038      	movs	r0, #56	; 0x38
 80006ae:	f000 fe9a 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_GPIO_Init+0x7c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_GPIO_Init+0x7c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_GPIO_Init+0x7c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_GPIO_Init+0x7c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_GPIO_Init+0x7c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_GPIO_Init+0x7c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2104      	movs	r1, #4
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x80>)
 8000714:	f001 fb8c 	bl	8001e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000718:	2304      	movs	r3, #4
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x80>)
 8000730:	f001 f9e0 	bl	8001af4 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800074c:	2104      	movs	r1, #4
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <HAL_ADC_ConvCpltCallback+0x18>)
 8000750:	f001 fb86 	bl	8001e60 <HAL_GPIO_TogglePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020000 	.word	0x40020000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x48>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x48>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x48>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_MspInit+0x48>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_MspInit+0x48>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_MspInit+0x48>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <HAL_ADC_MspInit+0xdc>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d157      	bne.n	800088a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 80007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b27      	ldr	r3, [pc, #156]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a26      	ldr	r2, [pc, #152]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <HAL_ADC_MspInit+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000812:	23f0      	movs	r3, #240	; 0xf0
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	2303      	movs	r3, #3
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	481d      	ldr	r0, [pc, #116]	; (800089c <HAL_ADC_MspInit+0xe4>)
 8000826:	f001 f965 	bl	8001af4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 800082c:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_ADC_MspInit+0xec>)
 800082e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000848:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 800084c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000850:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000858:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 800085c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000860:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800086e:	480c      	ldr	r0, [pc, #48]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000870:	f000 fdd4 	bl	800141c <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800087a:	f7ff ff71 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000882:	639a      	str	r2, [r3, #56]	; 0x38
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_ADC_MspInit+0xe8>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40012000 	.word	0x40012000
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	20000078 	.word	0x20000078
 80008a4:	40026410 	.word	0x40026410

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f88f 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA2_Stream0_IRQHandler+0x10>)
 80008fe:	f000 fe93 	bl	8001628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000078 	.word	0x20000078

0800090c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000934:	4c0b      	ldr	r4, [pc, #44]	; (8000964 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000942:	f7ff ffe3 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f001 fea5 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fdbf 	bl	80004cc <main>
  bx  lr
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800095c:	0800272c 	.word	0x0800272c
  ldr r2, =_sbss
 8000960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000964:	200000dc 	.word	0x200000dc

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 fcff 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff fee4 	bl	800076c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fd17 	bl	8001402 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 fcdf 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200000d8 	.word	0x200000d8

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	200000d8 	.word	0x200000d8

08000a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e033      	b.n	8000ac6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d109      	bne.n	8000a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fea6 	bl	80007b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d118      	bne.n	8000ab8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	f043 0202 	orr.w	r2, r3, #2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fa28 	bl	8000ef0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f023 0303 	bic.w	r3, r3, #3
 8000aae:	f043 0201 	orr.w	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab6:	e001      	b.n	8000abc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d101      	bne.n	8000aee <HAL_ADC_Start_DMA+0x1e>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e0bc      	b.n	8000c68 <HAL_ADC_Start_DMA+0x198>
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d018      	beq.n	8000b36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b14:	4b56      	ldr	r3, [pc, #344]	; (8000c70 <HAL_ADC_Start_DMA+0x1a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a56      	ldr	r2, [pc, #344]	; (8000c74 <HAL_ADC_Start_DMA+0x1a4>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9a      	lsrs	r2, r3, #18
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8000b28:	e002      	b.n	8000b30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f9      	bne.n	8000b2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	f040 8084 	bne.w	8000c4e <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b4e:	f023 0301 	bic.w	r3, r3, #1
 8000b52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d007      	beq.n	8000b78 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b84:	d106      	bne.n	8000b94 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f023 0206 	bic.w	r2, r3, #6
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	645a      	str	r2, [r3, #68]	; 0x44
 8000b92:	e002      	b.n	8000b9a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba6:	4a34      	ldr	r2, [pc, #208]	; (8000c78 <HAL_ADC_Start_DMA+0x1a8>)
 8000ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bae:	4a33      	ldr	r2, [pc, #204]	; (8000c7c <HAL_ADC_Start_DMA+0x1ac>)
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bb6:	4a32      	ldr	r2, [pc, #200]	; (8000c80 <HAL_ADC_Start_DMA+0x1b0>)
 8000bb8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000bc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000bd2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000be2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	334c      	adds	r3, #76	; 0x4c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f000 fcc0 	bl	8001578 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <HAL_ADC_Start_DMA+0x1b4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 031f 	and.w	r3, r3, #31
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10f      	bne.n	8000c24 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d129      	bne.n	8000c66 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	e020      	b.n	8000c66 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_ADC_Start_DMA+0x1b8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11b      	bne.n	8000c66 <HAL_ADC_Start_DMA+0x196>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d114      	bne.n	8000c66 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	e00b      	b.n	8000c66 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f043 0210 	orr.w	r2, r3, #16
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	431bde83 	.word	0x431bde83
 8000c78:	080010fd 	.word	0x080010fd
 8000c7c:	080011b7 	.word	0x080011b7
 8000c80:	080011d3 	.word	0x080011d3
 8000c84:	40012300 	.word	0x40012300
 8000c88:	40012000 	.word	0x40012000

08000c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x1c>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e103      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x224>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	d925      	bls.n	8000d28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68d9      	ldr	r1, [r3, #12]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	3b1e      	subs	r3, #30
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	400a      	ands	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68d9      	ldr	r1, [r3, #12]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	4603      	mov	r3, r0
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4403      	add	r3, r0
 8000d1a:	3b1e      	subs	r3, #30
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	e022      	b.n	8000d6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6919      	ldr	r1, [r3, #16]
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	400a      	ands	r2, r1
 8000d4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6919      	ldr	r1, [r3, #16]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4403      	add	r3, r0
 8000d64:	409a      	lsls	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d824      	bhi.n	8000dc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	3b05      	subs	r3, #5
 8000d88:	221f      	movs	r2, #31
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	400a      	ands	r2, r1
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b05      	subs	r3, #5
 8000db2:	fa00 f203 	lsl.w	r2, r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dbe:	e04c      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d824      	bhi.n	8000e12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b23      	subs	r3, #35	; 0x23
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43da      	mvns	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	400a      	ands	r2, r1
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	3b23      	subs	r3, #35	; 0x23
 8000e04:	fa00 f203 	lsl.w	r2, r0, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000e10:	e023      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	3b41      	subs	r3, #65	; 0x41
 8000e24:	221f      	movs	r2, #31
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	400a      	ands	r2, r1
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3b41      	subs	r3, #65	; 0x41
 8000e4e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_ADC_ConfigChannel+0x230>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d109      	bne.n	8000e78 <HAL_ADC_ConfigChannel+0x1c8>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d105      	bne.n	8000e78 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <HAL_ADC_ConfigChannel+0x234>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_ADC_ConfigChannel+0x234>)
 8000e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e76:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_ADC_ConfigChannel+0x230>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d123      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x21a>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d003      	beq.n	8000e92 <HAL_ADC_ConfigChannel+0x1e2>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b11      	cmp	r3, #17
 8000e90:	d11b      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_ADC_ConfigChannel+0x234>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_ADC_ConfigChannel+0x234>)
 8000e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e9c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d111      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_ADC_ConfigChannel+0x238>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_ADC_ConfigChannel+0x23c>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	0c9a      	lsrs	r2, r3, #18
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8000ebc:	e002      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f9      	bne.n	8000ebe <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40012000 	.word	0x40012000
 8000ee4:	40012300 	.word	0x40012300
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	431bde83 	.word	0x431bde83

08000ef0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	; (80010f4 <ADC_Init+0x204>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4a7d      	ldr	r2, [pc, #500]	; (80010f4 <ADC_Init+0x204>)
 8000efe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000f02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000f04:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <ADC_Init+0x204>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4979      	ldr	r1, [pc, #484]	; (80010f4 <ADC_Init+0x204>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6859      	ldr	r1, [r3, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	021a      	lsls	r2, r3, #8
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6859      	ldr	r1, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6899      	ldr	r1, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	; (80010f8 <ADC_Init+0x208>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d022      	beq.n	8000fca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6899      	ldr	r1, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6899      	ldr	r1, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	e00f      	b.n	8000fea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fe8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0202 	bic.w	r2, r2, #2
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7e1b      	ldrb	r3, [r3, #24]
 8001004:	005a      	lsls	r2, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d027      	beq.n	8001068 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001026:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001036:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	3b01      	subs	r3, #1
 800103e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001042:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	fa92 f2a2 	rbit	r2, r2
 800104a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	fa03 f102 	lsl.w	r1, r3, r2
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	e007      	b.n	8001078 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001076:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	3b01      	subs	r3, #1
 8001094:	051a      	lsls	r2, r3, #20
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6899      	ldr	r1, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ba:	025a      	lsls	r2, r3, #9
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6899      	ldr	r1, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	029a      	lsls	r2, r3, #10
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	609a      	str	r2, [r3, #8]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40012300 	.word	0x40012300
 80010f8:	0f000001 	.word	0x0f000001

080010fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001108:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13c      	bne.n	8001190 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d12b      	bne.n	8001188 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001134:	2b00      	cmp	r3, #0
 8001136:	d127      	bne.n	8001188 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001150:	2b00      	cmp	r3, #0
 8001152:	d119      	bne.n	8001188 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0220 	bic.w	r2, r2, #32
 8001162:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff fadb 	bl	8000744 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800118e:	e00e      	b.n	80011ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fd7e 	bl	8000c9e <HAL_ADC_ErrorCallback>
}
 80011a2:	e004      	b.n	80011ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fd61 	bl	8000c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f043 0204 	orr.w	r2, r3, #4
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f7ff fd53 	bl	8000c9e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011f8:	bf00      	nop
 80011fa:	3710      	adds	r7, #16
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <__NVIC_EnableIRQ+0x34>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff90 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff2d 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff42 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff35 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff fb04 	bl	8000a34 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e099      	b.n	800156c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	e00f      	b.n	800147a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145a:	f7ff faeb 	bl	8000a34 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b05      	cmp	r3, #5
 8001466:	d908      	bls.n	800147a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e078      	b.n	800156c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e8      	bne.n	800145a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_DMA_Init+0x158>)
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4313      	orrs	r3, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b04      	cmp	r3, #4
 800150c:	d117      	bne.n	800153e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fa6d 	bl	8001a00 <DMA_CheckFifoParam>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153a:	2301      	movs	r3, #1
 800153c:	e016      	b.n	800156c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fa26 	bl	8001998 <DMA_CalcBaseAndBitshift>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f010803f 	.word	0xf010803f

08001578 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_DMA_Start_IT+0x26>
 800159a:	2302      	movs	r3, #2
 800159c:	e040      	b.n	8001620 <HAL_DMA_Start_IT+0xa8>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d12f      	bne.n	8001612 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2202      	movs	r2, #2
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f9b8 	bl	800193c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	223f      	movs	r2, #63	; 0x3f
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0216 	orr.w	r2, r2, #22
 80015e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0208 	orr.w	r2, r2, #8
 80015fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0201 	orr.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e005      	b.n	800161e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800161a:	2302      	movs	r3, #2
 800161c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001634:	4b8e      	ldr	r3, [pc, #568]	; (8001870 <HAL_DMA_IRQHandler+0x248>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a8e      	ldr	r2, [pc, #568]	; (8001874 <HAL_DMA_IRQHandler+0x24c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2208      	movs	r2, #8
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2208      	movs	r2, #8
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2201      	movs	r2, #1
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c2:	f043 0202 	orr.w	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2204      	movs	r2, #4
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00b      	beq.n	8001700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2204      	movs	r2, #4
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0204 	orr.w	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2210      	movs	r2, #16
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d043      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d03c      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2210      	movs	r2, #16
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d018      	beq.n	800176a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d108      	bne.n	8001758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	2b00      	cmp	r3, #0
 800174c:	d024      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
 8001756:	e01f      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800175c:	2b00      	cmp	r3, #0
 800175e:	d01b      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e016      	b.n	8001798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2220      	movs	r2, #32
 800179e:	409a      	lsls	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 808f 	beq.w	80018c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8087 	beq.w	80018c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2220      	movs	r2, #32
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d136      	bne.n	8001840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0216 	bic.w	r2, r2, #22
 80017e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_DMA_IRQHandler+0x1da>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	223f      	movs	r2, #63	; 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001832:	2b00      	cmp	r3, #0
 8001834:	d07e      	beq.n	8001934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
        }
        return;
 800183e:	e079      	b.n	8001934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01d      	beq.n	800188a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	2b00      	cmp	r3, #0
 8001862:	d031      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
 800186c:	e02c      	b.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000
 8001874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e01e      	b.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10f      	bne.n	80018b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0210 	bic.w	r2, r2, #16
 80018a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d022      	beq.n	8001922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2205      	movs	r2, #5
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d307      	bcc.n	8001910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f2      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x2cc>
 800190e:	e000      	b.n	8001912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
 8001932:	e000      	b.n	8001936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001934:	bf00      	nop
    }
  }
}
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b40      	cmp	r3, #64	; 0x40
 8001968:	d108      	bne.n	800197c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800197a:	e007      	b.n	800198c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
	...

08001998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b10      	subs	r3, #16
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <DMA_CalcBaseAndBitshift+0x60>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <DMA_CalcBaseAndBitshift+0x64>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d909      	bls.n	80019da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58
 80019d8:	e007      	b.n	80019ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	aaaaaaab 	.word	0xaaaaaaab
 80019fc:	08002714 	.word	0x08002714

08001a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11f      	bne.n	8001a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d856      	bhi.n	8001ace <DMA_CheckFifoParam+0xce>
 8001a20:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <DMA_CheckFifoParam+0x28>)
 8001a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a26:	bf00      	nop
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a4b 	.word	0x08001a4b
 8001a30:	08001a39 	.word	0x08001a39
 8001a34:	08001acf 	.word	0x08001acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d046      	beq.n	8001ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a48:	e043      	b.n	8001ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a52:	d140      	bne.n	8001ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a58:	e03d      	b.n	8001ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a62:	d121      	bne.n	8001aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d837      	bhi.n	8001ada <DMA_CheckFifoParam+0xda>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <DMA_CheckFifoParam+0x70>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001a87 	.word	0x08001a87
 8001a78:	08001a81 	.word	0x08001a81
 8001a7c:	08001a99 	.word	0x08001a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      break;
 8001a84:	e030      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d025      	beq.n	8001ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a96:	e022      	b.n	8001ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa0:	d11f      	bne.n	8001ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aa6:	e01c      	b.n	8001ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d903      	bls.n	8001ab6 <DMA_CheckFifoParam+0xb6>
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d003      	beq.n	8001abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ab4:	e018      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aba:	e015      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00e      	beq.n	8001ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
      break;
 8001acc:	e00b      	b.n	8001ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ace:	bf00      	nop
 8001ad0:	e00a      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad2:	bf00      	nop
 8001ad4:	e008      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e006      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e004      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e002      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ae2:	bf00      	nop
 8001ae4:	e000      	b.n	8001ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e16f      	b.n	8001de4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8161 	beq.w	8001dde <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x40>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d123      	bne.n	8001c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80bb 	beq.w	8001dde <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c76:	6453      	str	r3, [r2, #68]	; 0x44
 8001c78:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_GPIO_Init+0x30c>)
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c84:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a57      	ldr	r2, [pc, #348]	; (8001e08 <HAL_GPIO_Init+0x314>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d031      	beq.n	8001d14 <HAL_GPIO_Init+0x220>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a56      	ldr	r2, [pc, #344]	; (8001e0c <HAL_GPIO_Init+0x318>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d02b      	beq.n	8001d10 <HAL_GPIO_Init+0x21c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <HAL_GPIO_Init+0x31c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d025      	beq.n	8001d0c <HAL_GPIO_Init+0x218>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <HAL_GPIO_Init+0x320>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d01f      	beq.n	8001d08 <HAL_GPIO_Init+0x214>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a53      	ldr	r2, [pc, #332]	; (8001e18 <HAL_GPIO_Init+0x324>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d019      	beq.n	8001d04 <HAL_GPIO_Init+0x210>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <HAL_GPIO_Init+0x328>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_GPIO_Init+0x20c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_GPIO_Init+0x32c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00d      	beq.n	8001cfc <HAL_GPIO_Init+0x208>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <HAL_GPIO_Init+0x330>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x204>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4f      	ldr	r2, [pc, #316]	; (8001e28 <HAL_GPIO_Init+0x334>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_GPIO_Init+0x200>
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	e010      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cf4:	2309      	movs	r3, #9
 8001cf6:	e00e      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	e00c      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001cfc:	2306      	movs	r3, #6
 8001cfe:	e00a      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d00:	2305      	movs	r3, #5
 8001d02:	e008      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d04:	2304      	movs	r3, #4
 8001d06:	e006      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e004      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e002      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_GPIO_Init+0x222>
 8001d14:	2300      	movs	r3, #0
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	f002 0203 	and.w	r2, r2, #3
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	4093      	lsls	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d28:	4936      	ldr	r1, [pc, #216]	; (8001e04 <HAL_GPIO_Init+0x310>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	089b      	lsrs	r3, r3, #2
 8001d2e:	3302      	adds	r3, #2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5a:	4a34      	ldr	r2, [pc, #208]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d60:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dae:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_GPIO_Init+0x338>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f ae88 	bne.w	8001b04 <HAL_GPIO_Init+0x10>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40021400 	.word	0x40021400
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	43d9      	mvns	r1, r3
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	400b      	ands	r3, r1
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e236      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d050      	beq.n	8001f54 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	4b9e      	ldr	r3, [pc, #632]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ebe:	4b9b      	ldr	r3, [pc, #620]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d112      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eca:	4b98      	ldr	r3, [pc, #608]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b94      	ldr	r3, [pc, #592]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d036      	beq.n	8001f52 <HAL_RCC_OscConfig+0xbe>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d132      	bne.n	8001f52 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e211      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_RCC_OscConfig+0x29c>)
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d013      	beq.n	8001f2a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fd97 	bl	8000a34 <HAL_GetTick>
 8001f06:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0a:	f7fe fd93 	bl	8000a34 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1fb      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1c:	4b83      	ldr	r3, [pc, #524]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001f28:	e014      	b.n	8001f54 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fd83 	bl	8000a34 <HAL_GetTick>
 8001f2e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f32:	f7fe fd7f 	bl	8000a34 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	; 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1e7      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f44:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x9e>
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d077      	beq.n	8002050 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f60:	4b72      	ldr	r3, [pc, #456]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d126      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d120      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e1bb      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	21f8      	movs	r1, #248	; 0xf8
 8001faa:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	69b9      	ldr	r1, [r7, #24]
 8001fae:	fa91 f1a1 	rbit	r1, r1
 8001fb2:	6179      	str	r1, [r7, #20]
  return result;
 8001fb4:	6979      	ldr	r1, [r7, #20]
 8001fb6:	fab1 f181 	clz	r1, r1
 8001fba:	b2c9      	uxtb	r1, r1
 8001fbc:	408b      	lsls	r3, r1
 8001fbe:	495b      	ldr	r1, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc4:	e044      	b.n	8002050 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02a      	beq.n	8002024 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_OscConfig+0x2a0>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fd2e 	bl	8000a34 <HAL_GetTick>
 8001fd8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fd2a 	bl	8000a34 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e192      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fee:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	21f8      	movs	r1, #248	; 0xf8
 8002008:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	fa91 f1a1 	rbit	r1, r1
 8002010:	60f9      	str	r1, [r7, #12]
  return result;
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	fab1 f181 	clz	r1, r1
 8002018:	b2c9      	uxtb	r1, r1
 800201a:	408b      	lsls	r3, r1
 800201c:	4943      	ldr	r1, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x298>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
 8002022:	e015      	b.n	8002050 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_OscConfig+0x2a0>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7fe fd03 	bl	8000a34 <HAL_GetTick>
 800202e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002032:	f7fe fcff 	bl	8000a34 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e167      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002044:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d030      	beq.n	80020be <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d016      	beq.n	8002092 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCC_OscConfig+0x2a4>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7fe fce3 	bl	8000a34 <HAL_GetTick>
 800206e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fcdf 	bl	8000a34 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e147      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_OscConfig+0x298>)
 8002086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x1de>
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x2a4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7fe fccc 	bl	8000a34 <HAL_GetTick>
 800209c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a0:	f7fe fcc8 	bl	8000a34 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e130      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_OscConfig+0x298>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8087 	beq.w	80021da <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_RCC_OscConfig+0x298>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d110      	bne.n	8002100 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_OscConfig+0x298>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_RCC_OscConfig+0x298>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCC_OscConfig+0x298>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_OscConfig+0x2a8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x2a8>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x2a8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d122      	bne.n	800215e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x2a8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_RCC_OscConfig+0x2a8>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002124:	f7fe fc86 	bl	8000a34 <HAL_GetTick>
 8002128:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	e012      	b.n	8002152 <HAL_RCC_OscConfig+0x2be>
 800212c:	40023800 	.word	0x40023800
 8002130:	40023802 	.word	0x40023802
 8002134:	42470000 	.word	0x42470000
 8002138:	42470e80 	.word	0x42470e80
 800213c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe fc78 	bl	8000a34 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0e0      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x488>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	4b6f      	ldr	r3, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x48c>)
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d015      	beq.n	800219c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002170:	f7fe fc60 	bl	8000a34 <HAL_GetTick>
 8002174:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7fe fc5c 	bl	8000a34 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0c2      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	4b65      	ldr	r3, [pc, #404]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0ee      	beq.n	8002178 <HAL_RCC_OscConfig+0x2e4>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe fc4a 	bl	8000a34 <HAL_GetTick>
 80021a0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe fc46 	bl	8000a34 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0ac      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ee      	bne.n	80021a4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b55      	ldr	r3, [pc, #340]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a54      	ldr	r2, [pc, #336]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8097 	beq.w	8002312 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b4b      	ldr	r3, [pc, #300]	; (8002328 <HAL_RCC_OscConfig+0x494>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fc19 	bl	8000a34 <HAL_GetTick>
 8002202:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fc15 	bl	8000a34 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	; 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e07d      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	4b42      	ldr	r3, [pc, #264]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002224:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4b40      	ldr	r3, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x498>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	69d1      	ldr	r1, [r2, #28]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6a12      	ldr	r2, [r2, #32]
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223a:	0192      	lsls	r2, r2, #6
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002242:	0612      	lsls	r2, r2, #24
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0412      	lsls	r2, r2, #16
 8002250:	430a      	orrs	r2, r1
 8002252:	4934      	ldr	r1, [pc, #208]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x494>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7fe fbe9 	bl	8000a34 <HAL_GetTick>
 8002262:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002266:	f7fe fbe5 	bl	8000a34 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e04d      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x3d2>
 8002284:	e045      	b.n	8002312 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_OscConfig+0x494>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fbd2 	bl	8000a34 <HAL_GetTick>
 8002290:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fbce 	bl	8000a34 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e036      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x400>
 80022b2:	e02e      	b.n	8002312 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e029      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x490>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d11c      	bne.n	800230e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d115      	bne.n	800230e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40007000 	.word	0x40007000
 8002320:	40023870 	.word	0x40023870
 8002324:	40023800 	.word	0x40023800
 8002328:	42470060 	.word	0x42470060
 800232c:	f0bc8000 	.word	0xf0bc8000

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0d2      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d90c      	bls.n	800236c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b66      	ldr	r3, [pc, #408]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0be      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800239c:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4950      	ldr	r1, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d040      	beq.n	8002448 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d115      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e085      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e079      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e071      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe fb0c 	bl	8000a34 <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fb08 	bl	8000a34 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e059      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d20c      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e03c      	b.n	80024ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	491b      	ldr	r1, [pc, #108]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4913      	ldr	r1, [pc, #76]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80024ae:	f000 f82b 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024bc:	22f0      	movs	r2, #240	; 0xf0
 80024be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	60fa      	str	r2, [r7, #12]
  return result;
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	40d3      	lsrs	r3, r2
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1cc>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	fa21 f303 	lsr.w	r3, r1, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1d0>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fa64 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023c00 	.word	0x40023c00
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08002704 	.word	0x08002704
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250c:	b090      	sub	sp, #64	; 0x40
 800250e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
 8002514:	2300      	movs	r3, #0
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d00d      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 800252c:	2b08      	cmp	r3, #8
 800252e:	f200 80a2 	bhi.w	8002676 <HAL_RCC_GetSysClockFreq+0x16e>
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x34>
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_RCC_GetSysClockFreq+0x3a>
 800253a:	e09c      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 800253e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002540:	e09c      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002546:	e099      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002548:	4b4f      	ldr	r3, [pc, #316]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d027      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255e:	4b4a      	ldr	r3, [pc, #296]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	2200      	movs	r2, #0
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	627a      	str	r2, [r7, #36]	; 0x24
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002570:	2100      	movs	r1, #0
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002574:	fb03 f201 	mul.w	r2, r3, r1
 8002578:	2300      	movs	r3, #0
 800257a:	fb00 f303 	mul.w	r3, r0, r3
 800257e:	4413      	add	r3, r2
 8002580:	4a43      	ldr	r2, [pc, #268]	; (8002690 <HAL_RCC_GetSysClockFreq+0x188>)
 8002582:	fba0 2102 	umull	r2, r1, r0, r2
 8002586:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002588:	62ba      	str	r2, [r7, #40]	; 0x28
 800258a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258c:	4413      	add	r3, r2
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	2200      	movs	r2, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	61fa      	str	r2, [r7, #28]
 8002598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025a0:	f7fd fe10 	bl	80001c4 <__aeabi_uldivmod>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4613      	mov	r3, r2
 80025aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ac:	e055      	b.n	800265a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	617a      	str	r2, [r7, #20]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c0:	f04f 0b00 	mov.w	fp, #0
 80025c4:	4652      	mov	r2, sl
 80025c6:	465b      	mov	r3, fp
 80025c8:	f04f 0000 	mov.w	r0, #0
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	0159      	lsls	r1, r3, #5
 80025d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d6:	0150      	lsls	r0, r2, #5
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	ebb2 080a 	subs.w	r8, r2, sl
 80025e0:	eb63 090b 	sbc.w	r9, r3, fp
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025f4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025f8:	ebb2 0408 	subs.w	r4, r2, r8
 80025fc:	eb63 0509 	sbc.w	r5, r3, r9
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	00eb      	lsls	r3, r5, #3
 800260a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260e:	00e2      	lsls	r2, r4, #3
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	eb14 030a 	adds.w	r3, r4, sl
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	eb45 030b 	adc.w	r3, r5, fp
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262c:	4629      	mov	r1, r5
 800262e:	028b      	lsls	r3, r1, #10
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	4604      	mov	r4, r0
 8002636:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800263a:	4601      	mov	r1, r0
 800263c:	028a      	lsls	r2, r1, #10
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	2200      	movs	r2, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	60fa      	str	r2, [r7, #12]
 800264a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264e:	f7fd fdb9 	bl	80001c4 <__aeabi_uldivmod>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4613      	mov	r3, r2
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0x180>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	3301      	adds	r3, #1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800266a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002674:	e002      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002676:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetSysClockFreq+0x184>)
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800267e:	4618      	mov	r0, r3
 8002680:	3740      	adds	r7, #64	; 0x40
 8002682:	46bd      	mov	sp, r7
 8002684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	017d7840 	.word	0x017d7840

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2600      	movs	r6, #0
 8002698:	4d0c      	ldr	r5, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1b64      	subs	r4, r4, r5
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f822 	bl	80026ec <_init>
 80026a8:	2600      	movs	r6, #0
 80026aa:	4d0a      	ldr	r5, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1b64      	subs	r4, r4, r5
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002724 	.word	0x08002724
 80026d0:	08002724 	.word	0x08002724
 80026d4:	08002724 	.word	0x08002724
 80026d8:	08002728 	.word	0x08002728

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <_init>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	bf00      	nop
 80026f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f2:	bc08      	pop	{r3}
 80026f4:	469e      	mov	lr, r3
 80026f6:	4770      	bx	lr

080026f8 <_fini>:
 80026f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026fa:	bf00      	nop
 80026fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fe:	bc08      	pop	{r3}
 8002700:	469e      	mov	lr, r3
 8002702:	4770      	bx	lr
